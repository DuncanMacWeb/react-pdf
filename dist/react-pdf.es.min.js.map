{"version":3,"file":"react-pdf.es.min.js","sources":["../src/utils/propsEqual.js","../src/renderer.js","../src/constants.js","../src/stylesheet/transformStyles.js","../src/font/font.js","../src/font/emoji.js","../src/font/standard.js","../src/font/hyphenation.js","../src/utils/warning.js","../src/font/index.js","../src/node/isImage.js","../src/utils/png.js","../src/utils/jpeg.js","../src/utils/cache.js","../src/image/resolveImage.js","../src/image/getSource.js","../src/image/fetchImage.js","../src/text/emoji.js","../src/layout/resolveAssets.js","../src/stylesheet/flatten.js","../src/stylesheet/expandStyles.js","../src/stylesheet/transformUnits.js","../src/stylesheet/resolveMediaQueries.js","../src/layout/resolveStyles.js","../src/layout/resolveZIndex.js","../src/node/hasVerticalRuler.js","../src/node/hasHorizontalRuler.js","../src/layout/resolveRulers.js","../src/utils/matchPercent.js","../src/node/getOrigin.js","../src/layout/resolveOrigins.js","../src/page/getOrientation.js","../src/page/isLandscape.js","../src/page/getSize.js","../src/utils/assocIfNil.js","../src/layout/resolvePageSizes.js","../src/utils/firstPass.js","../src/node/getMargin.js","../src/node/getPadding.js","../src/node/getPosition.js","../src/node/getDimension.js","../src/node/getBorderWidth.js","../src/utils/upperFirst.js","../src/node/setYogaValue.js","../src/node/setFlex.js","../src/node/setFlexGrow.js","../src/node/setFlexBasis.js","../src/node/setAlign.js","../src/node/setAlignSelf.js","../src/node/setFlexShrink.js","../src/node/setAlignContent.js","../src/node/setFlexDirection.js","../src/node/setMargin.js","../src/node/setPadding.js","../src/node/setBorderWidth.js","../src/node/setPosition.js","../src/node/setDimension.js","../src/node/isText.js","../src/node/isNote.js","../src/node/isPage.js","../src/node/isCanvas.js","../src/text/standardFont.js","../src/text/fontSubstitution.js","../src/text/ignorableChars.js","../src/node/isTextInstance.js","../src/text/getAttributedString.js","../src/utils/capitalize.js","../src/text/layoutText.js","../src/text/linesWidth.js","../src/text/linesHeight.js","../src/text/measureText.js","../src/image/getRatio.js","../src/page/isHeightAuto.js","../src/image/measureImage.js","../src/canvas/measureCanvas.js","../src/layout/resolveDimensions.js","../src/node/setPositionType.js","../src/node/setDisplay.js","../src/node/setJustifyContent.js","../src/node/setFlexWrap.js","../src/node/setOverflow.js","../src/node/setAspectRatio.js","../src/layout/resolveTextLayout.js","../src/layout/resolveInheritance.js","../src/node/removeMargins.js","../src/layout/resolvePageMargins.js","../src/node/shouldBreak.js","../src/node/getNodesHeight.js","../src/page/getContentArea.js","../src/layout/resolvePageBreaks.js","../src/node/split.js","../src/layout/resolvePageSplitting.js","../src/layout/resolvePageWrapping.js","../src/layout/resolveNoteChildren.js","../src/layout/resolvePagePaddings.js","../src/layout/resolvePercentRadius.js","../src/layout/resolvePercentHeight.js","../src/node/isLink.js","../src/layout/resolveLinkSubstitution.js","../src/layout/resolveAbsoluteCoordinates.js","../src/layout/index.js","../src/utils/asyncCompose.js","../src/pdf/save.js","../src/pdf/restore.js","../src/pdf/renderText.js","../src/pdf/renderPage.js","../src/utils/url.js","../src/link/getSource.js","../src/pdf/renderLink.js","../src/pdf/renderNote.js","../src/pdf/clipNode.js","../src/image/resolveObjectFit.js","../src/pdf/renderImage.js","../src/canvas/painter.js","../src/pdf/renderCanvas.js","../src/pdf/renderRulers.js","../src/pdf/addMetadata.js","../src/pdf/renderDebug.js","../src/pdf/renderBorders.js","../src/pdf/renderBackground.js","../src/pdf/applyTransformations.js","../src/pdf/render.js","../src/stylesheet/index.js","../src/index.js","../src/node.js"],"sourcesContent":["/**\n * Checks if two sets of props are equal (recursively)\n *\n * @param {Object} props A\n * @param {Object} props B\n * @returns {Boolean} props equals?\n *\n */\nconst propsEqual = (a, b) => {\n  const oldPropsKeys = Object.keys(a);\n  const newPropsKeys = Object.keys(b);\n\n  if (oldPropsKeys.length !== newPropsKeys.length) {\n    return false;\n  }\n\n  for (let i = 0; i < oldPropsKeys.length; i++) {\n    const propName = oldPropsKeys[i];\n\n    if (propName === 'render') {\n      if (!a[propName] !== !b[propName]) {\n        return false;\n      }\n      continue;\n    }\n\n    if (propName !== 'children' && a[propName] !== b[propName]) {\n      if (\n        typeof a[propName] === 'object' &&\n        typeof b[propName] === 'object' &&\n        propsEqual(a[propName], b[propName])\n      ) {\n        continue;\n      }\n\n      return false;\n    }\n\n    if (\n      propName === 'children' &&\n      (typeof a[propName] === 'string' || typeof b[propName] === 'string')\n    ) {\n      return a[propName] === b[propName];\n    }\n  }\n\n  return true;\n};\n\nexport default propsEqual;\n","'use strict';\n\nimport ReactFiberReconciler from 'react-reconciler';\n// import { createInstance } from './elements';\n\nimport propsEqual from './utils/propsEqual';\n\nconst emptyObject = {};\n\nconst createRenderer = onChange => {\n  return ReactFiberReconciler({\n    supportsMutation: true,\n\n    appendInitialChild(parentInstance, child) {\n      parentInstance.children.push(child);\n      onChange();\n    },\n\n    createInstance(type, { style, children, ...props }) {\n      return {\n        type,\n        box: {},\n        style: style || {},\n        props: props || {},\n        children: [],\n      };\n    },\n\n    createTextInstance(text, rootContainerInstance) {\n      return { type: 'TEXT_INSTANCE', value: text };\n    },\n\n    finalizeInitialChildren(element, type, props) {\n      return false;\n    },\n\n    getPublicInstance(instance) {\n      return instance;\n    },\n\n    prepareForCommit() {\n      // Noop\n    },\n\n    prepareUpdate(element, type, oldProps, newProps) {\n      return !propsEqual(oldProps, newProps);\n    },\n\n    resetAfterCommit(a, b, c) {\n      // Noop\n    },\n\n    resetTextContent(element) {\n      // Noop\n    },\n\n    getRootHostContext() {\n      return emptyObject;\n    },\n\n    getChildHostContext() {\n      return emptyObject;\n    },\n\n    shouldSetTextContent(type, props) {\n      return false;\n    },\n\n    now: Date.now,\n\n    useSyncScheduling: true,\n\n    appendChild(parentInstance, child) {\n      parentInstance.children.push(child);\n      onChange();\n    },\n\n    appendChildToContainer(parentInstance, child) {\n      parentInstance.children.push(child);\n      onChange();\n    },\n\n    insertBefore(parentInstance, child, beforeChild) {\n      const index = parentInstance.children.indexOf(beforeChild);\n      if (index !== -1 && child)\n        parentInstance.children.splice(index, 0, child);\n      onChange();\n    },\n\n    removeChild(parentInstance, child) {\n      const index = parentInstance.children.indexOf(child);\n      if (index !== -1) parentInstance.children.splice(index, 1);\n      onChange();\n    },\n\n    removeChildFromContainer(parentInstance, child) {\n      const index = parentInstance.children.indexOf(child);\n      if (index !== -1) parentInstance.children.splice(index, 1);\n      onChange();\n    },\n\n    commitTextUpdate(textInstance, oldText, newText) {\n      textInstance.value = newText;\n      onChange();\n    },\n\n    commitUpdate(instance, updatePayload, type, oldProps, newProps) {\n      const { style, ...props } = newProps;\n      instance.props = props;\n      instance.style = style;\n      onChange();\n    },\n  });\n};\n\nexport default createRenderer;\n","export const VIEW = 'VIEW';\nexport const TEXT = 'TEXT';\nexport const LINK = 'LINK';\nexport const PAGE = 'PAGE';\nexport const NOTE = 'NOTE';\nexport const IMAGE = 'IMAGE';\nexport const DOCUMENT = 'DOCUMENT';\nexport const CANVAS = 'CANVAS';\nexport const TEXT_INSTANCE = 'TEXT_INSTANCE';\n\nexport const DPI = 72; // 72pt per inch.\n\n// https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight#Common_weight_name_mapping\nexport const FONT_WEIGHTS = {\n  thin: 100,\n  hairline: 100,\n  ultralight: 200,\n  extralight: 200,\n  light: 300,\n  normal: 400,\n  medium: 500,\n  semibold: 600,\n  demibold: 600,\n  bold: 700,\n  ultrabold: 800,\n  extrabold: 800,\n  heavy: 900,\n  black: 900,\n};\n\nexport const PAGE_SIZES = {\n  '4A0': [4767.87, 6740.79],\n  '2A0': [3370.39, 4767.87],\n  A0: [2383.94, 3370.39],\n  A1: [1683.78, 2383.94],\n  A2: [1190.55, 1683.78],\n  A3: [841.89, 1190.55],\n  A4: [595.28, 841.89],\n  A5: [419.53, 595.28],\n  A6: [297.64, 419.53],\n  A7: [209.76, 297.64],\n  A8: [147.4, 209.76],\n  A9: [104.88, 147.4],\n  A10: [73.7, 104.88],\n  B0: [2834.65, 4008.19],\n  B1: [2004.09, 2834.65],\n  B2: [1417.32, 2004.09],\n  B3: [1000.63, 1417.32],\n  B4: [708.66, 1000.63],\n  B5: [498.9, 708.66],\n  B6: [354.33, 498.9],\n  B7: [249.45, 354.33],\n  B8: [175.75, 249.45],\n  B9: [124.72, 175.75],\n  B10: [87.87, 124.72],\n  C0: [2599.37, 3676.54],\n  C1: [1836.85, 2599.37],\n  C2: [1298.27, 1836.85],\n  C3: [918.43, 1298.27],\n  C4: [649.13, 918.43],\n  C5: [459.21, 649.13],\n  C6: [323.15, 459.21],\n  C7: [229.61, 323.15],\n  C8: [161.57, 229.61],\n  C9: [113.39, 161.57],\n  C10: [79.37, 113.39],\n  RA0: [2437.8, 3458.27],\n  RA1: [1729.13, 2437.8],\n  RA2: [1218.9, 1729.13],\n  RA3: [864.57, 1218.9],\n  RA4: [609.45, 864.57],\n  SRA0: [2551.18, 3628.35],\n  SRA1: [1814.17, 2551.18],\n  SRA2: [1275.59, 1814.17],\n  SRA3: [907.09, 1275.59],\n  SRA4: [637.8, 907.09],\n  EXECUTIVE: [521.86, 756.0],\n  FOLIO: [612.0, 936.0],\n  LEGAL: [612.0, 1008.0],\n  LETTER: [612.0, 792.0],\n  TABLOID: [792.0, 1224.0],\n};\n\nexport const PORTRAIT = 'portrait';\nexport const LANDSCAPE = 'landscape';\n\nexport const INHERITED_PROPERTIES = [\n  'color',\n  'fontFamily',\n  'fontSize',\n  'fontStyle',\n  'fontWeight',\n  'letterSpacing',\n  'opacity',\n  'textDecoration',\n  'lineHeight',\n  'textAlign',\n  'visibility',\n  'wordSpacing',\n];\n\nexport const RULER_WIDTH = 13;\nexport const RULER_COLOR = 'white';\nexport const RULER_FONT_SIZE = 6;\nexport const DEFAULT_RULER_STEPS = 50;\nexport const LINE_WIDTH = 0.5;\nexport const LINE_COLOR = 'gray';\nexport const GRID_COLOR = '#ababab';\n","import * as R from 'ramda';\n\nimport { FONT_WEIGHTS } from '../constants';\n\nconst BOX_MODEL_REGEX = /\\d+(px|in|mm|cm|pt|%|vw|vh)?/g;\nconst OBJECT_POSITION_REGEX = /\\d+(px|in|mm|cm|pt|%|vw|vh)?/g;\nconst BORDER_SHORTHAND_REGEX = /(\\d+(px|in|mm|cm|pt|vw|vh)?)\\s(\\S+)\\s(\\S+)/;\nconst TRANSFORM_ORIGIN_REGEX = /(-?\\d+(px|in|mm|cm|pt|%|vw|vh)?)|top|right|bottom|left|center/g;\n\nconst matchBoxModel = R.match(BOX_MODEL_REGEX);\nconst matchObjectPosition = R.match(OBJECT_POSITION_REGEX);\nconst matchBorderShorthand = R.match(BORDER_SHORTHAND_REGEX);\nconst matchTransformOrigin = R.match(TRANSFORM_ORIGIN_REGEX);\n\nconst isFontWeightStyle = key => key.match(/^fontWeight/);\n\nconst isBorderStyle = (key, value) =>\n  key.match(/^border(Top|Right|Bottom|Left)(Color|Width|Style)/) &&\n  typeof value === 'string';\n\nconst isBoxModelStyle = (key, value) =>\n  key.match(/^(margin)|(padding)/) && typeof value === 'string';\n\nconst isObjectPositionStyle = (key, value) =>\n  key.match(/^objectPosition/) && typeof value === 'string';\n\nconst isTransformOriginStyle = (key, value) =>\n  key.match(/^transformOrigin/) && typeof value === 'string';\n\nconst processBorders = (key, value) => {\n  const match = matchBorderShorthand(value);\n\n  if (match) {\n    if (key.match(/.Color/)) {\n      return match[4];\n    } else if (key.match(/.Style/)) {\n      return match[3];\n    } else if (key.match(/.Width/)) {\n      return match[1];\n    } else {\n      throw new Error(`StyleSheet: Invalid '${value}' for '${key}'`);\n    }\n  }\n\n  return value;\n};\n\nconst processBoxModel = (key, value) => {\n  const match = matchBoxModel(value);\n\n  if (match) {\n    if (key.match(/.Top/)) {\n      return match[0];\n    } else if (key.match(/.Right/)) {\n      return match[1] || match[0];\n    } else if (key.match(/.Bottom/)) {\n      return match[2] || match[0];\n    } else if (key.match(/.Left/)) {\n      return match[3] || match[1] || match[0];\n    } else {\n      throw new Error(`StyleSheet: Invalid '${value}' for '${key}'`);\n    }\n  }\n\n  return value;\n};\n\nexport const processFontWeight = (key, value) => {\n  if (!value) return FONT_WEIGHTS.normal;\n  if (typeof value === 'number') return value;\n  return FONT_WEIGHTS[value.toLowerCase()];\n};\n\nexport const processObjectPosition = (key, value) => {\n  const match = matchObjectPosition(value);\n\n  if (match) {\n    if (key.match(/.X/)) {\n      return match[0];\n    } else if (key.match(/.Y/)) {\n      return match[1];\n    } else {\n      throw new Error(`StyleSheet: Invalid '${value}' for '${key}'`);\n    }\n  }\n\n  return value;\n};\n\nconst transformOffsetKeywords = value => {\n  switch (value) {\n    case 'top':\n    case 'left':\n      return '0%';\n    case 'right':\n    case 'bottom':\n      return '100%';\n    case 'center':\n      return '50%';\n    default:\n      return value;\n  }\n};\n\n// Transforms shorthand transformOrigin values\nconst processTransformOrigin = (key, value) => {\n  const match = matchTransformOrigin(value);\n\n  if (match) {\n    let result;\n\n    if (key.match(/.X/)) {\n      result = match[0];\n    } else if (key.match(/.Y/)) {\n      result = match[1] || match[0];\n    } else {\n      throw new Error(`StyleSheet: Invalid '${value}' for '${key}'`);\n    }\n\n    return transformOffsetKeywords(result);\n  }\n\n  return value;\n};\n\nconst matchNumber = R.when(\n  R.is(String),\n  R.compose(\n    R.complement(R.isEmpty),\n    R.match(/^-?\\d*\\.?\\d*$/),\n  ),\n);\n\nconst castFloat = R.when(matchNumber, v => parseFloat(v, 10));\n\nconst transformStyles = style => {\n  const propsArray = Object.keys(style);\n  const resolvedStyle = {};\n\n  for (let i = 0; i < propsArray.length; i++) {\n    const key = propsArray[i];\n    const value = style[key];\n\n    resolvedStyle[key] = R.compose(\n      castFloat,\n      R.cond([\n        [isBorderStyle, processBorders],\n        [isBoxModelStyle, processBoxModel],\n        [isObjectPositionStyle, processObjectPosition],\n        [isTransformOriginStyle, processTransformOrigin],\n        [isFontWeightStyle, processFontWeight],\n        [R.T, R.always(value)],\n      ]),\n    )(key, value);\n  }\n\n  return resolvedStyle;\n};\n\nexport default transformStyles;\n","import isUrl from 'is-url';\nimport fontkit from '@react-pdf/fontkit';\nimport fetch from 'cross-fetch';\n\nimport { processFontWeight } from '../stylesheet/transformStyles';\n\nconst fetchFont = async (src, options) => {\n  const response = await fetch(src, options);\n\n  const buffer = await (response.buffer\n    ? response.buffer()\n    : response.arrayBuffer());\n\n  return buffer.constructor.name === 'Buffer' ? buffer : Buffer.from(buffer);\n};\n\nclass FontSource {\n  constructor(src, fontFamily, fontStyle, fontWeight, options) {\n    this.src = src;\n    this.fontFamily = fontFamily;\n    this.fontStyle = fontStyle || 'normal';\n    this.fontWeight = processFontWeight(fontWeight) || 400;\n\n    this.data = null;\n    this.loading = false;\n    this.options = options;\n  }\n\n  async load() {\n    this.loading = true;\n\n    if (BROWSER || isUrl(this.src)) {\n      const { headers, body, method = 'GET' } = this.options;\n      const data = await fetchFont(this.src, { method, body, headers });\n      this.data = fontkit.create(data);\n    } else {\n      this.data = await new Promise((resolve, reject) =>\n        fontkit.open(this.src, (err, data) =>\n          err ? reject(err) : resolve(data),\n        ),\n      );\n    }\n\n    this.loading = false;\n  }\n}\n\nclass Font {\n  static create(family) {\n    return new Font(family);\n  }\n\n  constructor(family) {\n    this.family = family;\n    this.sources = [];\n  }\n\n  register({ src, fontWeight, fontStyle, ...options }) {\n    this.sources.push(\n      new FontSource(src, this.fontFamily, fontStyle, fontWeight, options),\n    );\n  }\n\n  resolve(descriptor) {\n    const { fontWeight = 400, fontStyle = 'normal' } = descriptor;\n    const styleSources = this.sources.filter(s => s.fontStyle === fontStyle);\n\n    // Weight resolution. https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight#Fallback_weights\n    const exactFit = styleSources.find(s => s.fontWeight === fontWeight);\n\n    if (exactFit) return exactFit;\n\n    let res;\n\n    if (fontWeight >= 400 && fontWeight <= 500) {\n      const leftOffset = styleSources.filter(s => s.fontWeight <= fontWeight);\n      const rightOffset = styleSources.filter(s => s.fontWeight > 500);\n      const fit = styleSources.filter(\n        s => s.fontWeight >= fontWeight && s.fontWeight < 500,\n      );\n\n      res = fit[0] || leftOffset[leftOffset.length - 1] || rightOffset[0];\n    }\n\n    const lt = styleSources.filter(s => s.fontWeight < fontWeight);\n    const gt = styleSources.filter(s => s.fontWeight > fontWeight);\n\n    if (fontWeight < 400) {\n      res = lt[lt.length - 1] || gt[0];\n    }\n\n    if (fontWeight > 500) {\n      res = gt[0] || lt[lt.length - 1];\n    }\n\n    if (!res) {\n      throw new Error(\n        `Could not resolve font for ${\n          this.fontFamily\n        }, fontWeight ${fontWeight}`,\n      );\n    }\n\n    return res;\n  }\n}\n\nexport default Font;\n","let emojiSource;\n\nexport const registerEmojiSource = ({ url, format = 'png' }) => {\n  emojiSource = { url, format };\n};\n\nexport const getEmojiSource = () => emojiSource;\n\nexport default {\n  registerEmojiSource,\n  getEmojiSource,\n};\n","export default [\n  'Courier',\n  'Courier-Bold',\n  'Courier-Oblique',\n  'Helvetica',\n  'Helvetica-Bold',\n  'Helvetica-Oblique',\n  'Times-Roman',\n  'Times-Bold',\n  'Times-Italic',\n];\n","let hyphenationCallback;\n\nexport const registerHyphenationCallback = callback => {\n  hyphenationCallback = callback;\n};\n\nexport const getHyphenationCallback = () => hyphenationCallback;\n\nexport default {\n  registerHyphenationCallback,\n  getHyphenationCallback,\n};\n","function printWarning(format, ...args) {\n  let argIndex = 0;\n  const message = 'Warning: ' + format.replace(/%s/g, () => args[argIndex++]);\n\n  if (typeof console !== 'undefined') {\n    console.error(message);\n  }\n\n  try {\n    throw new Error(message);\n  } catch (x) {}\n}\n\nconst __DEV__ = process.env.NODE_ENV !== 'production';\n\nconst warning = __DEV__\n  ? (condition, format, ...args) => {\n      if (format === undefined) {\n        throw new Error(\n          '`warning(condition, format, ...args)` requires a warning ' +\n            'message argument',\n        );\n      }\n      if (!condition) {\n        printWarning(format, ...args);\n      }\n    }\n  : () => {};\n\nexport default warning;\n","import font from './font';\nimport emoji from './emoji';\nimport standardFonts from './standard';\nimport hyphenation from './hyphenation';\nimport warning from '../utils/warning';\n\nlet fonts = {};\n\nconst register = (src, data) => {\n  if (typeof src === 'object') {\n    data = src;\n  } else {\n    warning(\n      false,\n      'Font.register will not longer accept the font source as first argument. Please move it into the data object. For more info refer to https://react-pdf.org/fonts',\n    );\n\n    data.src = src;\n  }\n\n  const { family } = data;\n\n  if (!fonts[family]) {\n    fonts[family] = font.create(family);\n  }\n\n  // Bulk loading\n  if (data.fonts) {\n    for (let i = 0; i < data.fonts.length; i++) {\n      fonts[family].register({ family, ...data.fonts[i] });\n    }\n  } else {\n    fonts[family].register(data);\n  }\n};\n\nconst getRegisteredFonts = () => fonts;\n\nconst getRegisteredFontFamilies = () => Object.keys(fonts);\n\nconst getFont = descriptor => {\n  const { fontFamily } = descriptor;\n  const isStandard = standardFonts.includes(fontFamily);\n\n  if (isStandard) return null;\n\n  if (!fonts[fontFamily]) {\n    throw new Error(\n      `Font family not registered: ${fontFamily}. Please register it calling Font.register() method.`,\n    );\n  }\n\n  return fonts[fontFamily].resolve(descriptor);\n};\n\nconst load = async function(descriptor) {\n  const { fontFamily } = descriptor;\n  const isStandard = standardFonts.includes(fontFamily);\n\n  if (isStandard) return;\n\n  const font = getFont(descriptor);\n\n  // We cache the font to avoid fetching it many times\n  if (!font.data && !font.loading) {\n    await font.load();\n  }\n};\n\nconst reset = function() {\n  for (const font in fonts) {\n    if (fonts.hasOwnProperty(font)) {\n      fonts[font].data = null;\n    }\n  }\n};\n\nconst clear = function() {\n  fonts = {};\n};\n\nexport default {\n  register,\n  getRegisteredFonts,\n  getRegisteredFontFamilies,\n  getFont,\n  load,\n  clear,\n  reset,\n  ...emoji,\n  ...hyphenation,\n};\n","import * as R from 'ramda';\n\nimport { IMAGE } from '../constants';\n\n/**\n * Checks if node is image\n *\n * @param {Object} node\n * @returns {Boolean} is node image?\n */\nconst isImage = R.propEq('type', IMAGE);\n\nexport default isImage;\n","import PNG from '@react-pdf/png-js';\n\nPNG.isValid = function(data) {\n  try {\n    return !!new PNG(data);\n  } catch (e) {\n    return false;\n  }\n};\n\nexport default PNG;\n","// Extracted from https://github.com/devongovett/pdfkit/blob/master/lib/image/jpeg.coffee\n\nconst MARKERS = [\n  0xffc0,\n  0xffc1,\n  0xffc2,\n  0xffc3,\n  0xffc5,\n  0xffc6,\n  0xffc7,\n  0xffc8,\n  0xffc9,\n  0xffca,\n  0xffcb,\n  0xffcc,\n  0xffcd,\n  0xffce,\n  0xffcf,\n];\n\nclass JPEG {\n  data = null;\n  width = null;\n  height = null;\n\n  constructor(data) {\n    this.data = data;\n\n    if (data.readUInt16BE(0) !== 0xffd8) {\n      throw new Error('SOI not found in JPEG');\n    }\n\n    let marker;\n    let pos = 2;\n\n    while (pos < data.length) {\n      marker = data.readUInt16BE(pos);\n      pos += 2;\n      if (MARKERS.includes(marker)) {\n        break;\n      }\n      pos += data.readUInt16BE(pos);\n    }\n\n    if (!MARKERS.includes(marker)) {\n      throw new Error('Invalid JPEG.');\n    }\n\n    pos += 3;\n    this.height = data.readUInt16BE(pos);\n\n    pos += 2;\n    this.width = data.readUInt16BE(pos);\n  }\n}\n\nJPEG.isValid = function(data) {\n  if (!data || !Buffer.isBuffer(data) || data.readUInt16BE(0) !== 0xffd8) {\n    return false;\n  }\n\n  let marker;\n  let pos = 2;\n\n  while (pos < data.length) {\n    marker = data.readUInt16BE(pos);\n    pos += 2;\n    if (MARKERS.includes(marker)) {\n      break;\n    }\n    pos += data.readUInt16BE(pos);\n  }\n\n  if (!MARKERS.includes(marker)) {\n    return false;\n  }\n\n  return true;\n};\n\nexport default JPEG;\n","const createCache = ({ limit = 100 } = {}) => {\n  let cache = {};\n  let keys = [];\n\n  return {\n    get: key => cache[key],\n    set: (key, value) => {\n      keys.push(key);\n      if (keys.length > limit) {\n        delete cache[keys.shift()];\n      }\n      cache[key] = value;\n    },\n    reset: () => {\n      cache = {};\n      keys = [];\n    },\n    length: () => keys.length,\n  };\n};\n\nexport default createCache;\n","import fs from 'fs';\nimport url from 'url';\nimport path from 'path';\nimport fetch from 'cross-fetch';\n\nimport PNG from '../utils/png';\nimport JPEG from '../utils/jpeg';\nimport createCache from '../utils/cache';\n\nexport const IMAGE_CACHE = createCache({ limit: 30 });\n\nexport const getAbsoluteLocalPath = src => {\n  if (BROWSER) {\n    throw new Error('Cannot check local paths in client-side environment');\n  }\n\n  const { protocol, auth, host, port, hostname, path: pathname } = url.parse(\n    src,\n  );\n  const absolutePath = path.resolve(pathname);\n  if ((protocol && protocol !== 'file:') || auth || host || port || hostname) {\n    return undefined;\n  }\n  return absolutePath;\n};\n\nconst fetchLocalFile = src =>\n  new Promise((resolve, reject) => {\n    try {\n      if (BROWSER) {\n        return reject(new Error('Cannot fetch local file in this environemnt'));\n      }\n      const absolutePath = getAbsoluteLocalPath(src);\n      if (!absolutePath) {\n        return reject(new Error(`Cannot fetch non-local path: ${src}`));\n      }\n      fs.readFile(absolutePath, (err, data) =>\n        err ? reject(err) : resolve(data),\n      );\n    } catch (err) {\n      reject(err);\n    }\n  });\n\nconst fetchRemoteFile = async (uri, options) => {\n  const response = await fetch(uri, options);\n\n  const buffer = await (response.buffer\n    ? response.buffer()\n    : response.arrayBuffer());\n\n  return buffer.constructor.name === 'Buffer' ? buffer : Buffer.from(buffer);\n};\n\nconst isValidFormat = format => {\n  const lower = format.toLowerCase();\n  return lower === 'jpg' || lower === 'jpeg' || lower === 'png';\n};\n\nconst guessFormat = buffer => {\n  let format;\n\n  if (JPEG.isValid(buffer)) {\n    format = 'jpg';\n  } else if (PNG.isValid(buffer)) {\n    format = 'png';\n  }\n\n  return format;\n};\n\nconst isCompatibleBase64 = ({ uri }) =>\n  /^data:image\\/[a-zA-Z]*;base64,[^\"]*/g.test(uri);\n\nfunction getImage(body, extension) {\n  switch (extension.toLowerCase()) {\n    case 'jpg':\n    case 'jpeg':\n      return new JPEG(body);\n    case 'png':\n      return new PNG(body);\n    default:\n      return null;\n  }\n}\n\nconst resolveBase64Image = ({ uri }) => {\n  const match = /^data:image\\/([a-zA-Z]*);base64,([^\"]*)/g.exec(uri);\n  const format = match[1];\n  const data = match[2];\n\n  if (!isValidFormat(format)) {\n    throw new Error(`Base64 image invalid format: ${format}`);\n  }\n\n  return new Promise(resolve => {\n    return resolve(getImage(Buffer.from(data, 'base64'), format));\n  });\n};\n\nconst resolveImageFromData = src => {\n  if (src.data && src.format) {\n    return new Promise(resolve => resolve(getImage(src.data, src.format)));\n  }\n\n  throw new Error(`Invalid data given for local file: ${JSON.stringify(src)}`);\n};\n\nconst resolveBufferImage = buffer => {\n  const format = guessFormat(buffer);\n\n  if (format) {\n    return new Promise(resolve => resolve(getImage(buffer, format)));\n  }\n};\n\nconst getImageFormat = body => {\n  const isPng =\n    body[0] === 137 &&\n    body[1] === 80 &&\n    body[2] === 78 &&\n    body[3] === 71 &&\n    body[4] === 13 &&\n    body[5] === 10 &&\n    body[6] === 26 &&\n    body[7] === 10;\n\n  const isJpg = body[0] === 255 && body[1] === 216 && body[2] === 255;\n\n  let extension = '';\n  if (isPng) {\n    extension = 'png';\n  } else if (isJpg) {\n    extension = 'jpg';\n  } else {\n    throw new Error('Not valid image extension');\n  }\n\n  return extension;\n};\n\nconst resolveImageFromUrl = async src => {\n  const { uri, body, headers, method = 'GET' } = src;\n\n  const data =\n    !BROWSER && getAbsoluteLocalPath(uri)\n      ? await fetchLocalFile(uri)\n      : await fetchRemoteFile(uri, { body, headers, method });\n\n  const extension = getImageFormat(data);\n\n  return getImage(data, extension);\n};\n\nconst resolveImage = (src, { cache = true } = {}) => {\n  const cacheKey = src.data ? src.data.toString() : src.uri;\n\n  if (cache && IMAGE_CACHE.get(cacheKey)) {\n    return IMAGE_CACHE.get(cacheKey);\n  }\n\n  let image;\n  if (isCompatibleBase64(src)) {\n    image = resolveBase64Image(src);\n  } else if (Buffer.isBuffer(src)) {\n    image = resolveBufferImage(src);\n  } else if (typeof src === 'object' && src.data) {\n    image = resolveImageFromData(src);\n  } else {\n    image = resolveImageFromUrl(src);\n  }\n\n  if (!image) {\n    throw new Error('Cannot resolve image');\n  }\n\n  if (cache) {\n    IMAGE_CACHE.set(cacheKey, image);\n  }\n\n  return image;\n};\n\nexport default resolveImage;\n","import * as R from 'ramda';\n\n/**\n * Get image source\n *\n * @param {Object} image node\n * @returns {String} image src\n */\nconst getSource = R.compose(\n  R.when(R.is(String), src => ({ uri: src })),\n  R.either(R.path(['props', 'src']), R.path(['props', 'source'])),\n);\n\nexport default getSource;\n","import resolveImage from './resolveImage';\nimport getSource from './getSource';\nimport warning from '../utils/warning';\n\nconst fetchImage = async node => {\n  const src = getSource(node);\n  const { cache } = node.props;\n\n  if (!src) {\n    warning(false, 'Image should receive either a \"src\" or \"source\" prop');\n    return;\n  }\n\n  try {\n    node.image = await resolveImage(src, { cache });\n  } catch (e) {\n    node.image = { width: 0, height: 0 };\n    console.warn(e.message);\n  }\n};\n\nexport default fetchImage;\n","/* eslint-disable no-cond-assign */\nimport emojiRegex from 'emoji-regex';\n\nimport Font from '../font';\nimport resolveImage from '../image/resolveImage';\n\n// Caches emoji images data\nconst emojis = {};\nconst regex = emojiRegex();\n\nconst reflect = promise => (...args) => promise(...args).then(v => v, e => e);\n\n// Returns a function to be able to mock resolveImage.\nconst makeFetchEmojiImage = () => reflect(resolveImage);\n\n/**\n * When an emoji as no color, it might still have 2 parts,\n * the canonical emoji and an empty string.\n * ex.\n *   (no color) Array.from('❤️') => [\"❤\", \"️\"]\n *   (w/ color) Array.from('👍🏿') => [\"👍\", \"🏿\"]\n *\n * The empty string needs to be removed otherwise the generated\n * url will be incorect.\n */\nconst _removeNoColor = x => x !== '️';\n\nconst getCodePoints = string =>\n  Array.from(string)\n    .filter(_removeNoColor)\n    .map(char => char.codePointAt(0).toString(16))\n    .join('-');\n\nconst buildEmojiUrl = emoji => {\n  const { url, format } = Font.getEmojiSource();\n  return `${url}${getCodePoints(emoji)}.${format}`;\n};\n\nexport const fetchEmojis = string => {\n  const emojiSource = Font.getEmojiSource();\n\n  if (!emojiSource || !emojiSource.url) return [];\n\n  const promises = [];\n\n  let match;\n  while ((match = regex.exec(string))) {\n    const emoji = match[0];\n\n    if (!emojis[emoji] || emojis[emoji].loading) {\n      const emojiUrl = buildEmojiUrl(emoji);\n\n      emojis[emoji] = { loading: true };\n      const fetchEmojiImage = makeFetchEmojiImage();\n      promises.push(\n        fetchEmojiImage({ uri: emojiUrl }).then(image => {\n          emojis[emoji].loading = false;\n          emojis[emoji].data = image.data;\n        }),\n      );\n    }\n  }\n\n  return promises;\n};\n\nexport const embedEmojis = fragments => {\n  const result = [];\n\n  for (let i = 0; i < fragments.length; i++) {\n    const fragment = fragments[i];\n\n    let match;\n    let lastIndex = 0;\n\n    while ((match = regex.exec(fragment.string))) {\n      const index = match.index;\n      const emoji = match[0];\n      const emojiSize = fragment.attributes.fontSize;\n      const chunk = fragment.string.slice(lastIndex, index + match[0].length);\n\n      // If emoji image was found, we create a new fragment with the\n      // correct attachment and object substitution character;\n      if (emojis[emoji] && emojis[emoji].data) {\n        result.push({\n          string: chunk.replace(match, String.fromCharCode(0xfffc)),\n          attributes: {\n            ...fragment.attributes,\n            attachment: {\n              width: emojiSize,\n              height: emojiSize,\n              yOffset: Math.floor(emojiSize * 0.1),\n              image: emojis[emoji].data,\n            },\n          },\n        });\n      } else {\n        // If no emoji data, we just replace the emoji with a nodef char\n        result.push({\n          string: chunk.replace(match, String.fromCharCode(0)),\n          attributes: fragment.attributes,\n        });\n      }\n\n      lastIndex = index + emoji.length;\n    }\n\n    if (lastIndex < fragment.string.length) {\n      result.push({\n        string: fragment.string.slice(lastIndex),\n        attributes: fragment.attributes,\n      });\n    }\n  }\n\n  return result;\n};\n","import * as R from 'ramda';\n\nimport Font from '../font';\nimport isImage from '../node/isImage';\nimport fetchImage from '../image/fetchImage';\nimport { fetchEmojis } from '../text/emoji';\n\n/**\n * Get all asset promises that need to be resolved\n *\n * @param {Object} root node\n * @returns {Array} asset promises\n */\nconst fetchAssets = node => {\n  const promises = [];\n  const listToExplore = node.children.slice(0);\n\n  while (listToExplore.length > 0) {\n    const node = listToExplore.shift();\n\n    if (isImage(node)) {\n      promises.push(fetchImage(node));\n    }\n\n    if (node.style && node.style.fontFamily) {\n      promises.push(Font.load(node.style));\n    }\n\n    if (typeof node === 'string') {\n      promises.push(...fetchEmojis(node));\n    }\n\n    if (typeof node.value === 'string') {\n      promises.push(...fetchEmojis(node.value));\n    }\n\n    if (node.children) {\n      node.children.forEach(childNode => {\n        listToExplore.push(childNode);\n      });\n    }\n  }\n\n  return promises;\n};\n\n/**\n * Fetch image, font and emoji assets in parallel.\n * Layout process will not be resumed until promise resolves.\n *\n * @param {Object} root node\n * @returns {Object} root node\n */\nconst resolveAssets = node =>\n  R.compose(\n    R.then(R.always(node)),\n    p => Promise.all(p),\n    fetchAssets,\n  )(node);\n\nexport default resolveAssets;\n","import * as R from 'ramda';\n\n/**\n * Remove nil values from array\n *\n * @param {Array} array\n * @returns {Array} array without nils\n */\nconst compact = R.filter(Boolean);\n\n/**\n * Checks if value is array\n *\n * @param {any} value\n * @returns {Boolean} is value an array\n */\nconst isArray = R.is(Array);\n\n/**\n * Checks if value is not an array\n *\n * @param {any} value\n * @returns {Boolean} isn't value an array\n */\nconst isNotArray = R.complement(isArray);\n\n/**\n * Casts value to array\n *\n * @param {any} value\n * @returns {Array} casted value\n */\nconst castArray = R.when(isNotArray, v => [v]);\n\n/**\n * Merges style objects array\n *\n * @param {Array} style objects array\n * @returns {Object} merged style object\n */\nconst mergeStyles = styles =>\n  styles.reduce((acc, style) => {\n    const s = isArray(style) ? flatten(style) : style;\n\n    Object.keys(s).forEach(key => {\n      if (s[key] !== null && s[key] !== undefined) {\n        acc[key] = s[key];\n      }\n    });\n\n    return acc;\n  }, {});\n\n/**\n * Flattens an array of style objects, into one aggregated style object.\n *\n * @param {Array} style objects array\n * @returns {Object} flatted style object\n */\nconst flatten = R.compose(\n  mergeStyles,\n  compact,\n  castArray,\n);\n\nexport default flatten;\n","import * as R from 'ramda';\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/**\n * Expand rules\n */\nconst styleShorthands = {\n  margin: {\n    marginTop: true,\n    marginRight: true,\n    marginBottom: true,\n    marginLeft: true,\n  },\n  marginHorizontal: {\n    marginLeft: true,\n    marginRight: true,\n  },\n  marginVertical: {\n    marginTop: true,\n    marginBottom: true,\n  },\n  padding: {\n    paddingTop: true,\n    paddingRight: true,\n    paddingBottom: true,\n    paddingLeft: true,\n  },\n  paddingHorizontal: {\n    paddingLeft: true,\n    paddingRight: true,\n  },\n  paddingVertical: {\n    paddingTop: true,\n    paddingBottom: true,\n  },\n  border: {\n    borderTopColor: true,\n    borderTopStyle: true,\n    borderTopWidth: true,\n    borderRightColor: true,\n    borderRightStyle: true,\n    borderRightWidth: true,\n    borderBottomColor: true,\n    borderBottomStyle: true,\n    borderBottomWidth: true,\n    borderLeftColor: true,\n    borderLeftStyle: true,\n    borderLeftWidth: true,\n  },\n  borderTop: {\n    borderTopColor: true,\n    borderTopStyle: true,\n    borderTopWidth: true,\n  },\n  borderRight: {\n    borderRightColor: true,\n    borderRightStyle: true,\n    borderRightWidth: true,\n  },\n  borderBottom: {\n    borderBottomColor: true,\n    borderBottomStyle: true,\n    borderBottomWidth: true,\n  },\n  borderLeft: {\n    borderLeftColor: true,\n    borderLeftStyle: true,\n    borderLeftWidth: true,\n  },\n  borderColor: {\n    borderTopColor: true,\n    borderRightColor: true,\n    borderBottomColor: true,\n    borderLeftColor: true,\n  },\n  borderRadius: {\n    borderTopLeftRadius: true,\n    borderTopRightRadius: true,\n    borderBottomRightRadius: true,\n    borderBottomLeftRadius: true,\n  },\n  borderStyle: {\n    borderTopStyle: true,\n    borderRightStyle: true,\n    borderBottomStyle: true,\n    borderLeftStyle: true,\n  },\n  borderWidth: {\n    borderTopWidth: true,\n    borderRightWidth: true,\n    borderBottomWidth: true,\n    borderLeftWidth: true,\n  },\n  objectPosition: {\n    objectPositionX: true,\n    objectPositionY: true,\n  },\n  transformOrigin: {\n    transformOriginX: true,\n    transformOriginY: true,\n  },\n};\n\nconst expandedKeys = R.keys(styleShorthands);\n\n/**\n * Expand the shorthand properties to isolate every declaration from the others.\n *\n * @param { Object } style object\n * @returns { Object } expanded style object\n */\nconst expandStyles = style => {\n  if (!style) return style;\n\n  const propsArray = Object.keys(style);\n  const resolvedStyle = {};\n\n  for (let i = 0; i < propsArray.length; i++) {\n    const key = propsArray[i];\n    const value = style[key];\n\n    if (R.includes(key, expandedKeys)) {\n      const expandedProps = styleShorthands[key];\n      for (const propName in expandedProps) {\n        if (hasOwnProperty.call(expandedProps, propName)) {\n          resolvedStyle[propName] = value;\n        }\n      }\n    } else {\n      resolvedStyle[key] = value;\n    }\n  }\n\n  return resolvedStyle;\n};\n\nexport default expandStyles;\n","import * as R from 'ramda';\n\nimport { DPI } from '../constants';\n\n/**\n * Parses scalar value in value and unit pairs\n *\n * @param {String} scalar value\n * @returns {Object} parsed value\n */\nconst parseValue = value => {\n  const match = /^(-?\\d*\\.?\\d+)(in|mm|cm|pt|vh|vw)?$/g.exec(value);\n  return match\n    ? { value: parseFloat(match[1], 10), unit: match[2] || 'pt' }\n    : { value, unit: undefined };\n};\n\n/**\n * Transform given scalar value\n *\n * @param {Object} container\n * @param {String} styles value\n * @returns {Object} transformed value\n */\nconst transformUnit = R.curryN(2, (container, value) => {\n  const scalar = parseValue(value);\n  switch (scalar.unit) {\n    case 'in':\n      return scalar.value * DPI;\n    case 'mm':\n      return scalar.value * (1 / 25.4) * DPI;\n    case 'cm':\n      return scalar.value * (1 / 2.54) * DPI;\n    case 'vh':\n      return scalar.value * (container.height / 100);\n    case 'vw':\n      return scalar.value * (container.width / 100);\n    default:\n      return scalar.value;\n  }\n});\n\n/**\n * Transform units on given styles object.\n * Container is given to calculate vh and vw\n *\n * @param {Object} container\n * @param {Object} styles object\n * @returns {Object} transformed styles\n */\nconst transformUnits = (container, styles) =>\n  R.map(transformUnit(container), styles);\n\nexport default R.curryN(2, transformUnits);\n","import * as R from 'ramda';\nimport matchMedia from 'media-engine';\n\n/**\n * Resolves media queries in styles object\n *\n * @param {Object} container\n * @param {Object} styles object\n */\nconst resolveMediaQueries = (container, styles) => {\n  return Object.keys(styles).reduce((acc, key) => {\n    if (/@media/.test(key)) {\n      return {\n        ...acc,\n        ...matchMedia({ [key]: styles[key] }, container),\n      };\n    }\n\n    return { ...acc, [key]: styles[key] };\n  }, {});\n};\n\nexport default R.curryN(2, resolveMediaQueries);\n","import * as R from 'ramda';\n\nimport flattenStyles from '../stylesheet/flatten';\nimport expandStyles from '../stylesheet/expandStyles';\nimport transformUnits from '../stylesheet/transformUnits';\nimport transformStyles from '../stylesheet/transformStyles';\nimport resolveMediaQueries from '../stylesheet/resolveMediaQueries';\n\n/**\n * Resolves styles\n *\n * @param {Object} container\n * @param {Object} style object\n * @returns {Object} resolved style object\n */\nconst resolveStyles = container =>\n  R.compose(\n    transformUnits(container),\n    transformStyles,\n    expandStyles,\n    resolveMediaQueries(container),\n    flattenStyles,\n  );\n\n/**\n * Resolves node styles\n *\n * @param {Object} container\n * @param {Object} document node\n * @returns {Object} node (and subnodes) with resolved styles\n */\nconst resolveNodeStyles = page => node => {\n  const container = R.propOr({}, 'box', page);\n\n  return R.evolve({\n    style: resolveStyles(container),\n    children: R.map(resolveNodeStyles(page)),\n  })(node);\n};\n\n/**\n * Resolves page styles\n *\n * @param {Object} document page\n * @returns {Object} document page with resolved styles\n */\nconst resolvePageStyles = page => {\n  const pageBox = R.propOr({}, 'box', page);\n\n  return R.evolve({\n    children: R.map(resolveNodeStyles(page)),\n    style: R.compose(\n      transformUnits(pageBox),\n      transformStyles,\n      expandStyles,\n      flattenStyles,\n    ),\n  })(page);\n};\n\n/**\n * Resolves root styles\n *\n * @param {Object} document root\n * @returns {Object} document root with resolved styles\n */\nexport default R.evolve({\n  children: R.map(\n    R.evolve({\n      children: R.map(resolvePageStyles),\n    }),\n  ),\n});\n","import * as R from 'ramda';\n\n/**\n * Sort children by zIndex value\n *\n * @param {Object} node\n * @returns {Object} node\n */\nconst resolveZIndex = node =>\n  R.evolve({\n    children: R.compose(\n      R.map(resolveZIndex),\n      R.sortBy(R.path(['style', 'zIndex'])),\n    ),\n  })(node);\n\nexport default resolveZIndex;\n","import * as R from 'ramda';\n\n/**\n * Checks if page should render vertical ruler\n *\n * @param {Object} page\n * @returns {boolean} has vertical ruler\n */\nconst hasVerticalRuler = R.either(\n  R.hasPath(['props', 'ruler']),\n  R.hasPath(['props', 'verticalRuler']),\n);\n\nexport default hasVerticalRuler;\n","import * as R from 'ramda';\n\n/**\n * Checks if page should render horizontal ruler\n *\n * @param {Object} page\n * @returns {boolean} has horizontal ruler\n */\nconst hasHorizontalRuler = R.either(\n  R.hasPath(['props', 'ruler']),\n  R.hasPath(['props', 'horizontalRuler']),\n);\n\nexport default hasHorizontalRuler;\n","import * as R from 'ramda';\n\nimport { RULER_WIDTH } from '../constants';\nimport hasVerticalRuler from '../node/hasVerticalRuler';\nimport hasHorizontalRuler from '../node/hasHorizontalRuler';\n\n/**\n * Adjust page size given ruler props\n *\n * @param {Object} page\n * @returns {boolean} page with size altered by ruler props\n */\nconst adjustPageSize = R.compose(\n  R.when(\n    hasVerticalRuler,\n    R.evolve({\n      box: { height: R.add(RULER_WIDTH) },\n      children: R.map(\n        R.evolve({\n          box: { top: R.add(RULER_WIDTH) },\n        }),\n      ),\n    }),\n  ),\n  R.when(\n    hasHorizontalRuler,\n    R.evolve({\n      box: { width: R.add(RULER_WIDTH) },\n      children: R.map(\n        R.evolve({\n          box: { left: R.add(RULER_WIDTH) },\n        }),\n      ),\n    }),\n  ),\n);\n\n/**\n * Adjust pages size given ruler props\n *\n * @param {Object} root\n * @returns {boolean} root with pages size altered by ruler props\n */\nconst resolveRulers = R.evolve({\n  children: R.map(\n    R.evolve({\n      children: R.map(adjustPageSize),\n    }),\n  ),\n});\n\nexport default resolveRulers;\n","const isPercent = value => /((-)?\\d+\\.?\\d*)%/g.exec(value);\n\n/**\n * Get percentage value of input\n *\n * @param {String} value\n * @returns {Object} percent value (if matches)\n */\nconst matchPercent = value => {\n  const match = isPercent(value);\n\n  if (match) {\n    const value = parseFloat(match[1], 10);\n    const percent = value / 100;\n\n    return {\n      value,\n      percent,\n      absValue: Math.abs(value),\n      absPercent: Math.abs(percent),\n    };\n  }\n\n  return null;\n};\n\nexport default matchPercent;\n","import * as R from 'ramda';\n\nimport matchPercent from '../utils/matchPercent';\n\nconst getTransformStyle = s => R.pathOr('50%', ['style', s]);\n\n/**\n * Get node origin\n *\n * @param {Object} node\n * @returns {Object} node origin\n */\nconst getOrigin = node => {\n  if (!node.box) return {};\n\n  const { left, top, width, height } = node.box;\n  const transformOriginX = getTransformStyle('transformOriginX')(node);\n  const transformOriginY = getTransformStyle('transformOriginY')(node);\n\n  const percentX = matchPercent(transformOriginX);\n  const percentY = matchPercent(transformOriginY);\n\n  const offsetX = percentX ? width * percentX.percent : transformOriginX;\n  const offsetY = percentY ? height * percentY.percent : transformOriginY;\n\n  return { left: left + offsetX, top: top + offsetY };\n};\n\nexport default getOrigin;\n","import * as R from 'ramda';\n\nimport getOrigin from '../node/getOrigin';\n\n/**\n * Resolve node origin\n *\n * @param {Object} node\n * @returns {Object} node with origin attribute\n */\nconst resolveNodeOrigin = node =>\n  R.compose(\n    R.evolve({ children: R.map(resolveNodeOrigin) }),\n    R.converge(R.assoc('origin'), [getOrigin, R.identity]),\n  )(node);\n\n/**\n * Resolve document origins\n *\n * @param {Object} document root\n * @returns {Object} documrnt root\n */\nconst resolveOrigin = R.evolve({\n  children: R.map(\n    R.evolve({\n      children: R.map(resolveNodeOrigin),\n    }),\n  ),\n});\n\nexport default resolveOrigin;\n","import * as R from 'ramda';\n\nimport { PORTRAIT, LANDSCAPE } from '../constants';\n\nconst VALID_ORIENTATIONS = [PORTRAIT, LANDSCAPE];\n\n/**\n * Get page orientation. Defaults to landscape\n *\n * @param { Object } page object\n * @returns { String } page orientation\n */\nconst getOrientation = R.compose(\n  R.ifElse(\n    R.includes(R.__, VALID_ORIENTATIONS),\n    R.identity,\n    R.always(PORTRAIT),\n  ),\n  R.pathOr(PORTRAIT, ['props', 'orientation']),\n);\n\nexport default getOrientation;\n","import * as R from 'ramda';\n\nimport getOrientation from './getOrientation';\n\nimport { LANDSCAPE } from '../constants';\n\nconst isLandscape = R.compose(\n  R.equals(LANDSCAPE),\n  getOrientation,\n);\n\nexport default isLandscape;\n","import * as R from 'ramda';\n\nimport isLandscape from './isLandscape';\nimport { PAGE_SIZES } from '../constants';\n\n/**\n * Transforms array into size object\n *\n * @param {Array} array\n * @returns {Object} size object with width and height\n */\nconst toSizeObject = R.applySpec({\n  width: R.prop(0),\n  height: R.prop(1),\n});\n\n/**\n * Flip size object\n *\n * @param {Object} size object\n * @returns {Object} flipped size object\n */\nconst flipSizeObject = R.applySpec({\n  width: R.prop('height'),\n  height: R.prop('width'),\n});\n\n/**\n * Returns size object from a given string\n *\n * @param {String} page size string\n * @returns {Object} size object with width and height\n */\nconst getStringSize = R.compose(\n  toSizeObject,\n  R.prop(R.__, PAGE_SIZES),\n  R.toUpper,\n);\n\n/**\n * Returns size object from a single number\n *\n * @param {Number} page size number\n * @returns {Object} size object with width and height\n */\nconst getNumberSize = R.compose(\n  toSizeObject,\n  v => [v],\n);\n\n/**\n * Throws invalid size error\n *\n * @param {String} invalid page size input\n */\nconst throwInvalidError = size => {\n  throw new Error(`Invalid Page size: ${JSON.stringify(size)}`);\n};\n\n/**\n * Return page size in an object { width, height }\n *\n * @param {Object} page instance\n * @returns {Object} size object with width and height\n */\nconst getSize = page => {\n  const size = R.compose(\n    R.cond([\n      [R.is(String), getStringSize],\n      [R.is(Array), toSizeObject],\n      [R.is(Number), getNumberSize],\n      [R.is(Object), R.identity],\n      [R.T, throwInvalidError],\n    ]),\n    R.pathOr('A4', ['props', 'size']),\n  )(page);\n\n  return isLandscape(page) ? flipSizeObject(size) : size;\n};\n\nexport default getSize;\n","import * as R from 'ramda';\n\n/**\n * Add empt box prop if not present in node\n *\n * @param {Object} node\n * @returns {Object} node with box prop\n */\nconst assocIfNil = (key, value, target) =>\n  R.when(\n    R.compose(\n      R.isNil,\n      R.prop(key),\n    ),\n    R.assoc(key, value),\n  )(target);\n\nexport default R.curryN(3, assocIfNil);\n","import * as R from 'ramda';\n\nimport getPageSize from '../page/getSize';\nimport assocIfNil from '../utils/assocIfNil';\n\n/**\n * Resolves page size\n *\n * @param {Object} page\n * @returns {Object} page with resolved size in style attribute\n */\nexport const resolvePageSize = key => page => {\n  const size = getPageSize(page);\n  return R.evolve({ [key]: R.merge(R.__, size) })(page);\n};\n\n/**\n * Resolves page sizes\n *\n * @param {Object} document root\n * @returns {Object} document root with resolved page sizes\n */\nconst resolvePageSizes = key => R.evolve({\n  children: R.map(\n    R.evolve({\n      children: R.map(\n        R.compose(\n          resolvePageSize(key),\n          assocIfNil(key, {}),\n        ),\n      ),\n    }),\n  ),\n});\n\nexport default resolvePageSizes;\n","import * as R from 'ramda';\n\nconst isNotNil = R.complement(R.isNil);\n\n/**\n * Takes a list of predicates and returns the first predicate result that returns true for a given list of arguments\n *\n * @param  {...any} predicates\n * @param  {any} value\n */\nconst firstPass = (...fns) => value => {\n  let res;\n\n  for (const fn of fns) {\n    res = fn(value);\n    if (isNotNil(res)) return res;\n  }\n\n  return res;\n};\n\nexport default firstPass;\n","import * as R from 'ramda';\nimport Yoga from 'yoga-layout';\n\nimport firstPass from '../utils/firstPass';\n\nconst getComputedMargin = edge => node => {\n  const yogaNode = node._yogaNode;\n  return yogaNode ? yogaNode.getComputedMargin(edge) : null;\n};\n\n/**\n * Get Yoga computed magins. Zero otherwise\n *\n * @param {Object} node\n * @return {Object} margins\n */\nconst getMargin = R.applySpec({\n  marginTop: firstPass(\n    getComputedMargin(Yoga.EDGE_TOP),\n    R.path(['box', 'marginTop']),\n    R.path(['style', 'marginTop']),\n    R.path(['style', 'marginVertical']),\n    R.path(['style', 'margin']),\n    R.always(0),\n  ),\n  marginRight: firstPass(\n    getComputedMargin(Yoga.EDGE_RIGHT),\n    R.path(['box', 'marginRight']),\n    R.path(['style', 'marginRight']),\n    R.path(['style', 'marginHorizontal']),\n    R.path(['style', 'margin']),\n    R.always(0),\n  ),\n  marginBottom: firstPass(\n    getComputedMargin(Yoga.EDGE_BOTTOM),\n    R.path(['box', 'marginBottom']),\n    R.path(['style', 'marginBottom']),\n    R.path(['style', 'marginVertical']),\n    R.path(['style', 'margin']),\n    R.always(0),\n  ),\n  marginLeft: firstPass(\n    getComputedMargin(Yoga.EDGE_LEFT),\n    R.path(['box', 'marginLeft']),\n    R.path(['style', 'marginLeft']),\n    R.path(['style', 'marginHorizontal']),\n    R.path(['style', 'margin']),\n    R.always(0),\n  ),\n});\n\nexport default getMargin;\n","import * as R from 'ramda';\nimport Yoga from 'yoga-layout';\n\nimport firstPass from '../utils/firstPass';\n\nconst getComputedPadding = edge => node => {\n  const yogaNode = node._yogaNode;\n  return yogaNode ? yogaNode.getComputedPadding(edge) : null;\n};\n\n/**\n * Get Yoga computed magins. Zero otherwise\n *\n * @param {Object} node\n * @return {Object} paddings\n */\nconst getPadding = R.applySpec({\n  paddingTop: firstPass(\n    getComputedPadding(Yoga.EDGE_TOP),\n    R.path(['box', 'paddingTop']),\n    R.path(['style', 'paddingTop']),\n    R.path(['style', 'paddingVertical']),\n    R.path(['style', 'padding']),\n    R.always(0),\n  ),\n  paddingRight: firstPass(\n    getComputedPadding(Yoga.EDGE_RIGHT),\n    R.path(['box', 'paddingRight']),\n    R.path(['style', 'paddingRight']),\n    R.path(['style', 'paddingHorizontal']),\n    R.path(['style', 'padding']),\n    R.always(0),\n  ),\n  paddingBottom: firstPass(\n    getComputedPadding(Yoga.EDGE_BOTTOM),\n    R.path(['box', 'paddingBottom']),\n    R.path(['style', 'paddingBottom']),\n    R.path(['style', 'paddingVertical']),\n    R.path(['style', 'padding']),\n    R.always(0),\n  ),\n  paddingLeft: firstPass(\n    getComputedPadding(Yoga.EDGE_LEFT),\n    R.path(['box', 'paddingLeft']),\n    R.path(['style', 'paddingLeft']),\n    R.path(['style', 'paddingHorizontal']),\n    R.path(['style', 'padding']),\n    R.always(0),\n  ),\n});\n\nexport default getPadding;\n","import * as R from 'ramda';\n\nconst getTop = yogaNode => (yogaNode ? yogaNode.getComputedTop() : 0);\nconst getRight = yogaNode => (yogaNode ? yogaNode.getComputedRight() : 0);\nconst getBottom = yogaNode => (yogaNode ? yogaNode.getComputedBottom() : 0);\nconst getLeft = yogaNode => (yogaNode ? yogaNode.getComputedLeft() : 0);\n\n/**\n * Get Yoga computed position. Zero otherwise\n *\n * @param {Object} node\n * @return {Object} position\n */\nconst getPosition = node => {\n  const yogaNode = node._yogaNode;\n\n  return R.applySpec({\n    top: getTop,\n    right: getRight,\n    bottom: getBottom,\n    left: getLeft,\n  })(yogaNode);\n};\n\nexport default getPosition;\n","const DEFAULT_DIMENSION = {\n  width: 0,\n  height: 0,\n};\n\n/**\n * Get Yoga computed dimensions. Zero otherwise\n *\n * @param {Object} node\n * @return {Object} dimensions\n */\nconst getDimension = node => {\n  const yogaNode = node._yogaNode;\n\n  if (!yogaNode) return DEFAULT_DIMENSION;\n\n  return {\n    width: yogaNode.getComputedWidth(),\n    height: yogaNode.getComputedHeight(),\n  };\n};\n\nexport default getDimension;\n","import * as R from 'ramda';\nimport Yoga from 'yoga-layout';\n\nconst getComputedBorder = edge => yogaNode =>\n  yogaNode ? yogaNode.getComputedBorder(edge) : 0;\n\n/**\n * Get Yoga computed border width. Zero otherwise\n *\n * @param {Object} node\n * @return {Object} border widths\n */\nconst getBorderWidth = node => {\n  const yogaNode = node._yogaNode;\n\n  return R.applySpec({\n    borderTopWidth: getComputedBorder(Yoga.EDGE_TOP),\n    borderRightWidth: getComputedBorder(Yoga.EDGE_RIGHT),\n    borderBottomWidth: getComputedBorder(Yoga.EDGE_BOTTOM),\n    borderLeftWidth: getComputedBorder(Yoga.EDGE_LEFT),\n  })(yogaNode);\n};\n\nexport default getBorderWidth;\n","import * as R from 'ramda';\n\n/**\n * Capitalize first letter of string\n *\n * @param {String} string\n * @returns {String} capitalized string\n */\nconst upperFirst = R.ifElse(\n  R.isNil,\n  R.identity,\n  R.compose(\n    R.join(''),\n    R.juxt([\n      R.compose(\n        R.toUpper,\n        R.head,\n      ),\n      R.tail,\n    ]),\n  ),\n);\n\nexport default upperFirst;\n","import * as R from 'ramda';\n\nimport upperFirst from '../utils/upperFirst';\nimport matchPercent from '../utils/matchPercent';\n\n/**\n * Set generic yoga attribute to node's Yoga instance, handing `auto`, edges and percentage cases\n *\n * @param {String} property\n * @param {Number} edge\n * @param {any} value\n * @param {Object} node instance\n * @return {Object} node instance\n */\nconst setYogaValue = (attr, edge) => value =>\n  R.tap(node => {\n    const yogaNode = node._yogaNode;\n\n    if (!R.isNil(value) && yogaNode) {\n      const hasEdge = R.complement(R.isNil)(edge);\n      const fixedMethod = `set${upperFirst(attr)}`;\n      const autoMethod = `${fixedMethod}Auto`;\n      const percentMethod = `${fixedMethod}Percent`;\n      const percent = matchPercent(value);\n\n      if (percent && !yogaNode[percentMethod]) {\n        throw new Error(`You can't pass percentage values to ${attr} property`);\n      }\n\n      if (percent) {\n        hasEdge\n          ? yogaNode[percentMethod](edge, percent.value)\n          : yogaNode[percentMethod](percent.value);\n      } else if (value === 'auto') {\n        hasEdge ? yogaNode[autoMethod](edge) : yogaNode[autoMethod]();\n      } else {\n        hasEdge\n          ? yogaNode[fixedMethod](edge, value)\n          : yogaNode[fixedMethod](value);\n      }\n    }\n  });\n\nexport default setYogaValue;\n","import setYogaValue from './setYogaValue';\n\n/**\n * Set flex attribute to node's Yoga instance\n *\n * @param {Number} flex value\n * @param {Object} node instance\n * @return {Object} node instance\n */\nconst setFlex = setYogaValue('flex');\n\nexport default setFlex;\n","import * as R from 'ramda';\n\nimport setYogaValue from './setYogaValue';\n\n/**\n * Set flex grow attribute to node's Yoga instance\n *\n * @param {Number} flex grow value\n * @param {Object} node instance\n * @return {Object} node instance\n */\nconst setFlexGrow = R.compose(\n  setYogaValue('flexGrow'),\n  R.defaultTo(0),\n);\n\nexport default setFlexGrow;\n","import setYogaValue from './setYogaValue';\n\n/**\n * Set flex basis attribute to node's Yoga instance\n *\n * @param {Number} flex basis value\n * @param {Object} node instance\n * @return {Object} node instance\n */\nconst setFlexBasis = setYogaValue('flexBasis');\n\nexport default setFlexBasis;\n","import * as R from 'ramda';\nimport Yoga from 'yoga-layout';\n\nimport upperFirst from '../utils/upperFirst';\n\n/**\n * Set generic align attribute to node's Yoga instance\n *\n * @param {String} specific align property\n * @param {String} align value\n * @param {Object} node instance\n * @return {Object} node instance\n */\nconst setAlign = attr => value =>\n  R.tap(node => {\n    const yogaNode = node._yogaNode;\n\n    if (yogaNode) {\n      const yogaValue = R.cond([\n        [R.equals('flex-start'), R.always(Yoga.ALIGN_FLEX_START)],\n        [R.equals('center'), R.always(Yoga.ALIGN_CENTER)],\n        [R.equals('flex-end'), R.always(Yoga.ALIGN_FLEX_END)],\n        [R.equals('stretch'), R.always(Yoga.ALIGN_STRETCH)],\n        [R.equals('baseline'), R.always(Yoga.ALIGN_BASELINE)],\n        [R.equals('space-between'), R.always(Yoga.ALIGN_SPACE_BETWEEN)],\n        [R.equals('space-around'), R.always(Yoga.ALIGN_SPACE_AROUND)],\n        [R.T, R.always(Yoga.ALIGN_AUTO)],\n      ])(value);\n\n      yogaNode[`setAlign${upperFirst(attr)}`](yogaValue);\n    }\n  });\n\nexport default setAlign;\n","import setAlign from './setAlign';\n\n/**\n * Set align self attribute to node's Yoga instance\n *\n * @param {String} align value\n * @param {Object} node instance\n * @return {Object} node instance\n */\nconst setAlignSelf = setAlign('self');\n\nexport default setAlignSelf;\n","import * as R from 'ramda';\n\nimport setYogaValue from './setYogaValue';\n\n/**\n * Set flex shrink attribute to node's Yoga instance\n *\n * @param {Number} flex shrink value\n * @param {Object} node instance\n * @return {Object} node instance\n */\nconst setFlexShrink = R.compose(\n  setYogaValue('flexShrink'),\n  R.defaultTo(1),\n);\n\nexport default setFlexShrink;\n","import setAlign from './setAlign';\n\n/**\n * Set align content attribute to node's Yoga instance\n *\n * @param {String} align value\n * @param {Object} node instance\n * @return {Object} node instance\n */\nconst setAlignContent = setAlign('content');\n\nexport default setAlignContent;\n","import * as R from 'ramda';\nimport Yoga from 'yoga-layout';\n\nconst isRow = R.equals('row');\nconst isRowReverse = R.equals('row-reverse');\nconst isColumnReverse = R.equals('column-reverse');\n\n/**\n * Set flex direction attribute to node's Yoga instance\n *\n * @param {String} flex direction value\n * @param {Object} node instance\n * @return {Object} node instance\n */\nconst setFlexDirection = value =>\n  R.tap(node => {\n    const yogaNode = node._yogaNode;\n\n    if (yogaNode) {\n      const yogaValue = R.cond([\n        [isRow, R.always(Yoga.FLEX_DIRECTION_ROW)],\n        [isRowReverse, R.always(Yoga.FLEX_DIRECTION_ROW_REVERSE)],\n        [isColumnReverse, R.always(Yoga.FLEX_DIRECTION_COLUMN_REVERSE)],\n        [R.T, R.always(Yoga.FLEX_DIRECTION_COLUMN)],\n      ])(value);\n\n      yogaNode.setFlexDirection(yogaValue);\n    }\n  });\n\nexport default setFlexDirection;\n","import * as R from 'ramda';\nimport Yoga from 'yoga-layout';\n\nimport setYogaValue from './setYogaValue';\n\n/**\n * Set margin top attribute to node's Yoga instance\n *\n * @param {Number} margin top\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setMarginTop = setYogaValue('margin', Yoga.EDGE_TOP);\n\n/**\n * Set margin right attribute to node's Yoga instance\n *\n * @param {Number} margin right\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setMarginRight = setYogaValue('margin', Yoga.EDGE_RIGHT);\n\n/**\n * Set margin bottom attribute to node's Yoga instance\n *\n * @param {Number} margin bottom\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setMarginBottom = setYogaValue('margin', Yoga.EDGE_BOTTOM);\n\n/**\n * Set margin left attribute to node's Yoga instance\n *\n * @param {Number} margin left\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setMarginLeft = setYogaValue('margin', Yoga.EDGE_LEFT);\n\n/**\n * Set all margins at once\n *\n * @param {Number} margin\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setMargin = margin =>\n  R.tap(node => {\n    setMarginTop(margin)(node);\n    setMarginRight(margin)(node);\n    setMarginBottom(margin)(node);\n    setMarginLeft(margin)(node);\n  });\n\nexport default setMargin;\n","import * as R from 'ramda';\nimport Yoga from 'yoga-layout';\n\nimport setYogaValue from './setYogaValue';\n\n/**\n * Set padding top attribute to node's Yoga instance\n *\n * @param {Number} padding top\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setPaddingTop = setYogaValue('padding', Yoga.EDGE_TOP);\n\n/**\n * Set padding right attribute to node's Yoga instance\n *\n * @param {Number} padding right\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setPaddingRight = setYogaValue('padding', Yoga.EDGE_RIGHT);\n\n/**\n * Set padding bottom attribute to node's Yoga instance\n *\n * @param {Number} padding bottom\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setPaddingBottom = setYogaValue('padding', Yoga.EDGE_BOTTOM);\n\n/**\n * Set padding left attribute to node's Yoga instance\n *\n * @param {Number} padding left\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setPaddingLeft = setYogaValue('padding', Yoga.EDGE_LEFT);\n\n/**\n * Set all paddings at once\n *\n * @param {Number} margin\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setPadding = padding =>\n  R.tap(node => {\n    setPaddingTop(padding)(node);\n    setPaddingRight(padding)(node);\n    setPaddingBottom(padding)(node);\n    setPaddingLeft(padding)(node);\n  });\n\nexport default setPadding;\n","import * as R from 'ramda';\nimport Yoga from 'yoga-layout';\n\nimport setYogaValue from './setYogaValue';\n\n/**\n * Set border top attribute to node's Yoga instance\n *\n * @param {Number} border top width\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setBorderTop = setYogaValue('border', Yoga.EDGE_TOP);\n\n/**\n * Set border right attribute to node's Yoga instance\n *\n * @param {Number} border right width\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setBorderRight = setYogaValue('border', Yoga.EDGE_RIGHT);\n\n/**\n * Set border bottom attribute to node's Yoga instance\n *\n * @param {Number} border bottom width\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setBorderBottom = setYogaValue('border', Yoga.EDGE_BOTTOM);\n\n/**\n * Set border left attribute to node's Yoga instance\n *\n * @param {Number} border left width\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setBorderLeft = setYogaValue('border', Yoga.EDGE_LEFT);\n\n/**\n * Set all border widths at once\n *\n * @param {Number} border width\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setBorder = width =>\n  R.tap(node => {\n    setBorderTop(width)(node);\n    setBorderRight(width)(node);\n    setBorderBottom(width)(node);\n    setBorderLeft(width)(node);\n  });\n\nexport default setBorder;\n","import * as R from 'ramda';\nimport Yoga from 'yoga-layout';\n\nimport setYogaValue from './setYogaValue';\n\n/**\n * Set position top attribute to node's Yoga instance\n *\n * @param {Number} position top\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setPositionTop = setYogaValue('position', Yoga.EDGE_TOP);\n\n/**\n * Set position right attribute to node's Yoga instance\n *\n * @param {Number} position right\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setPositionRight = setYogaValue('position', Yoga.EDGE_RIGHT);\n\n/**\n * Set position bottom attribute to node's Yoga instance\n *\n * @param {Number} position bottom\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setPositionBottom = setYogaValue('position', Yoga.EDGE_BOTTOM);\n\n/**\n * Set position left attribute to node's Yoga instance\n *\n * @param {Number} position left\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setPositionLeft = setYogaValue('position', Yoga.EDGE_LEFT);\n\n/**\n * Set all positions at once\n *\n * @param {Number} position\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setPosition = position =>\n  R.tap(node => {\n    setPositionTop(position)(node);\n    setPositionRight(position)(node);\n    setPositionBottom(position)(node);\n    setPositionLeft(position)(node);\n  });\n\nexport default setPosition;\n","import setYogaValue from './setYogaValue';\n\n/**\n * Set width to node's Yoga instance\n *\n * @param {Number} width\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setWidth = setYogaValue('width');\n\n/**\n * Set min width to node's Yoga instance\n *\n * @param {Number} min width\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setMinWidth = setYogaValue('minWidth');\n\n/**\n * Set max width to node's Yoga instance\n *\n * @param {Number} max width\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setMaxWidth = setYogaValue('maxWidth');\n\n/**\n * Set height to node's Yoga instance\n *\n * @param {Number} height\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setHeight = setYogaValue('height');\n\n/**\n * Set min height to node's Yoga instance\n *\n * @param {Number} min height\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setMinHeight = setYogaValue('minHeight');\n\n/**\n * Set max height to node's Yoga instance\n *\n * @param {Number} max height\n * @param {Object} node instance\n * @return {Object} node instance\n */\nexport const setMaxHeight = setYogaValue('maxHeight');\n","import * as R from 'ramda';\n\nimport { TEXT } from '../constants';\n\n/**\n * Checks if node is text\n *\n * @param {Object} node\n * @returns {Boolean} is node text?\n */\nconst isText = R.propEq('type', TEXT);\n\nexport default isText;\n","import * as R from 'ramda';\n\nimport { NOTE } from '../constants';\n\n/**\n * Checks if node is note\n *\n * @param {Object} node\n * @returns {Boolean} is node note?\n */\nconst isNote = R.propEq('type', NOTE);\n\nexport default isNote;\n","import * as R from 'ramda';\n\nimport { PAGE } from '../constants';\n\n/**\n * Checks if node is page\n *\n * @param {Object} node\n * @returns {Boolean} is node page?\n */\nconst isPage = R.propEq('type', PAGE);\n\nexport default isPage;\n","import * as R from 'ramda';\n\nimport { CANVAS } from '../constants';\n\n/**\n * Checks if node is canvas\n *\n * @param {Object} node\n * @returns {Boolean} is node canvas?\n */\nconst isCanvas = R.propEq('type', CANVAS);\n\nexport default isCanvas;\n","import { PDFFont } from '@react-pdf/pdfkit';\n\nclass StandardFont {\n  constructor(src) {\n    this.name = src;\n    this.src = PDFFont.open(null, src);\n  }\n\n  layout(str) {\n    const [encoded, positions] = this.src.encode(str);\n\n    return {\n      positions,\n      stringIndices: positions.map((_, i) => i),\n      glyphs: encoded.map((g, i) => {\n        const glyph = this.getGlyph(parseInt(g, 16));\n        glyph.advanceWidth = positions[i].advanceWidth;\n        return glyph;\n      }),\n    };\n  }\n\n  glyphForCodePoint(codePoint) {\n    const glyph = this.getGlyph(codePoint);\n    glyph.advanceWidth = 400;\n    return glyph;\n  }\n\n  getGlyph(id) {\n    return {\n      id,\n      _font: this.src,\n      codePoints: [id],\n      isLigature: false,\n      name: this.src.font.characterToGlyph(id),\n    };\n  }\n\n  hasGlyphForCodePoint(codePoint) {\n    return this.src.font.characterToGlyph(codePoint) !== '.notdef';\n  }\n\n  // Based on empirical observation\n  get ascent() {\n    return 900;\n  }\n\n  // Based on empirical observation\n  get descent() {\n    switch (this.name) {\n      case 'Times-Roman':\n      case 'Times-Bold':\n      case 'Times-Italic':\n        return -220;\n      case 'Courier':\n      case 'Courier-Bold':\n      case 'Courier-Oblique':\n        return -230;\n      default:\n        return -200;\n    }\n  }\n\n  get lineGap() {\n    return 0;\n  }\n\n  get unitsPerEm() {\n    return 1000;\n  }\n}\n\nexport default StandardFont;\n","import * as R from 'ramda';\n\nimport StandardFont from './standardFont';\n\nconst fontCache = {};\n\nconst IGNORED_CODE_POINTS = [173];\n\nconst getFontSize = R.pathOr(12, ['attributes', 'fontSize']);\n\nconst getOrCreateFont = name => {\n  if (fontCache[name]) return fontCache[name];\n\n  const font = new StandardFont(name);\n  fontCache[name] = font;\n\n  return font;\n};\n\nconst getFallbackFont = () => getOrCreateFont('Helvetica');\n\nconst shouldFallbackToFont = (codePoint, font) =>\n  !IGNORED_CODE_POINTS.includes(codePoint) &&\n  !font.hasGlyphForCodePoint(codePoint) &&\n  getFallbackFont().hasGlyphForCodePoint(codePoint);\n\nconst fontSubstitution = () => ({ string, runs }) => {\n  let lastFont = null;\n  let lastIndex = 0;\n  let index = 0;\n\n  const res = [];\n\n  for (const run of runs) {\n    const fontSize = getFontSize(run);\n    const defaultFont =\n      typeof run.attributes.font === 'string'\n        ? getOrCreateFont(run.attributes.font)\n        : run.attributes.font;\n\n    if (string.length === 0) {\n      res.push({ start: 0, end: 0, attributes: { font: defaultFont } });\n      break;\n    }\n\n    for (const char of string.slice(run.start, run.end)) {\n      const codePoint = char.codePointAt();\n      const shouldFallback = shouldFallbackToFont(codePoint, defaultFont);\n      const font = shouldFallback ? getFallbackFont() : defaultFont;\n\n      // If the default font does not have a glyph and the fallback font does, we use it\n      if (font !== lastFont) {\n        if (lastFont) {\n          res.push({\n            start: lastIndex,\n            end: index,\n            attributes: {\n              font: lastFont,\n              scale: lastFont ? fontSize / lastFont.unitsPerEm : 0,\n            },\n          });\n        }\n\n        lastFont = font;\n        lastIndex = index;\n      }\n\n      index += char.length;\n    }\n  }\n\n  if (lastIndex < string.length) {\n    const fontSize = getFontSize(R.last(runs));\n\n    res.push({\n      start: lastIndex,\n      end: string.length,\n      attributes: {\n        font: lastFont,\n        scale: lastFont ? fontSize / lastFont.unitsPerEm : 0,\n      },\n    });\n  }\n\n  return { string, runs: res };\n};\n\nexport default fontSubstitution;\n","const IGNORABLE_CODEPOINTS = [\n  8232, // LINE_SEPARATOR\n  8233, // PARAGRAPH_SEPARATOR\n];\n\nconst buildSubsetForFont = font =>\n  IGNORABLE_CODEPOINTS.reduce((acc, codePoint) => {\n    if (font.hasGlyphForCodePoint && font.hasGlyphForCodePoint(codePoint)) {\n      return acc;\n    }\n    return [...acc, String.fromCharCode(codePoint)];\n  }, []);\n\nexport const ignoreChars = fragments =>\n  fragments.map(fragment => {\n    const charSubset = buildSubsetForFont(fragment.attributes.font);\n    const subsetRegex = new RegExp(charSubset.join('|'));\n\n    return {\n      string: fragment.string.replace(subsetRegex, ''),\n      attributes: fragment.attributes,\n    };\n  });\n","import * as R from 'ramda';\n\nimport { TEXT_INSTANCE } from '../constants';\n\n/**\n * Checks if node is text intance\n *\n * @param {Object} node\n * @returns {Boolean} is node text intance?\n */\nconst isTextInstance = R.propEq('type', TEXT_INSTANCE);\n\nexport default isTextInstance;\n","import AttributedString from '@react-pdf/textkit/attributedString';\n\nimport Font from '../font';\nimport isImage from '../node/isImage';\nimport { embedEmojis } from './emoji';\nimport capitalize from '../utils/capitalize';\nimport upperFirst from '../utils/upperFirst';\nimport { ignoreChars } from './ignorableChars';\nimport isTextInstance from '../node/isTextInstance';\n\nconst PREPROCESSORS = [ignoreChars, embedEmojis];\n\n/**\n * Apply transformation to text string\n *\n * @param {String} text\n * @param {String} transformation type\n * @returns {String} transformed text\n */\nconst transformText = (text, transformation) => {\n  switch (transformation) {\n    case 'uppercase':\n      return text.toUpperCase();\n    case 'lowercase':\n      return text.toLowerCase();\n    case 'capitalize':\n      return capitalize(text);\n    case 'upperfirst':\n      return upperFirst(text);\n    default:\n      return text;\n  }\n};\n\n/**\n * Get textkit framgents of given node object\n *\n * @param {Object} instance node\n * @returns {Array} text fragments\n */\nconst getFragments = instance => {\n  if (!instance) return [{ string: '' }];\n\n  let fragments = [];\n  const {\n    color = 'black',\n    backgroundColor,\n    fontFamily = 'Helvetica',\n    fontWeight,\n    fontStyle,\n    fontSize = 18,\n    textAlign = 'left',\n    lineHeight,\n    textDecoration,\n    textDecorationColor,\n    textDecorationStyle,\n    textTransform,\n    letterSpacing,\n    textIndent,\n    opacity,\n  } = instance.style;\n\n  const obj = Font.getFont({ fontFamily, fontWeight, fontStyle });\n  const font = obj ? obj.data : fontFamily;\n\n  const attributes = {\n    font,\n    color,\n    opacity,\n    fontSize,\n    backgroundColor,\n    align: textAlign,\n    indent: textIndent,\n    link: instance.src,\n    characterSpacing: letterSpacing,\n    underlineStyle: textDecorationStyle,\n    underline: textDecoration === 'underline',\n    underlineColor: textDecorationColor || color,\n    strike: textDecoration === 'line-through',\n    strikeStyle: textDecorationStyle,\n    strikeColor: textDecorationColor || color,\n    lineHeight: lineHeight ? lineHeight * fontSize : null,\n  };\n\n  instance.children.forEach(child => {\n    if (isImage(child)) {\n      fragments.push({\n        string: String.fromCharCode(0xfffc),\n        attributes: {\n          ...attributes,\n          attachment: {\n            width: child.style.width || fontSize,\n            height: child.style.height || fontSize,\n            image: child.image.data,\n          },\n        },\n      });\n    } else if (isTextInstance(child)) {\n      fragments.push({\n        string: transformText(child.value, textTransform),\n        attributes,\n      });\n    } else {\n      if (child) {\n        fragments.push(...getFragments(child));\n      }\n    }\n  });\n\n  for (const preprocessor of PREPROCESSORS) {\n    fragments = preprocessor(fragments);\n  }\n\n  return fragments;\n};\n\n/**\n * Get textkit attributed string from text node\n *\n * @param {Object} instance node\n * @returns {Object} attributed string\n */\nconst getAttributedString = instance =>\n  AttributedString.fromFragments(getFragments(instance));\n\nexport default getAttributedString;\n","/**\n * Capitalize first letter of each word\n *\n * @param {String} string\n * @returns {String} capitalized string\n */\nconst capitalize = value => {\n  if (!value) return value;\n  return value.replace(/(^|\\s)\\S/g, l => l.toUpperCase());\n};\n\nexport default capitalize;\n","import * as R from 'ramda';\nimport layoutEngine from '@react-pdf/textkit/layout';\nimport linebreaker from '@react-pdf/textkit/engines/linebreaker';\nimport justification from '@react-pdf/textkit/engines/justification';\nimport textDecoration from '@react-pdf/textkit/engines/textDecoration';\nimport scriptItemizer from '@react-pdf/textkit/engines/scriptItemizer';\nimport wordHyphenation from '@react-pdf/textkit/engines/wordHyphenation';\n\nimport Font from '../font';\nimport fontSubstitution from './fontSubstitution';\nimport getAttributedString from './getAttributedString';\n\nconst engines = {\n  linebreaker,\n  justification,\n  textDecoration,\n  scriptItemizer,\n  wordHyphenation,\n  fontSubstitution,\n};\n\nconst engine = layoutEngine(engines);\n\n/**\n * Get layout container for specific text node\n *\n * @param {Object} node\n * @param {Number} width\n * @param {Number} height\n * @returns {Object} layout container\n */\nconst getContainer = (node, width, height) => {\n  const maxLines = R.path(['style', 'maxLines'], node);\n  const textOverflow = R.path(['style', 'textOverflow'], node);\n\n  return {\n    x: 0,\n    y: 0,\n    width,\n    maxLines,\n    height: height || Infinity,\n    truncateMode: textOverflow,\n  };\n};\n\n/**\n * Get text layout options for specific text node\n *\n * @param {Object} node instance\n * @returns {Object} layout options\n */\nconst getLayoutOptions = node => ({\n  hyphenationPenalty: node.props.hyphenationPenalty,\n  hyphenationCallback: Font.getHyphenationCallback(),\n  shrinkWhitespaceFactor: { before: -0.5, after: -0.5 },\n});\n\n/**\n * Get text lines for given node\n *\n * @param {Object} node\n * @param {Number} container width\n * @param {Number} container height\n * @returns {Array} layout lines\n */\nconst layoutText = R.compose(\n  R.reduce(R.concat, []),\n  R.converge(engine, [getAttributedString, getContainer, getLayoutOptions]),\n);\n\n// TODO: Do it memoizable?\nexport default layoutText;\n","import AttributedString from '@react-pdf/textkit/attributedString';\n\n/**\n * Get lines width (if any)\n *\n * @param {Object} node\n * @returns {Number} lines width\n */\nconst linesWidth = node => {\n  if (!node.lines) return -1;\n  return Math.max(\n    ...node.lines.map(line => AttributedString.advanceWidth(line)),\n  );\n};\n\nexport default linesWidth;\n","/**\n * Get lines height (if any)\n *\n * @param {Object} node\n * @returns {Number} lines height\n */\nconst linesHeight = node => {\n  if (!node.lines) return -1;\n  return node.lines.reduce((acc, line) => acc + line.box.height, 0);\n};\n\nexport default linesHeight;\n","import * as R from 'ramda';\nimport Yoga from 'yoga-layout';\n\nimport layoutText from './layoutText';\nimport linesWidth from './linesWidth';\nimport linesHeight from './linesHeight';\n\n/**\n * Yoga text measure function\n *\n * @param {Object} page\n * @param {Object} node\n * @param {Number} width\n * @param {Number} widthMode\n * @param {Number} height\n * @param {Number} heightMode\n * @returns {Object} text width and height\n */\nconst measureText = (page, node, width, widthMode, height, heightMode) => {\n  if (widthMode === Yoga.MEASURE_MODE_EXACTLY) {\n    if (!node.lines) node.lines = layoutText(node, width, height);\n\n    return { height: linesHeight(node) };\n  }\n\n  if (widthMode === Yoga.MEASURE_MODE_AT_MOST) {\n    if (!node.lines) node.lines = layoutText(node, width, height);\n\n    return {\n      height: linesHeight(node),\n      width: Math.min(width, linesWidth(node)),\n    };\n  }\n\n  return {};\n};\n\nexport default R.curryN(6, measureText);\n","import * as R from 'ramda';\n\n/**\n * Get image ratio\n *\n * @param {Object} image node\n * @returns {Number} image ratio\n */\nconst getRatio = R.ifElse(\n  R.hasPath(['image', 'data']),\n  node => node.image.width / node.image.height,\n  R.always(1),\n);\n\nexport default getRatio;\n","import * as R from 'ramda';\n\n/**\n * Checks if page has auto height\n *\n * @param {Object} page\n * @returns {Boolean} is page height auto\n */\nconst isHeightAuto = R.pathSatisfies(R.isNil, ['box', 'height']);\n\nexport default isHeightAuto;\n","import * as R from 'ramda';\nimport Yoga from 'yoga-layout';\n\nimport getRatio from '../image/getRatio';\nimport getMargin from '../node/getMargin';\nimport getPadding from '../node/getPadding';\nimport isHeightAuto from '../page/isHeightAuto';\n\nconst SAFETY_HEIGHT = 10;\n\n/**\n * Yoga image measure function\n *\n * @param {Object} page\n * @param {Object} node\n * @param {Number} width\n * @param {Number} widthMode\n * @param {Number} height\n * @param {Number} heightMode\n * @returns {Object} image width and height\n */\nconst measureImage = (page, node, width, widthMode, height, heightMode) => {\n  const imageRatio = getRatio(node);\n  const imageMargin = getMargin(node);\n  const pagePadding = getPadding(page);\n  const pageArea = isHeightAuto(page)\n    ? Infinity\n    : page.box.height -\n      pagePadding.paddingTop -\n      pagePadding.paddingBottom -\n      imageMargin.marginTop -\n      imageMargin.marginBottom -\n      SAFETY_HEIGHT;\n\n  // Skip measure if image data not present yet\n  if (!node.image) return { width: 0, height: 0 };\n\n  if (\n    widthMode === Yoga.MEASURE_MODE_EXACTLY &&\n    heightMode === Yoga.MEASURE_MODE_UNDEFINED\n  ) {\n    const scaledHeight = width / imageRatio;\n    return { height: Math.min(pageArea, scaledHeight) };\n  }\n\n  if (\n    heightMode === Yoga.MEASURE_MODE_EXACTLY &&\n    (widthMode === Yoga.MEASURE_MODE_AT_MOST ||\n      widthMode === Yoga.MEASURE_MODE_UNDEFINED)\n  ) {\n    return { width: Math.min(height * imageRatio, width) };\n  }\n\n  if (\n    widthMode === Yoga.MEASURE_MODE_EXACTLY &&\n    heightMode === Yoga.MEASURE_MODE_AT_MOST\n  ) {\n    const scaledHeight = width / imageRatio;\n    return { height: Math.min(height, pageArea, scaledHeight) };\n  }\n\n  if (\n    widthMode === Yoga.MEASURE_MODE_AT_MOST &&\n    heightMode === Yoga.MEASURE_MODE_AT_MOST\n  ) {\n    if (imageRatio > 1) {\n      return {\n        width: width,\n        height: Math.min(width / imageRatio, height),\n      };\n    } else {\n      return {\n        width: Math.min(height * imageRatio, width),\n        height: height,\n      };\n    }\n  }\n\n  return { height, width };\n};\n\nexport default R.curryN(6, measureImage);\n","import * as R from 'ramda';\n\nimport getMargin from '../node/getMargin';\nimport getPadding from '../node/getPadding';\nimport isHeightAuto from '../page/isHeightAuto';\n\nconst SAFETY_HEIGHT = 10;\n\nconst getMax = R.reduce(R.max, -Infinity);\n\n/**\n * Helper object to predict canvas size\n * TODO: Implement remaining functions (as close as possible);\n */\nconst measureCtx = () => {\n  const ctx = {};\n  const points = [];\n\n  const nil = () => ctx;\n  const addPoint = (x, y) => points.push([x, y]);\n  const moveTo = R.compose(\n    nil,\n    addPoint,\n  );\n\n  const rect = (x, y, w, h) => {\n    addPoint(x, y);\n    addPoint(x + w, y);\n    addPoint(x, y + h);\n    addPoint(x + w, y + h);\n    return ctx;\n  };\n\n  const ellipse = (x, y, rx, ry) => {\n    ry = ry || rx;\n\n    addPoint(x - rx, y - ry);\n    addPoint(x + rx, y - ry);\n    addPoint(x + rx, y + ry);\n    addPoint(x - rx, y + ry);\n\n    return ctx;\n  };\n\n  const polygon = (...pts) => {\n    points.push(...pts);\n    return nil();\n  };\n\n  // Change dimensions\n  ctx.rect = rect;\n  ctx.moveTo = moveTo;\n  ctx.lineTo = moveTo;\n  ctx.circle = ellipse;\n  ctx.polygon = polygon;\n  ctx.ellipse = ellipse;\n  ctx.roundedRect = rect;\n\n  // To be implemented\n  ctx.text = nil;\n  ctx.path = nil;\n  ctx.lineWidth = nil;\n  ctx.bezierCurveTo = nil;\n  ctx.quadraticCurveTo = nil;\n\n  ctx.scale = nil;\n  ctx.rotate = nil;\n  ctx.translate = nil;\n\n  // These don't really change dimensions\n  ctx.dash = nil;\n  ctx.clip = nil;\n  ctx.save = nil;\n  ctx.fill = nil;\n  ctx.font = nil;\n  ctx.stroke = nil;\n  ctx.lineCap = nil;\n  ctx.opacity = nil;\n  ctx.restore = nil;\n  ctx.lineJoin = nil;\n  ctx.fontSize = nil;\n  ctx.fillColor = nil;\n  ctx.miterLimit = nil;\n  ctx.strokeColor = nil;\n  ctx.fillOpacity = nil;\n  ctx.strokeOpacity = nil;\n  ctx.linearGradient = nil;\n  ctx.radialGradient = nil;\n\n  ctx.getWidth = () =>\n    R.compose(\n      getMax,\n      R.pluck(0),\n    )(points);\n\n  ctx.getHeight = () =>\n    R.compose(\n      getMax,\n      R.pluck(1),\n    )(points);\n\n  return ctx;\n};\n\n/**\n * Yoga canbas measure function\n *\n * @param {Object} page\n * @param {Object} node\n * @param {Number} width\n * @param {Number} widthMode\n * @param {Number} height\n * @param {Number} heightMode\n * @returns {Object} canvas width and height\n */\nconst measureCanvas = (page, node) => {\n  const imageMargin = getMargin(node);\n  const pagePadding = getPadding(page);\n  const pageArea = isHeightAuto(page)\n    ? Infinity\n    : page.box.height -\n      pagePadding.paddingTop -\n      pagePadding.paddingBottom -\n      imageMargin.marginTop -\n      imageMargin.marginBottom -\n      SAFETY_HEIGHT;\n\n  const ctx = measureCtx();\n\n  node.props.paint(ctx);\n\n  const width = ctx.getWidth();\n  const height = Math.min(pageArea, ctx.getHeight());\n\n  return { height, width };\n};\n\nexport default R.curryN(6, measureCanvas);\n","import * as R from 'ramda';\nimport Yoga from 'yoga-layout';\n\nimport getMargin from '../node/getMargin';\nimport getPadding from '../node/getPadding';\nimport getPosition from '../node/getPosition';\nimport getDimension from '../node/getDimension';\nimport getBorderWidth from '../node/getBorderWidth';\nimport setFlex from '../node/setFlex';\nimport setDisplay from '../node/setDisplay';\nimport setOverflow from '../node/setOverflow';\nimport setFlexWrap from '../node/setFlexWrap';\nimport setFlexGrow from '../node/setFlexGrow';\nimport setFlexBasis from '../node/setFlexBasis';\nimport setAlignSelf from '../node/setAlignSelf';\nimport setFlexShrink from '../node/setFlexShrink';\nimport setAspectRatio from '../node/setAspectRatio';\nimport setAlignContent from '../node/setAlignContent';\nimport setPositionType from '../node/setPositionType';\nimport setFlexDirection from '../node/setFlexDirection';\nimport setJustifyContent from '../node/setJustifyContent';\nimport {\n  setMarginTop,\n  setMarginRight,\n  setMarginBottom,\n  setMarginLeft,\n} from '../node/setMargin';\nimport {\n  setPaddingTop,\n  setPaddingRight,\n  setPaddingBottom,\n  setPaddingLeft,\n} from '../node/setPadding';\nimport {\n  setBorderTop,\n  setBorderRight,\n  setBorderBottom,\n  setBorderLeft,\n} from '../node/setBorderWidth';\nimport {\n  setPositionTop,\n  setPositionRight,\n  setPositionBottom,\n  setPositionLeft,\n} from '../node/setPosition';\nimport {\n  setWidth,\n  setHeight,\n  setMinWidth,\n  setMaxWidth,\n  setMinHeight,\n  setMaxHeight,\n} from '../node/setDimension';\nimport isText from '../node/isText';\nimport isNote from '../node/isNote';\nimport isPage from '../node/isPage';\nimport isImage from '../node/isImage';\nimport isCanvas from '../node/isCanvas';\nimport measureText from '../text/measureText';\nimport measureImage from '../image/measureImage';\nimport measureCanvas from '../canvas/measureCanvas';\nimport isTextInstance from '../node/isTextInstance';\n\nconst YOGA_NODE = '_yogaNode';\nconst YOGA_CONFIG = Yoga.Config.create();\n\nYOGA_CONFIG.setPointScaleFactor(0);\n\nconst setNodeHeight = node =>\n  R.ifElse(\n    isPage,\n    setHeight(node.box.height),\n    setHeight(node.box.height || node.style.height),\n  );\n\n/**\n * Set styles valeus into yoga node before layout calculation\n *\n * @param {Object} node\n * @returns {Object} node\n */\nconst setYogaValues = R.tap(node => {\n  R.compose(\n    setNodeHeight(node),\n    setWidth(node.style.width),\n    setMinWidth(node.style.minWidth),\n    setMaxWidth(node.style.maxWidth),\n    setMinHeight(node.style.minHeight),\n    setMaxHeight(node.style.maxHeight),\n    setMarginTop(node.style.marginTop),\n    setMarginRight(node.style.marginRight),\n    setMarginBottom(node.style.marginBottom),\n    setMarginLeft(node.style.marginLeft),\n    setPaddingTop(node.style.paddingTop),\n    setPaddingRight(node.style.paddingRight),\n    setPaddingBottom(node.style.paddingBottom),\n    setPaddingLeft(node.style.paddingLeft),\n    setPositionType(node.style.position),\n    setPositionTop(node.style.top),\n    setPositionRight(node.style.right),\n    setPositionBottom(node.style.bottom),\n    setPositionLeft(node.style.left),\n    setBorderTop(node.style.borderTopWidth),\n    setBorderRight(node.style.borderRightWidth),\n    setBorderBottom(node.style.borderBottomWidth),\n    setBorderLeft(node.style.borderLeftWidth),\n    setDisplay(node.style.display),\n    setFlexDirection(node.style.flexDirection),\n    setAlignSelf(node.style.alignSelf),\n    setAlignContent(node.style.alignContent),\n    setJustifyContent(node.style.justifyContent),\n    setFlexWrap(node.style.flexWrap),\n    setOverflow(node.style.overflow),\n    setAspectRatio(node.style.aspectRatio),\n    setFlex(node.style.flex),\n    setFlexBasis(node.style.flexBasis),\n    setFlexGrow(node.style.flexGrow),\n    setFlexShrink(node.style.flexShrink),\n  )(node);\n});\n\n/**\n * Inserts child into parent' yoga node\n *\n * @param {Object} parent\n * @param {Object} node\n * @param {Object} node\n */\nconst insertYogaNodes = parent =>\n  R.tap(child => parent.insertChild(child[YOGA_NODE], parent.getChildCount()));\n\nconst setMeasureFunc = page => node => {\n  const yogaNode = node[YOGA_NODE];\n\n  if (isText(node)) {\n    yogaNode.setMeasureFunc(measureText(page, node));\n  }\n\n  if (isImage(node)) {\n    yogaNode.setMeasureFunc(measureImage(page, node));\n  }\n\n  if (isCanvas(node)) {\n    yogaNode.setMeasureFunc(measureCanvas(page, node));\n  }\n\n  return node;\n};\n\nconst isNotText = R.complement(isText);\nconst isNotNote = R.complement(isNote);\nconst isLayoutElement = R.both(isNotText, isNotNote);\nconst isNotTextInstance = R.complement(isTextInstance);\n\n/**\n * Creates and add yoga node to document tree\n * Handles measure function for text and image nodes\n *\n * @param {Object} node\n * @returns {Object} node with appended yoga node\n */\nconst createYogaNodes = page => node => {\n  const yogaNode = Yoga.Node.createWithConfig(YOGA_CONFIG);\n\n  return R.compose(\n    setMeasureFunc(page),\n    R.when(\n      isLayoutElement,\n      R.evolve({\n        children: R.map(\n          R.compose(\n            insertYogaNodes(yogaNode),\n            createYogaNodes(page),\n          ),\n        ),\n      }),\n    ),\n    setYogaValues,\n    R.assoc(YOGA_NODE, yogaNode),\n  )(node);\n};\n\n/**\n * Performs yoga calculation\n *\n * @param {Object} node\n * @returns {Object} node\n */\nconst calculateLayout = R.tap(page => page[YOGA_NODE].calculateLayout());\n\n/**\n * Saves Yoga layout result into 'box' attribute of node\n *\n * @param {Object} node\n * @returns {Object} node with box data\n */\nconst persistDimensions = node => {\n  return R.evolve({\n    children: R.map(R.when(isNotTextInstance, persistDimensions)),\n    box: R.always(\n      R.mergeAll([\n        getPadding(node),\n        getMargin(node),\n        getBorderWidth(node),\n        getPosition(node),\n        getDimension(node),\n      ]),\n    ),\n  })(node);\n};\n\n/**\n * Removes and destroys yoga node frm document tree\n *\n * @param {Object} node\n * @returns {Object} node without yoga node\n */\nconst destroyYogaNodes = node => {\n  return R.compose(\n    R.dissoc(YOGA_NODE),\n    R.tap(n => Yoga.Node.destroy(n[YOGA_NODE])),\n    R.evolve({ children: R.map(R.when(isLayoutElement, destroyYogaNodes)) }),\n  )(node);\n};\n\n/**\n * Calculates page object layout using Yoga.\n * Takes node values from 'box' and 'style' attributes, and persist them back into 'box'\n * Destroy yoga values at the end.\n *\n * @param {Object} page object\n * @returns {Object} page object with correct 'box' layout attributes\n */\nexport const resolvePageDimensions = page =>\n  R.ifElse(\n    R.isNil,\n    R.always(null),\n    R.compose(\n      destroyYogaNodes,\n      persistDimensions,\n      calculateLayout,\n      createYogaNodes(page),\n    ),\n  )(page);\n\n/**\n * Calculates root object layout using Yoga.\n *\n * @param {Object} root object\n * @returns {Object} root object with correct 'box' layout attributes\n */\nconst resolveDimensions = R.evolve({\n  children: R.map(\n    R.evolve({\n      children: R.map(resolvePageDimensions),\n    }),\n  ),\n});\n\nexport default resolveDimensions;\n","import * as R from 'ramda';\nimport Yoga from 'yoga-layout';\n\n/**\n * Set position type attribute to node's Yoga instance\n *\n * @param {String} position type\n * @param {Object} node instance\n * @return {Object} node instance\n */\nconst setPositionType = value =>\n  R.tap(node => {\n    const yogaNode = node._yogaNode;\n\n    if (!R.isNil(value) && yogaNode) {\n      yogaNode.setPositionType(\n        value === 'absolute'\n          ? Yoga.POSITION_TYPE_ABSOLUTE\n          : Yoga.POSITION_TYPE_RELATIVE,\n      );\n    }\n  });\n\nexport default setPositionType;\n","import * as R from 'ramda';\nimport Yoga from 'yoga-layout';\n\n/**\n * Set display attribute to node's Yoga instance\n *\n * @param {String} display\n * @param {Object} node instance\n * @return {Object} node instance\n */\nconst setDisplay = value =>\n  R.tap(node => {\n    const yogaNode = node._yogaNode;\n\n    if (yogaNode) {\n      yogaNode.setDisplay(\n        value === 'none' ? Yoga.DISPLAY_NONE : Yoga.DISPLAY_FLEX,\n      );\n    }\n  });\n\nexport default setDisplay;\n","import * as R from 'ramda';\nimport Yoga from 'yoga-layout';\n\n/**\n * Set justify content attribute to node's Yoga instance\n *\n * @param {String} justify content value\n * @param {Object} node instance\n * @return {Object} node instance\n */\nconst setJustifyContent = value =>\n  R.tap(node => {\n    const yogaNode = node._yogaNode;\n\n    if (!R.isNil(value) && yogaNode) {\n      const yogaValue = R.cond([\n        [R.equals('center'), R.always(Yoga.JUSTIFY_CENTER)],\n        [R.equals('flex-end'), R.always(Yoga.JUSTIFY_FLEX_END)],\n        [R.equals('space-between'), R.always(Yoga.JUSTIFY_SPACE_BETWEEN)],\n        [R.equals('space-around'), R.always(Yoga.JUSTIFY_SPACE_AROUND)],\n        [R.equals('space-evenly'), R.always(Yoga.JUSTIFY_SPACE_EVENLY)],\n        [R.T, R.always(Yoga.JUSTIFY_FLEX_START)],\n      ])(value);\n\n      yogaNode.setJustifyContent(yogaValue);\n    }\n  });\n\nexport default setJustifyContent;\n","import * as R from 'ramda';\nimport Yoga from 'yoga-layout';\n\n/**\n * Set flex wrap attribute to node's Yoga instance\n *\n * @param {String} flex wrap value\n * @param {Object} node instance\n * @return {Object} node instance\n */\nconst setFlexWrap = value =>\n  R.tap(node => {\n    const yogaNode = node._yogaNode;\n\n    if (yogaNode) {\n      const yogaValue = R.cond([\n        [R.equals('wrap'), R.always(Yoga.WRAP_WRAP)],\n        [R.equals('wrap-reverse'), R.always(Yoga.WRAP_WRAP_REVERSE)],\n        [R.T, R.always(Yoga.WRAP_NO_WRAP)],\n      ])(value);\n\n      yogaNode.setFlexWrap(yogaValue);\n    }\n  });\n\nexport default setFlexWrap;\n","import * as R from 'ramda';\nimport Yoga from 'yoga-layout';\n\n/**\n * Set overflow attribute to node's Yoga instance\n *\n * @param {String} overflow value\n * @param {Object} node instance\n * @return {Object} node instance\n */\nconst setOverflow = value =>\n  R.tap(node => {\n    const yogaNode = node._yogaNode;\n\n    if (!R.isNil(value) && yogaNode) {\n      const yogaValue = R.cond([\n        [R.equals('hidden'), R.always(Yoga.OVERFLOW_HIDDEN)],\n        [R.equals('scroll'), R.always(Yoga.OVERFLOW_SCROLL)],\n        [R.T, R.always(Yoga.OVERFLOW_VISIBLE)],\n      ])(value);\n\n      yogaNode.setOverflow(yogaValue);\n    }\n  });\n\nexport default setOverflow;\n","import * as R from 'ramda';\n\n/**\n * Set aspect ratio attribute to node's Yoga instance\n *\n * @param {Number} ratio\n * @param {Object} node instance\n * @return {Object} node instance\n */\nconst setAspectRatio = value =>\n  R.tap(node => {\n    const yogaNode = node._yogaNode;\n\n    if (!R.isNil(value) && yogaNode) {\n      yogaNode.setAspectRatio(value);\n    }\n  });\n\nexport default setAspectRatio;\n","import * as R from 'ramda';\n\nimport isText from '../node/isText';\nimport layoutText from '../text/layoutText';\n\nconst shouldLayoutText = node => isText(node) && !node.lines;\n\n/**\n * Performs text layout on text node if wasn't calculated before.\n * Text layout is usually performed on Yoga's layout process (via setMeasureFunc),\n * but we need to layout those nodes with fixed width and height.\n *\n * @param {Object} node\n * @returns {Object} layouted node\n */\nconst resolveTextLayout = node =>\n  R.compose(\n    R.evolve({ children: R.map(resolveTextLayout) }),\n    R.when(\n      shouldLayoutText,\n      R.compose(\n        R.converge(R.assoc('lines'), [\n          R.converge(layoutText, [\n            R.identity,\n            R.path(['box', 'width']),\n            R.path(['box', 'height']),\n          ]),\n          R.identity,\n        ]),\n      ),\n    ),\n  )(node);\n\nexport default resolveTextLayout;\n","import * as R from 'ramda';\n\nimport { INHERITED_PROPERTIES } from '../constants';\n\n/**\n * Get styles sub group of inherited properties\n *\n * @param {Object} style object\n * @returns {Object} style object only with inherited properties\n */\nconst getInheritStyles = R.compose(\n  R.pick(INHERITED_PROPERTIES),\n  R.propOr({}, 'style'),\n);\n\n/**\n * Merges styles with node\n *\n * @param {Object} style object\n * @param {Object} node\n * @returns {Object} node with styles merged\n */\nconst mergeStyles = styles =>\n  R.evolve({\n    style: R.merge(styles),\n  });\n\n/**\n * Inherit style values from the root to the leafs\n *\n * @param {Object} document root\n * @returns {Object} document root with inheritance\n *\n */\nconst resolveInheritance = node => {\n  const inheritStyles = getInheritStyles(node);\n\n  return R.evolve({\n    children: R.map(\n      R.compose(\n        resolveInheritance,\n        mergeStyles(inheritStyles),\n      ),\n    ),\n  })(node);\n};\n\nexport default resolveInheritance;\n","import * as R from 'ramda';\n\nimport setMargin from './setMargin';\n\n/**\n * Removes margins on node\n *\n * @param {Object} node\n * @returns {Object} node without margins\n */\nconst removeMargins = R.compose(\n  setMargin(0),\n  R.dissocPath(['style', 'margin']),\n  R.dissocPath(['style', 'marginTop']),\n  R.dissocPath(['style', 'marginRight']),\n  R.dissocPath(['style', 'marginBottom']),\n  R.dissocPath(['style', 'marginLeft']),\n  R.dissocPath(['style', 'marginHorizontal']),\n  R.dissocPath(['style', 'marginVertical']),\n);\n\nexport default removeMargins;\n","import * as R from 'ramda';\n\nimport removeMargins from '../node/removeMargins';\n\n/**\n * Remove page margins\n *\n * @param {Object} document root\n * @returns {Object} documrnt root without margins on pages\n */\nconst resolvePageMargins = R.evolve({\n  children: R.map(\n    R.evolve({\n      children: R.map(removeMargins),\n    }),\n  ),\n});\n\nexport default resolvePageMargins;\n","import * as R from 'ramda';\n\nimport isNote from './isNote';\nimport isImage from './isImage';\nimport isCanvas from './isCanvas';\nimport getNodesHeight from './getNodesHeight';\n\nconst getWrap = R.ifElse(\n  R.anyPass([isNote, isImage, isCanvas]),\n  R.always(false),\n  R.pathOr(true, ['props', 'wrap']),\n);\n\nconst getBreak = R.pathOr(false, ['props', 'break']);\n\nconst getMinPresenceAhead = R.path(['props', 'minPresenceAhead']);\n\nconst defaultPresenceAhead = element => height =>\n  Math.min(element.box.height, height);\n\nconst getPresenceAhead = (elements, height) => {\n  let result = 0;\n\n  for (let i = 0; i < elements.length; i++) {\n    const element = elements[i];\n\n    if (!element.box) continue;\n\n    const isElementInside = height > element.box.top;\n    const presenceAhead =\n      element.props.presenceAhead || defaultPresenceAhead(element);\n\n    if (element && isElementInside) {\n      result += presenceAhead(height - element.box.top);\n    }\n  }\n\n  return result;\n};\n\nconst shouldBreak = (child, futureElements, height) => {\n  const minPresenceAhead = getMinPresenceAhead(child);\n  const presenceAhead = getPresenceAhead(futureElements, height);\n  const futureHeight = getNodesHeight(futureElements);\n  const shouldSplit = height < child.box.top + child.box.height;\n  const shouldWrap = getWrap(child);\n\n  return (\n    getBreak(child) ||\n    (!shouldWrap && shouldSplit) ||\n    (minPresenceAhead < futureHeight && presenceAhead < minPresenceAhead)\n  );\n};\n\nexport default shouldBreak;\n","import * as R from 'ramda';\n\n/**\n * Get many nodes height\n *\n * @param {Array} nodes\n * @return {number} nodes height\n */\nconst getNodesHeight = nodes => {\n  let max = 0;\n  let min = Infinity;\n\n  if (R.isEmpty(nodes)) return 0;\n\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    min = Math.min(min, node.box.top);\n    max = Math.max(max, node.box.top + node.box.height);\n  }\n\n  return max - min;\n};\n\nexport default getNodesHeight;\n","import * as R from 'ramda';\n\nconst getPaddingBottom = R.pathOr(0, ['style', 'paddingBottom']);\n\nconst getContentArea = page => {\n  const paddingBottom = getPaddingBottom(page);\n  const height = R.path(['style', 'height'], page);\n  return height - paddingBottom;\n};\n\nexport default getContentArea;\n","import * as R from 'ramda';\n\nimport shouldNodeBreak from '../node/shouldBreak';\nimport getContentArea from '../page/getContentArea';\nimport { resolvePageDimensions } from './resolveDimensions';\n\nconst getHeight = R.path(['box', 'height']);\n\nconst getTop = R.pathOr(0, ['box', 'top']);\n\nconst getChildren = R.propOr([], 'children');\n\nconst setChildren = R.assoc('children');\n\nconst setHeight = R.assocPath(['box', 'height']);\n\nconst setBreak = R.assocPath(['props', 'break']);\n\nconst breakChildren = (height, node) => {\n  const children = getChildren(node);\n\n  let offset = null;\n  let nextElements = [];\n  const currentElements = [];\n\n  for (let i = 0; i < children.length; i++) {\n    const child = children[i];\n    const childTop = getTop(child);\n    const childHeight = getHeight(child);\n    const futureElements = children.slice(i + 1);\n    const shouldBreak = shouldNodeBreak(child, futureElements, height);\n\n    if (shouldBreak) {\n      offset = childTop;\n      nextElements = R.compose(\n        R.prepend(setBreak(false, child)),\n        R.slice(i + 1, Infinity),\n      )(children);\n      break;\n    }\n\n    const [currentChildren, nextChildren, childsOffset] = breakChildren(\n      height,\n      child,\n    );\n\n    if (R.isNil(childsOffset)) {\n      currentElements.push(setChildren(currentChildren, child));\n      continue;\n    }\n\n    offset = childTop + childsOffset;\n\n    currentElements.push(\n      R.compose(\n        setChildren(currentChildren),\n        setHeight(Math.ceil(offset / height) * height - childTop),\n      )(child),\n    );\n\n    nextElements = R.compose(\n      R.prepend(\n        R.compose(\n          setChildren(nextChildren),\n          setHeight(child.box.height - childHeight),\n        )(child),\n      ),\n      R.slice(i + 1, Infinity),\n    )(children);\n\n    break;\n  }\n\n  return [currentElements, nextElements, offset];\n};\n\nconst breakNode = height => node => {\n  const [currentChildren, nextChildren, offset] = breakChildren(height, node);\n\n  if (R.isNil(offset)) return [node];\n\n  const currentNode = R.compose(\n    setChildren(currentChildren),\n    setHeight(Math.ceil(offset / height) * height),\n  )(node);\n\n  const nextNode = R.compose(\n    setChildren(nextChildren),\n    setHeight(node.box.height - offset),\n  )(node);\n\n  return [currentNode, nextNode];\n};\n\nconst breakPage = page => {\n  const pages = [];\n  const height = getContentArea(page);\n\n  let subpages = breakNode(height)(page);\n  let current = subpages[0];\n  let nextPage = subpages[1];\n\n  pages.push(current);\n\n  while (nextPage) {\n    subpages = R.compose(\n      breakNode(height),\n      resolvePageDimensions,\n      setHeight(null),\n    )(nextPage);\n\n    current = subpages[0];\n    nextPage = subpages[1];\n\n    pages.push(current);\n  }\n\n  return pages;\n};\n\nconst resolvePageBreaks = R.evolve({\n  children: R.map(\n    R.evolve({\n      children: R.compose(\n        R.flatten,\n        R.map(breakPage),\n      ),\n    }),\n  ),\n});\n\nexport default resolvePageBreaks;\n","import * as R from 'ramda';\n\nconst getTop = R.pathOr(0, ['box', 'top']);\n\nconst getHeight = R.path(['box', 'height']);\n\nconst getChildren = R.propOr([], 'children');\n\nconst isElementOutside = R.useWith(R.lte, [R.identity, getTop]);\n\nconst splitNodes = (height, nodes) => {\n  const currentChildren = [];\n  const nextChildren = [];\n\n  for (let i = 0; i < nodes.length; i++) {\n    const child = nodes[i];\n    const [currentChild, nextChild] = splitNode(height, child);\n\n    if (currentChild) currentChildren.push(currentChild);\n    if (nextChild) nextChildren.push(nextChild);\n  }\n\n  return [currentChildren, nextChildren];\n};\n\nconst splitChildren = (height, node) => {\n  const children = getChildren(node);\n  const availableHeight = height - getTop(node);\n  return splitNodes(availableHeight, children);\n};\n\nconst splitNode = R.curryN(2, (height, node) => {\n  if (!node) return [null, null];\n\n  const nodeTop = getTop(node);\n  const nodeHeight = getHeight(node);\n  const isOutside = isElementOutside(height, node);\n  const shouldSplit = height < nodeTop + nodeHeight;\n\n  if (isOutside) {\n    const next = R.evolve({ box: { top: R.subtract(R.__, height) } })(node);\n    return [null, next, false];\n  }\n\n  if (shouldSplit) {\n    const [currentChilds, nextChildren] = splitChildren(height, node);\n\n    const current = R.evolve({\n      children: R.always(currentChilds),\n      style: {\n        borderBottomLeftRadius: R.always(0),\n        borderBottomRightRadius: R.always(0),\n      },\n      box: {\n        height: R.when(R.always(shouldSplit), R.always(height - nodeTop)),\n      },\n    })(node);\n\n    const next = R.evolve({\n      children: R.always(nextChildren),\n      style: {\n        borderTopLeftRadius: R.always(0),\n        borderTopRightRadius: R.always(0),\n      },\n      box: {\n        top: R.always(0),\n        height: R.subtract(R.__, height - nodeTop),\n      },\n    })(node);\n\n    return [current, next];\n  }\n\n  return [node, null, false];\n});\n\nexport default splitNode;\n","import * as R from 'ramda';\n\nimport splitNode from '../node/split';\n\nconst getPaddingBottom = R.pathOr(0, ['style', 'paddingBottom']);\n\nconst getWrappingArea = page => {\n  const paddingBottom = getPaddingBottom(page);\n  const height = R.path(['style', 'height'], page);\n  return height - paddingBottom;\n};\n\nconst splitPage = page => {\n  if (!page) return [];\n\n  const height = getWrappingArea(page);\n  let splittedPage = splitNode(height, page);\n  const pages = [splittedPage[0]];\n  let nextPage = splittedPage[1];\n\n  while (nextPage !== null) {\n    splittedPage = splitNode(height, nextPage);\n    pages.push(splittedPage[0]);\n    nextPage = splittedPage[1];\n  }\n\n  return pages;\n};\n\nconst resolvePageSplitting = R.evolve({\n  children: R.map(\n    R.evolve({\n      children: R.compose(\n        R.flatten,\n        R.map(splitPage),\n      ),\n    }),\n  ),\n});\n\nexport default resolvePageSplitting;\n","import * as R from 'ramda';\n\nimport { resolvePageSize } from './resolvePageSizes';\nimport resolvePageBreaks from './resolvePageBreaks';\nimport resolvePageSplitting from './resolvePageSplitting';\n\nconst restorePageSize = R.evolve({\n  children: R.map(\n    R.evolve({\n      children: R.map(resolvePageSize('box')),\n    }),\n  ),\n});\n\nconst resolvePageWrapping = R.compose(\n  restorePageSize,\n  resolvePageSplitting,\n  resolvePageBreaks,\n);\n\nexport default resolvePageWrapping;\n","import * as R from 'ramda';\n\nimport isNote from '../node/isNote';\nimport isTextInstance from '../node/isTextInstance';\n\n/**\n * Get node underlying text value\n *\n * @param {Object} node\n * @returns {String} node text content\n */\nconst getNodeText = node =>\n  R.cond([\n    [R.is(String), R.identity],\n    [isTextInstance, R.prop('value')],\n    [\n      R.T,\n      R.compose(\n        getNodesText,\n        R.propOr([], 'children'),\n      ),\n    ],\n  ])(node);\n\n/**\n * Get underlying text value of several nodes\n *\n * @param {Array} nodes\n * @returns {String} nodes text content\n */\nconst getNodesText = R.compose(\n  R.join(''),\n  R.map(getNodeText),\n);\n\n/**\n * Transforms string to text instance\n *\n * @param {String} value\n * @returns {Array} text intance\n */\nconst wrapTextInstance = value => [{ type: 'TEXT_INSTANCE', value }];\n\n/**\n * Cast Note children as a text instance\n *\n * @param {Object} node\n * @returns {Object} node with resolved note children\n */\nconst resolveNoteChildren = node =>\n  R.ifElse(\n    isNote,\n    R.evolve({\n      children: R.compose(\n        wrapTextInstance,\n        getNodesText,\n      ),\n    }),\n    R.evolve({ children: R.map(resolveNoteChildren) }),\n  )(node);\n\nexport default resolveNoteChildren;\n","import * as R from 'ramda';\n\nimport matchPercent from '../utils/matchPercent';\n\n/*\n * Translates page percentage horizontal paddings in fixed ones\n *\n * @param {Object} page container\n * @param {String} padding value\n * @returns {Object} translated padding value\n */\nconst resolvePageHorizontalPadding = container => value => {\n  const match = matchPercent(value);\n  return match ? match.percent * container.width : value;\n};\n\n/**\n * Translates page percentage vertical paddings in fixed ones\n *\n * @param {Object} page container\n * @param {String} padding value\n * @returns {Object} translated padding value\n */\nconst resolvePageVerticalPadding = container => value => {\n  const match = matchPercent(value);\n  return match ? match.percent * container.height : value;\n};\n\n/**\n * Translates page percentage paddings in fixed ones\n *\n * @param {Object} page\n * @returns {Object} page with fixed paddings\n */\nconst resolvePagePaddings = page =>\n  R.evolve({\n    style: R.evolve({\n      paddingLeft: resolvePageHorizontalPadding(page.box),\n      paddingRight: resolvePageHorizontalPadding(page.box),\n      paddingTop: resolvePageVerticalPadding(page.box),\n      paddingBottom: resolvePageVerticalPadding(page.box),\n    }),\n  })(page);\n\n/**\n * Translates all pages percentage paddings in fixed ones\n *\n * @param {Object} document root\n * @returns {Object} document root with translated page paddings\n */\nexport default R.evolve({\n  children: R.map(\n    R.evolve({\n      children: R.map(resolvePagePaddings),\n    }),\n  ),\n});\n","import * as R from 'ramda';\n\nimport matchPercent from '../utils/matchPercent';\n\n/**\n *\n * @param {Object} container width and height\n * @param {String | Number} value border radius value\n * @returns {Number} fixed border radius value\n */\nconst resolveRadius = container => value => {\n  const match = matchPercent(value);\n  return match\n    ? match.percent * Math.min(container.width, container.height)\n    : value;\n};\n\n/**\n * Transforms percent border radius into fixed values\n *\n * @param {Object} node\n * @returns {Object} node\n */\nconst resolvePercentRadius = node =>\n  R.evolve({\n    children: R.map(resolvePercentRadius),\n    style: R.evolve({\n      borderTopLeftRadius: resolveRadius(node.box),\n      borderTopRightRadius: resolveRadius(node.box),\n      borderBottomRightRadius: resolveRadius(node.box),\n      borderBottomLeftRadius: resolveRadius(node.box),\n    }),\n  })(node);\n\nexport default resolvePercentRadius;\n","import * as R from 'ramda';\n\nimport matchPercent from '../utils/matchPercent';\n\n/**\n * Transform percent height into fixed\n *\n * @param {String | number} height\n * @return {number} height\n */\nconst transformHeight = pageArea => height => {\n  const match = matchPercent(height);\n  return match ? match.percent * pageArea : height;\n};\n\n/**\n * Get page area (height minus paddings)\n *\n * @param {Object} page\n * @return {number} page area\n */\nconst getPageArea = page => {\n  const pageHeight = R.path(['style', 'height'], page);\n  const pagePaddingTop = R.pathOr(0, ['style', 'paddingTop'], page);\n  const pagePaddingBottom = R.pathOr(0, ['style', 'paddingBottom'], page);\n  return pageHeight - pagePaddingTop - pagePaddingBottom;\n};\n\n/**\n * Checks if page has height\n *\n * @param {Object} page\n * @return {boolean} page has height\n */\nconst hasHeight = R.hasPath(['style', 'height']);\n\n/**\n * Transform node percent height to fixed\n *\n * @param {Object} page\n * @param {Object} node\n * @return {Object} transformed node\n */\nconst resolveNodePercentHeight = page => node => {\n  if (hasHeight(page)) {\n    const pageArea = getPageArea(page);\n    return R.evolve({ style: { height: transformHeight(pageArea) } })(node);\n  }\n\n  return node;\n};\n\n/**\n * Transform page immediate children with percent height to fixed\n *\n * @param {Object} page\n * @return {Object} transformed page\n */\nconst resolvePagePercentHeight = page =>\n  R.evolve({\n    children: R.map(resolveNodePercentHeight(page)),\n  })(page);\n\n/**\n * Transform all page immediate children with percent height to fixed\n *\n * @param {Object} document root\n * @return {Object} transformed document root\n */\nconst resolvePercentHeight = R.evolve({\n  children: R.map(\n    R.evolve({\n      children: R.map(resolvePagePercentHeight),\n    }),\n  ),\n});\n\nexport default resolvePercentHeight;\n","import * as R from 'ramda';\n\nimport { LINK } from '../constants';\n\n/**\n * Checks if node is link\n *\n * @param {Object} node\n * @returns {Boolean} is node link?\n */\nconst isLink = R.propEq('type', LINK);\n\nexport default isLink;\n","import * as R from 'ramda';\n\nimport { TEXT } from '../constants';\nimport isLink from '../node/isLink';\nimport isTextInstance from '../node/isTextInstance';\n\n/**\n * Checks if node has render prop\n *\n * @param {Object} node\n * @returns {Boolean} has render prop?\n */\nconst hasRenderProp = R.hasPath(['props', 'render']);\n\n/**\n * Checks if all children of node are text instances\n *\n * @param {Object} node\n * @returns {Boolean} are all children text instances?\n */\nconst hasTextInstanceChilds = R.compose(\n  R.all(isTextInstance),\n  R.propOr([], 'children'),\n);\n\n/**\n * If the Link has a strign child or render prop, substitute the instance by a Text,\n * that will ultimately render the inline Link via the textkit PDF renderer.\n *\n * @param {Object} node\n * @returns {Object} node with link substitution\n */\nconst resolveLinkSubstitution = node =>\n  R.evolve({\n    children: R.map(\n      R.ifElse(\n        R.both(isLink, R.either(hasRenderProp, hasTextInstanceChilds)),\n        R.assoc('type', TEXT),\n        resolveLinkSubstitution,\n      ),\n    ),\n  })(node);\n\nexport default resolveLinkSubstitution;\n","import * as R from 'ramda';\n\n/**\n * Translates relative coordinates to absolute coordinates\n *\n * @param {Object} root node\n * @returns {Object} root node with absolute coordinates\n */\nconst resolveAbsoluteCoordinates = node => {\n  const top = R.pathOr(0, ['box', 'top'], node);\n  const left = R.pathOr(0, ['box', 'left'], node);\n\n  return R.evolve({\n    children: R.map(\n      R.compose(\n        resolveAbsoluteCoordinates,\n        R.evolve({\n          box: R.evolve({\n            top: R.add(top),\n            bottom: R.add(top),\n            left: R.add(left),\n            right: R.add(left),\n          }),\n          origin: R.evolve({\n            top: R.add(top),\n            left: R.add(left),\n          }),\n        }),\n      ),\n    ),\n  })(node);\n};\n\nexport default resolveAbsoluteCoordinates;\n","import * as R from 'ramda';\n\nimport resolveAssets from './resolveAssets';\nimport resolveStyles from './resolveStyles';\nimport resolveZIndex from './resolveZIndex';\nimport resolveRulers from './resolveRulers';\nimport resolveOrigins from './resolveOrigins';\nimport resolvePageSizes from './resolvePageSizes';\nimport resolveDimensions from './resolveDimensions';\nimport resolveTextLayout from './resolveTextLayout';\nimport resolveInheritance from './resolveInheritance';\nimport resolvePageMargins from './resolvePageMargins';\nimport resolvePageWrapping from './resolvePageWrapping';\nimport resolveNoteChildren from './resolveNoteChildren';\nimport resolvePagePaddings from './resolvePagePaddings';\nimport resolvePercentRadius from './resolvePercentRadius';\nimport resolvePercentHeight from './resolvePercentHeight';\nimport resolveLinkSubstitution from './resolveLinkSubstitution';\nimport resolveAbsoluteCoordinates from './resolveAbsoluteCoordinates';\nimport asyncCompose from '../utils/asyncCompose';\n\nconst startTimer = name => R.tap(() => console.time(name));\nconst endTimer = name => R.tap(() => console.timeEnd(name));\n\nconst resolvePageSizeStyle = resolvePageSizes('style');\n\nconst layout = asyncCompose(\n  resolveAbsoluteCoordinates,\n  resolveRulers,\n  resolveOrigins,\n  endTimer('resolvePageBreaks'),\n  resolvePageWrapping,\n  startTimer('resolvePageBreaks'),\n  resolveTextLayout,\n  resolvePercentRadius,\n  resolveZIndex,\n  resolveDimensions,\n  resolveAssets,\n  resolveInheritance,\n  resolvePercentHeight,\n  resolvePagePaddings,\n  resolveStyles,\n  resolveNoteChildren,\n  resolveLinkSubstitution,\n  resolvePageMargins,\n  resolvePageSizeStyle,\n);\n\nexport default layout;\n","import * as R from 'ramda';\n\n/**\n * Performs right-to-left function composition with async functions support\n *\n * @param  {...any} functions\n */\nconst asyncCompose = (...fns) => async value => {\n  for (const fn of R.reverse(fns)) value = await fn(value);\n  return value;\n};\n\nexport default asyncCompose;\n","import * as R from 'ramda';\n\nconst save = ctx => R.tap(() => ctx.save());\n\nexport default save;\n","import * as R from 'ramda';\n\nconst restore = ctx => R.tap(() => ctx.restore());\n\nexport default restore;\n","import * as R from 'ramda';\nimport PDFRenderer from '@react-pdf/textkit/renderers/pdf';\n\nconst renderText = (ctx, node) => {\n  const { top, left } = node.box;\n  const paddingTop = R.pathOr(0, ['box', 'paddingTop'], node);\n  const paddingLeft = R.pathOr(0, ['box', 'paddingLeft'], node);\n  const initialY = node.lines[0] ? node.lines[0].box.y : 0;\n\n  ctx.save();\n  ctx.translate(left + paddingLeft, top + paddingTop - initialY);\n  PDFRenderer.render(ctx, [node.lines]);\n  ctx.restore();\n\n  return node;\n};\n\nexport default R.curryN(2, renderText);\n","import * as R from 'ramda';\n\nconst renderPage = (ctx, node) => {\n  const { width, height } = node.box;\n\n  ctx.addPage({ size: [width, height], margin: 0 });\n\n  return node;\n};\n\nexport default R.curryN(2, renderPage);\n","const PROTOCOL_REGEXP = /^([a-z]+\\:(\\/\\/)?)/i;\n\n/**\n * Add protocol th URL if valid\n *\n * @param {String} value url\n * @returns {String} corrected url\n */\nexport const getURL = value => {\n  if (!value) return '';\n\n  if (typeof value === 'string' && !value.match(PROTOCOL_REGEXP)) {\n    return `http://${value}`;\n  }\n\n  return value;\n};\n","import * as R from 'ramda';\n\nimport { getURL } from '../utils/url';\n\nconst getSource = R.compose(\n  getURL,\n  R.either(R.path(['props', 'src']), R.path(['props', 'href'])),\n);\n\nexport default getSource;\n","import * as R from 'ramda';\n\nimport getSource from '../link/getSource';\n\nconst renderLink = (ctx, node) => {\n  const { top, left, width, height } = node.box;\n  const src = getSource(node);\n\n  ctx.link(left, top, width, height, src);\n\n  return node;\n};\n\nexport default R.curryN(2, renderLink);\n","import * as R from 'ramda';\n\nconst renderNote = (ctx, node) => {\n  const { top, left } = node.box;\n  const value = node.children[0] ? node.children[0].value : '';\n\n  ctx.note(left, top, 0, 0, value);\n\n  return node;\n};\n\nexport default R.curryN(2, renderNote);\n","import * as R from 'ramda';\n\n// This constant is used to approximate a symmetrical arc using a cubic\n// Bezier curve.\nconst KAPPA = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);\n\nconst clipNode = (ctx, node) => {\n  const { top, left, width, height } = node.box;\n\n  const {\n    borderTopLeftRadius = 0,\n    borderTopRightRadius = 0,\n    borderBottomRightRadius = 0,\n    borderBottomLeftRadius = 0,\n  } = node.style;\n\n  // Border top\n  const rtr = Math.min(borderTopRightRadius, 0.5 * width, 0.5 * height);\n  const ctr = rtr * (1.0 - KAPPA);\n\n  ctx.moveTo(left + rtr, top);\n  ctx.lineTo(left + width - rtr, top);\n  ctx.bezierCurveTo(\n    left + width - ctr,\n    top,\n    left + width,\n    top + ctr,\n    left + width,\n    top + rtr,\n  );\n\n  // Border right\n  const rbr = Math.min(borderBottomRightRadius, 0.5 * width, 0.5 * height);\n  const cbr = rbr * (1.0 - KAPPA);\n\n  ctx.lineTo(left + width, top + height - rbr);\n  ctx.bezierCurveTo(\n    left + width,\n    top + height - cbr,\n    left + width - cbr,\n    top + height,\n    left + width - rbr,\n    top + height,\n  );\n\n  // Border bottom\n  const rbl = Math.min(borderBottomLeftRadius, 0.5 * width, 0.5 * height);\n  const cbl = rbl * (1.0 - KAPPA);\n\n  ctx.lineTo(left + rbl, top + height);\n  ctx.bezierCurveTo(\n    left + cbl,\n    top + height,\n    left,\n    top + height - cbl,\n    left,\n    top + height - rbl,\n  );\n\n  // Border left\n  const rtl = Math.min(borderTopLeftRadius, 0.5 * width, 0.5 * height);\n  const ctl = rtl * (1.0 - KAPPA);\n\n  ctx.lineTo(left, top + rtl);\n  ctx.bezierCurveTo(left, top + ctl, left + ctl, top, left + rtl, top);\n  ctx.closePath();\n  ctx.clip();\n\n  return node;\n};\n\nexport default R.curryN(2, clipNode);\n","import matchPercent from '../utils/matchPercent';\n\nconst isNumeric = n => {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n};\n\nconst applyContainObjectFit = (cw, ch, iw, ih, px, py) => {\n  const cr = cw / ch;\n  const ir = iw / ih;\n\n  const pxp = matchPercent(px);\n  const pyp = matchPercent(py);\n  const pxv = pxp ? pxp.percent : 0.5;\n  const pyv = pyp ? pyp.percent : 0.5;\n\n  if (cr > ir) {\n    const height = ch;\n    const width = height * ir;\n    const yOffset = isNumeric(py) ? py : 0;\n    const xOffset = isNumeric(px) ? px : (cw - width) * pxv;\n\n    return { width, height, xOffset, yOffset };\n  } else {\n    const width = cw;\n    const height = width / ir;\n    const xOffset = isNumeric(px) ? px : 0;\n    const yOffset = isNumeric(py) ? py : (ch - height) * pyv;\n\n    return { width, height, yOffset, xOffset };\n  }\n};\n\nconst applyNoneObjectFit = (cw, ch, iw, ih, px, py) => {\n  const width = iw;\n  const height = ih;\n  const pxp = matchPercent(px);\n  const pyp = matchPercent(py);\n  const pxv = pxp ? pxp.percent : 0.5;\n  const pyv = pyp ? pyp.percent : 0.5;\n  const xOffset = isNumeric(px) ? px : (cw - width) * pxv;\n  const yOffset = isNumeric(py) ? py : (ch - height) * pyv;\n\n  return { width, height, xOffset, yOffset };\n};\n\nconst applyCoverObjectFit = (cw, ch, iw, ih, px, py) => {\n  const ir = iw / ih;\n  const cr = cw / ch;\n\n  const pxp = matchPercent(px);\n  const pyp = matchPercent(py);\n  const pxv = pxp ? pxp.percent : 0.5;\n  const pyv = pyp ? pyp.percent : 0.5;\n\n  if (cr > ir) {\n    const width = cw;\n    const height = width / ir;\n    const xOffset = isNumeric(px) ? px : 0;\n    const yOffset = isNumeric(py) ? py : (ch - height) * pyv;\n    return { width, height, yOffset, xOffset };\n  } else {\n    const height = ch;\n    const width = height * ir;\n    const xOffset = isNumeric(px) ? px : (cw - width) * pxv;\n    const yOffset = isNumeric(py) ? py : 0;\n    return { width, height, xOffset, yOffset };\n  }\n};\n\nconst applyScaleDownObjectFit = (cw, ch, iw, ih, px, py) => {\n  const containDimension = applyContainObjectFit(cw, ch, iw, ih, px, py);\n  const noneDimension = applyNoneObjectFit(cw, ch, iw, ih, px, py);\n\n  return containDimension.width < noneDimension.width\n    ? containDimension\n    : noneDimension;\n};\n\nconst applyFillObjectFit = (cw, ch, px, py) => {\n  return {\n    width: cw,\n    height: ch,\n    xOffset: matchPercent(px) ? 0 : px || 0,\n    yOffset: matchPercent(py) ? 0 : py || 0,\n  };\n};\n\nconst resolveObjectFit = (type = 'fill', cw, ch, iw, ih, px, py) => {\n  switch (type) {\n    case 'contain':\n      return applyContainObjectFit(cw, ch, iw, ih, px, py);\n    case 'cover':\n      return applyCoverObjectFit(cw, ch, iw, ih, px, py);\n    case 'none':\n      return applyNoneObjectFit(cw, ch, iw, ih, px, py);\n    case 'scale-down':\n      return applyScaleDownObjectFit(cw, ch, iw, ih, px, py);\n    default:\n      return applyFillObjectFit(cw, ch, px, py);\n  }\n};\n\nexport default resolveObjectFit;\n","import * as R from 'ramda';\n\nimport save from './save';\nimport restore from './restore';\nimport clipNode from './clipNode';\nimport warning from '../utils/warning';\nimport resolveObjectFit from '../image/resolveObjectFit';\n\nconst drawImage = ctx => node => {\n  const { left, top } = node.box;\n  const { opacity, objectPositionX, objectPositionY } = node.style;\n  const paddingTop = node.box.paddingLeft || 0;\n  const paddingRight = node.box.paddingRight || 0;\n  const paddingBottom = node.box.paddingBottom || 0;\n  const paddingLeft = node.box.paddingLeft || 0;\n\n  const { width, height, xOffset, yOffset } = resolveObjectFit(\n    node.style.objectFit,\n    node.box.width - paddingLeft - paddingRight,\n    node.box.height - paddingTop - paddingBottom,\n    node.image.width,\n    node.image.height,\n    objectPositionX,\n    objectPositionY,\n  );\n\n  if (node.image.data) {\n    if (width !== 0 && height !== 0) {\n      ctx\n        .fillOpacity(opacity || 1)\n        .image(\n          node.image.data,\n          left + paddingLeft + xOffset,\n          top + paddingTop + yOffset,\n          {\n            width,\n            height,\n          },\n        );\n    } else {\n      warning(\n        false,\n        `Image with src '${node.props.src}' skipped due to invalid dimensions`,\n      );\n    }\n  }\n\n  return node;\n};\n\nconst renderImage = (ctx, node) => {\n  R.compose(\n    restore(ctx),\n    drawImage(ctx),\n    clipNode(ctx),\n    save(ctx),\n  )(node);\n\n  return node;\n};\n\nexport default R.curryN(2, renderImage);\n","export const availableMethods = [\n  'dash',\n  'clip',\n  'save',\n  'path',\n  'fill',\n  'font',\n  'text',\n  'rect',\n  'scale',\n  'moveTo',\n  'lineTo',\n  'stroke',\n  'rotate',\n  'circle',\n  'lineCap',\n  'opacity',\n  'ellipse',\n  'polygon',\n  'restore',\n  'lineJoin',\n  'fontSize',\n  'fillColor',\n  'lineWidth',\n  'translate',\n  'miterLimit',\n  'strokeColor',\n  'fillOpacity',\n  'roundedRect',\n  'strokeOpacity',\n  'bezierCurveTo',\n  'quadraticCurveTo',\n  'linearGradient',\n  'radialGradient',\n];\n\nconst painter = function(ctx) {\n  const p = availableMethods.reduce(\n    (acc, prop) => ({\n      ...acc,\n      [prop]: (...args) => {\n        ctx[prop](...args);\n        return p;\n      },\n    }),\n    {},\n  );\n\n  return p;\n};\n\nexport default painter;\n","import * as R from 'ramda';\n\nimport painter from '../canvas/painter';\nimport warning from '../utils/warning';\n\nconst defaultsZero = R.pathOr(0);\n\nconst renderCanvas = (ctx, node) => {\n  const { top, left, width, height } = node.box;\n\n  const paddingLeft = defaultsZero('paddingLeft', node.box);\n  const paddingRight = defaultsZero('paddingRight', node.box);\n  const paddingTop = defaultsZero('paddingTop', node.box);\n  const paddingBottom = defaultsZero('paddingBottom', node.box);\n\n  const availableWidth = width - paddingLeft - paddingRight;\n  const availableHeight = height - paddingTop - paddingBottom;\n\n  warning(\n    availableWidth && availableHeight,\n    'Canvas element has null width or height. Please provide valid values via the `style` prop in order to correctly render it.',\n  );\n\n  ctx.save().translate(left + paddingLeft, top + paddingTop);\n\n  if (node.props.paint) {\n    node.props.paint(painter(ctx), availableWidth, availableHeight);\n  }\n\n  ctx.restore();\n\n  return node;\n};\n\nexport default R.curryN(2, renderCanvas);\n","import * as R from 'ramda';\n\nimport matchPercent from '../utils/matchPercent';\nimport hasVerticalRuler from '../node/hasVerticalRuler';\nimport hasHorizontalRuler from '../node/hasHorizontalRuler';\nimport {\n  RULER_WIDTH,\n  RULER_COLOR,\n  LINE_COLOR,\n  GRID_COLOR,\n  LINE_WIDTH,\n  RULER_FONT_SIZE,\n  DEFAULT_RULER_STEPS,\n} from '../constants';\n\nconst range = (max, steps) =>\n  Array.from({ length: Math.ceil(max / steps) }, (_, i) => i * steps);\n\nconst matchPercentage = value => {\n  const match = matchPercent(value);\n  return match ? 100 / match.value : null;\n};\n\nconst getVerticalSteps = page => {\n  const value =\n    page.props.horizontalRulerSteps ||\n    page.props.rulerSteps ||\n    DEFAULT_RULER_STEPS;\n\n  if (typeof value === 'string') {\n    const percentage = matchPercentage(value);\n    if (percentage) {\n      const width = page.box.width - (hasVerticalRuler(page) ? RULER_WIDTH : 0);\n      return width / percentage;\n    }\n    throw new Error('Page: Invalid horizontal steps value');\n  }\n\n  return value;\n};\n\nconst getHorizontalSteps = page => {\n  const value =\n    page.props.verticalRulerSteps ||\n    page.props.rulerSteps ||\n    DEFAULT_RULER_STEPS;\n\n  if (typeof value === 'string') {\n    const percentage = matchPercentage(value);\n    if (percentage) {\n      const height =\n        page.box.height - (hasVerticalRuler(page) ? RULER_WIDTH : 0);\n      return height / percentage;\n    }\n    throw new Error('Page: Invalid horizontal steps value');\n  }\n\n  return value;\n};\n\nconst renderVerticalRuler = ctx => page => {\n  const width = page.box.width;\n  const height = page.box.height;\n  const offset = hasHorizontalRuler(page) ? RULER_WIDTH : 0;\n  const hRange = range(width, getVerticalSteps(page));\n\n  ctx\n    .rect(offset, 0, width, RULER_WIDTH)\n    .fill(RULER_COLOR)\n    .moveTo(offset, RULER_WIDTH)\n    .lineTo(width, RULER_WIDTH)\n    .stroke(LINE_COLOR);\n\n  hRange.map(step => {\n    ctx\n      .moveTo(offset + step, 0)\n      .lineTo(offset + step, RULER_WIDTH)\n      .stroke(LINE_COLOR)\n      .fillColor('black')\n      .text(`${Math.round(step)}`, offset + step + 1, 1);\n\n    if (step !== 0) {\n      ctx\n        .moveTo(offset + step, RULER_WIDTH)\n        .lineTo(offset + step, height)\n        .stroke(GRID_COLOR);\n    }\n  });\n\n  return page;\n};\n\nconst renderHorizontalRuler = ctx => page => {\n  const width = page.box.width;\n  const height = page.box.height;\n  const offset = hasVerticalRuler(page) ? RULER_WIDTH : 0;\n  const hRange = range(height, getHorizontalSteps(page));\n\n  ctx\n    .rect(0, offset, RULER_WIDTH, height)\n    .fill(RULER_COLOR)\n    .moveTo(RULER_WIDTH, hasHorizontalRuler(page) ? RULER_WIDTH : 0)\n    .lineTo(RULER_WIDTH, height)\n    .stroke(LINE_COLOR);\n\n  hRange.map(step => {\n    ctx\n      .moveTo(0, offset + step)\n      .lineTo(RULER_WIDTH, offset + step)\n      .stroke(LINE_COLOR)\n      .fillColor('black')\n      .text(`${Math.round(step)}`, 1, offset + step + 1);\n\n    if (step !== 0) {\n      ctx\n        .moveTo(RULER_WIDTH, offset + step)\n        .lineTo(width, offset + step)\n        .stroke(GRID_COLOR);\n    }\n  });\n\n  return page;\n};\n\nconst renderRulers = (ctx, page) => {\n  ctx\n    .save()\n    .lineWidth(LINE_WIDTH)\n    .fontSize(RULER_FONT_SIZE)\n    .opacity(1);\n\n  R.compose(\n    R.when(hasVerticalRuler, renderVerticalRuler(ctx)),\n    R.when(hasHorizontalRuler, renderHorizontalRuler(ctx)),\n  )(page);\n\n  ctx.restore();\n\n  return page;\n};\n\nexport default R.curryN(2, renderRulers);\n","import * as R from 'ramda';\n\nconst getDocumentProp = target => (or, prop) =>\n  R.pathOr(or, ['children', 0, 'props', prop], target);\n\nconst setPDFMetadata = target => (key, value) => {\n  if (value) target.info[key] = value;\n};\n\n/**\n * Set document instance metadata\n *\n * @param {Object} ctx document instance\n * @param {Object} root document root\n */\nconst addMetadata = (ctx, root) => {\n  const getProp = getDocumentProp(root);\n  const setProp = setPDFMetadata(ctx);\n\n  const title = getProp(null, 'title');\n  const author = getProp(null, 'author');\n  const subject = getProp(null, 'subject');\n  const keywords = getProp(null, 'keywords');\n  const creator = getProp('react-pdf', 'creator');\n  const producer = getProp('react-pdf', 'producer');\n\n  setProp('Title', title);\n  setProp('Author', author);\n  setProp('Subject', subject);\n  setProp('Keywords', keywords);\n  setProp('Creator', creator);\n  setProp('Producer', producer);\n\n  return root;\n};\n\nexport default R.curryN(2, addMetadata);\n","import * as R from 'ramda';\n\nconst CONTENT_COLOR = '#a1c6e7';\nconst PADDING_COLOR = '#c4deb9';\nconst MARGIN_COLOR = '#f8cca1';\n\nconst shouldDebug = R.pathEq(['props', 'debug'], true);\n\n// TODO: Draw debug boxes using clipping to enhance quality\n\nconst debugContent = (ctx, node) => {\n  const {\n    left,\n    top,\n    width,\n    height,\n    paddingLeft,\n    paddingTop,\n    paddingRight,\n    paddingBottom,\n  } = node.box;\n\n  ctx\n    .fillColor(CONTENT_COLOR)\n    .opacity(0.5)\n    .rect(\n      left + paddingLeft,\n      top + paddingTop,\n      width - paddingLeft - paddingRight,\n      height - paddingTop - paddingBottom,\n    )\n    .fill();\n};\n\nconst debugPadding = (ctx, node) => {\n  const {\n    left,\n    top,\n    width,\n    height,\n    paddingLeft,\n    paddingTop,\n    paddingRight,\n    paddingBottom,\n  } = node.box;\n\n  ctx.fillColor(PADDING_COLOR).opacity(0.5);\n\n  // Padding top\n  ctx\n    .rect(\n      left + paddingLeft,\n      top,\n      width - paddingRight - paddingLeft,\n      paddingTop,\n    )\n    .fill();\n\n  // Padding left\n  ctx.rect(left, top, paddingLeft, height).fill();\n\n  // Padding right\n  ctx.rect(left + width - paddingRight, top, paddingRight, height).fill();\n\n  // Padding bottom\n  ctx\n    .rect(\n      left + paddingLeft,\n      top + height - paddingBottom,\n      width - paddingRight - paddingLeft,\n      paddingBottom,\n    )\n    .fill();\n};\n\nconst debugMargin = (ctx, node) => {\n  const {\n    left,\n    top,\n    width,\n    height,\n    marginLeft,\n    marginTop,\n    marginRight,\n    marginBottom,\n  } = node.box;\n  ctx.fillColor(MARGIN_COLOR).opacity(0.5);\n\n  // Margin top\n  ctx.rect(left, top - marginTop, width, marginTop).fill();\n\n  // Margin left\n  ctx\n    .rect(\n      left - marginLeft,\n      top - marginTop,\n      marginLeft,\n      height + marginTop + marginBottom,\n    )\n    .fill();\n\n  // Margin right\n  ctx\n    .rect(\n      left + width,\n      top - marginTop,\n      marginRight,\n      height + marginTop + marginBottom,\n    )\n    .fill();\n\n  // Margin bottom\n  ctx.rect(left, top + height, width, marginBottom).fill();\n};\n\nconst debugText = (ctx, node) => {\n  const {\n    left,\n    top,\n    width,\n    height,\n    marginLeft,\n    marginTop,\n    marginRight,\n    marginBottom,\n  } = node.box;\n\n  const roundedWidth = Math.round(width + marginLeft + marginRight);\n  const roundedHeight = Math.round(height + marginTop + marginBottom);\n\n  ctx\n    .fontSize(4)\n    .opacity(1)\n    .fillColor('black')\n    .text(\n      `${roundedWidth} x ${roundedHeight}`,\n      left - marginLeft,\n      Math.max(top - marginTop - 4, 1),\n    );\n};\n\nconst debugOrigin = (ctx, node) => {\n  if (node.origin) {\n    ctx\n      .circle(node.origin.left, node.origin.top, 3)\n      .fill('red')\n      .circle(node.origin.left, node.origin.top, 5)\n      .stroke('red');\n  }\n};\n\nconst renderDebug = (ctx, node) => {\n  if (!shouldDebug(node)) return node;\n\n  ctx.save();\n\n  debugContent(ctx, node);\n  debugPadding(ctx, node);\n  debugMargin(ctx, node);\n  debugText(ctx, node);\n  debugOrigin(ctx, node);\n\n  ctx.restore();\n\n  return node;\n};\n\nexport default R.curryN(2, renderDebug);\n","import * as R from 'ramda';\n\n// Ref: https://www.w3.org/TR/css-backgrounds-3/#borders\n\n// This constant is used to approximate a symmetrical arc using a cubic Bezier curve.\nconst KAPPA = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);\n\nconst clipBorderTop = (ctx, layout, style, rtr, rtl) => {\n  const { top, left, width, height } = layout;\n  const { borderTopWidth, borderRightWidth, borderLeftWidth } = style;\n\n  // Clip outer top border edge\n  ctx.moveTo(left + rtl, top);\n  ctx.lineTo(left + width - rtr, top);\n\n  // Ellipse coefficients outer top right cap\n  const c0 = rtr * (1.0 - KAPPA);\n\n  // Clip outer top right cap\n  ctx.bezierCurveTo(\n    left + width - c0,\n    top,\n    left + width,\n    top + c0,\n    left + width,\n    top + rtr,\n  );\n\n  // Move down in case the margin exceedes the radius\n  const topRightYCoord = top + Math.max(borderTopWidth, rtr);\n  ctx.lineTo(left + width, topRightYCoord);\n\n  // Clip inner top right cap\n  ctx.lineTo(left + width - borderRightWidth, topRightYCoord);\n\n  // Ellipse coefficients inner top right cap\n  const innerTopRightRadiusX = Math.max(rtr - borderRightWidth, 0);\n  const innerTopRightRadiusY = Math.max(rtr - borderTopWidth, 0);\n  const c1 = innerTopRightRadiusX * (1.0 - KAPPA);\n  const c2 = innerTopRightRadiusY * (1.0 - KAPPA);\n\n  // Clip inner top right cap\n  ctx.bezierCurveTo(\n    left + width - borderRightWidth,\n    top + borderTopWidth + c2,\n    left + width - borderRightWidth - c1,\n    top + borderTopWidth,\n    left + width - borderRightWidth - innerTopRightRadiusX,\n    top + borderTopWidth,\n  );\n\n  // Clip inner top border edge\n  ctx.lineTo(left + Math.max(rtl, borderLeftWidth), top + borderTopWidth);\n\n  // Ellipse coefficients inner top left cap\n  const innerTopLeftRadiusX = Math.max(rtl - borderLeftWidth, 0);\n  const innerTopLeftRadiusY = Math.max(rtl - borderTopWidth, 0);\n  const c3 = innerTopLeftRadiusX * (1.0 - KAPPA);\n  const c4 = innerTopLeftRadiusY * (1.0 - KAPPA);\n  const topLeftYCoord = top + Math.max(borderTopWidth, rtl);\n\n  // Clip inner top left cap\n  ctx.bezierCurveTo(\n    left + borderLeftWidth + c3,\n    top + borderTopWidth,\n    left + borderLeftWidth,\n    top + borderTopWidth + c4,\n    left + borderLeftWidth,\n    topLeftYCoord,\n  );\n  ctx.lineTo(left, topLeftYCoord);\n\n  // Move down in case the margin exceedes the radius\n  ctx.lineTo(left, top + rtl);\n\n  // Ellipse coefficients outer top left cap\n  const c5 = rtl * (1.0 - KAPPA);\n\n  // Clip outer top left cap\n  ctx.bezierCurveTo(left, top + c5, left + c5, top, left + rtl, top);\n  ctx.closePath();\n  ctx.clip();\n\n  // Clip border top cap joins\n  if (borderRightWidth) {\n    const trSlope = -borderTopWidth / borderRightWidth;\n    ctx.moveTo(left + width / 2, trSlope * (-width / 2) + top);\n    ctx.lineTo(left + width, top);\n    ctx.lineTo(left, top);\n    ctx.lineTo(left, top + height);\n    ctx.closePath();\n    ctx.clip();\n  }\n\n  if (borderLeftWidth) {\n    const trSlope = -borderTopWidth / borderLeftWidth;\n    ctx.moveTo(left + width / 2, trSlope * (-width / 2) + top);\n    ctx.lineTo(left, top);\n    ctx.lineTo(left + width, top);\n    ctx.lineTo(left + width, top + height);\n    ctx.closePath();\n    ctx.clip();\n  }\n};\n\nconst fillBorderTop = (ctx, layout, style, rtr, rtl) => {\n  const { top, left, width } = layout;\n  const {\n    borderTopColor,\n    borderTopWidth,\n    borderTopStyle,\n    borderRightWidth,\n    borderLeftWidth,\n  } = style;\n\n  const c0 = rtl * (1.0 - KAPPA);\n  const c1 = rtr * (1.0 - KAPPA);\n\n  ctx.moveTo(left, top + Math.max(rtl, borderTopWidth));\n  ctx.bezierCurveTo(left, top + c0, left + c0, top, left + rtl, top);\n  ctx.lineTo(left + width - rtr, top);\n  ctx.bezierCurveTo(\n    left + width - c1,\n    top,\n    left + width,\n    top + c1,\n    left + width,\n    top + rtr,\n  );\n\n  ctx.strokeColor(borderTopColor);\n  ctx.lineWidth(\n    Math.max(borderRightWidth, borderTopWidth, borderLeftWidth) * 2,\n  );\n\n  if (borderTopStyle === 'dashed') {\n    ctx.dash(borderTopWidth * 2, { space: borderTopWidth * 1.2 });\n  } else if (borderTopStyle === 'dotted') {\n    ctx.dash(borderTopWidth, { space: borderTopWidth * 1.2 });\n  }\n\n  ctx.stroke();\n  ctx.undash();\n};\n\nconst clipBorderRight = (ctx, layout, style, rtr, rbr) => {\n  const { top, left, width, height } = layout;\n  const { borderTopWidth, borderRightWidth, borderBottomWidth } = style;\n\n  // Clip outer right border edge\n  ctx.moveTo(left + width, top + rtr);\n  ctx.lineTo(left + width, top + height - rbr);\n\n  // Ellipse coefficients outer bottom right cap\n  const c0 = rbr * (1.0 - KAPPA);\n\n  // Clip outer top right cap\n  ctx.bezierCurveTo(\n    left + width,\n    top + height - c0,\n    left + width - c0,\n    top + height,\n    left + width - rbr,\n    top + height,\n  );\n\n  // Move left in case the margin exceedes the radius\n  const topBottomXCoord = left + width - Math.max(borderRightWidth, rbr);\n  ctx.lineTo(topBottomXCoord, top + height);\n\n  // Clip inner bottom right cap\n  ctx.lineTo(topBottomXCoord, top + height - borderBottomWidth);\n\n  // Ellipse coefficients inner bottom right cap\n  const innerBottomRightRadiusX = Math.max(rbr - borderRightWidth, 0);\n  const innerBottomRightRadiusY = Math.max(rbr - borderBottomWidth, 0);\n  const c1 = innerBottomRightRadiusX * (1.0 - KAPPA);\n  const c2 = innerBottomRightRadiusY * (1.0 - KAPPA);\n\n  // Clip inner top right cap\n  ctx.bezierCurveTo(\n    left + width - borderRightWidth - c1,\n    top + height - borderBottomWidth,\n    left + width - borderRightWidth,\n    top + height - borderBottomWidth - c2,\n    left + width - borderRightWidth,\n    top + height - Math.max(rbr, borderBottomWidth),\n  );\n\n  // Clip inner right border edge\n  ctx.lineTo(\n    left + width - borderRightWidth,\n    top + Math.max(rtr, borderTopWidth),\n  );\n\n  // Ellipse coefficients inner top right cap\n  const innerTopRightRadiusX = Math.max(rtr - borderRightWidth, 0);\n  const innerTopRightRadiusY = Math.max(rtr - borderTopWidth, 0);\n  const c3 = innerTopRightRadiusX * (1.0 - KAPPA);\n  const c4 = innerTopRightRadiusY * (1.0 - KAPPA);\n  const topRightXCoord = left + width - Math.max(rtr, borderRightWidth);\n\n  // Clip inner top left cap\n  ctx.bezierCurveTo(\n    left + width - borderRightWidth,\n    top + borderTopWidth + c4,\n    left + width - borderRightWidth - c3,\n    top + borderTopWidth,\n    topRightXCoord,\n    top + borderTopWidth,\n  );\n  ctx.lineTo(topRightXCoord, top);\n\n  // Move right in case the margin exceedes the radius\n  ctx.lineTo(left + width - rtr, top);\n\n  // Ellipse coefficients outer top right cap\n  const c5 = rtr * (1.0 - KAPPA);\n\n  // Clip outer top right cap\n  ctx.bezierCurveTo(\n    left + width - c5,\n    top,\n    left + width,\n    top + c5,\n    left + width,\n    top + rtr,\n  );\n\n  ctx.closePath();\n  ctx.clip();\n\n  // Clip border right cap joins\n  if (borderTopWidth) {\n    const trSlope = -borderTopWidth / borderRightWidth;\n    ctx.moveTo(left + width / 2, trSlope * (-width / 2) + top);\n    ctx.lineTo(left + width, top);\n    ctx.lineTo(left + width, top + height);\n    ctx.lineTo(left, top + height);\n    ctx.closePath();\n    ctx.clip();\n  }\n\n  if (borderBottomWidth) {\n    const brSlope = borderBottomWidth / borderRightWidth;\n    ctx.moveTo(left + width / 2, brSlope * (-width / 2) + top + height);\n    ctx.lineTo(left + width, top + height);\n    ctx.lineTo(left + width, top);\n    ctx.lineTo(left, top);\n    ctx.closePath();\n    ctx.clip();\n  }\n};\n\nconst fillBorderRight = (ctx, layout, style, rtr, rbr) => {\n  const { top, left, width, height } = layout;\n  const {\n    borderRightColor,\n    borderRightStyle,\n    borderRightWidth,\n    borderTopWidth,\n    borderBottomWidth,\n  } = style;\n\n  const c0 = rbr * (1.0 - KAPPA);\n  const c1 = rtr * (1.0 - KAPPA);\n\n  ctx.moveTo(left + width - rtr, top);\n  ctx.bezierCurveTo(\n    left + width - c1,\n    top,\n    left + width,\n    top + c1,\n    left + width,\n    top + rtr,\n  );\n  ctx.lineTo(left + width, top + height - rbr);\n  ctx.bezierCurveTo(\n    left + width,\n    top + height - c0,\n    left + width - c0,\n    top + height,\n    left + width - rbr,\n    top + height,\n  );\n\n  ctx.strokeColor(borderRightColor);\n  ctx.lineWidth(\n    Math.max(borderRightWidth, borderTopWidth, borderBottomWidth) * 2,\n  );\n\n  if (borderRightStyle === 'dashed') {\n    ctx.dash(borderRightWidth * 2, { space: borderRightWidth * 1.2 });\n  } else if (borderRightStyle === 'dotted') {\n    ctx.dash(borderRightWidth, { space: borderRightWidth * 1.2 });\n  }\n\n  ctx.stroke();\n  ctx.undash();\n};\n\nconst clipBorderBottom = (ctx, layout, style, rbl, rbr) => {\n  const { top, left, width, height } = layout;\n  const { borderBottomWidth, borderRightWidth, borderLeftWidth } = style;\n\n  // Clip outer top border edge\n  ctx.moveTo(left + width - rbr, top + height);\n  ctx.lineTo(left + rbl, top + height);\n\n  // Ellipse coefficients outer top right cap\n  const c0 = rbl * (1.0 - KAPPA);\n\n  // Clip outer top right cap\n  ctx.bezierCurveTo(\n    left + c0,\n    top + height,\n    left,\n    top + height - c0,\n    left,\n    top + height - rbl,\n  );\n\n  // Move up in case the margin exceedes the radius\n  const bottomLeftYCoord = top + height - Math.max(borderBottomWidth, rbl);\n  ctx.lineTo(left, bottomLeftYCoord);\n\n  // Clip inner bottom left cap\n  ctx.lineTo(left + borderLeftWidth, bottomLeftYCoord);\n\n  // Ellipse coefficients inner top right cap\n  const innerBottomLeftRadiusX = Math.max(rbl - borderLeftWidth, 0);\n  const innerBottomLeftRadiusY = Math.max(rbl - borderBottomWidth, 0);\n  const c1 = innerBottomLeftRadiusX * (1.0 - KAPPA);\n  const c2 = innerBottomLeftRadiusY * (1.0 - KAPPA);\n\n  // Clip inner bottom left cap\n  ctx.bezierCurveTo(\n    left + borderLeftWidth,\n    top + height - borderBottomWidth - c2,\n    left + borderLeftWidth + c1,\n    top + height - borderBottomWidth,\n    left + borderLeftWidth + innerBottomLeftRadiusX,\n    top + height - borderBottomWidth,\n  );\n\n  // Clip inner bottom border edge\n  ctx.lineTo(\n    left + width - Math.max(rbr, borderRightWidth),\n    top + height - borderBottomWidth,\n  );\n\n  // Ellipse coefficients inner top left cap\n  const innerBottomRightRadiusX = Math.max(rbr - borderRightWidth, 0);\n  const innerBottomRightRadiusY = Math.max(rbr - borderBottomWidth, 0);\n  const c3 = innerBottomRightRadiusX * (1.0 - KAPPA);\n  const c4 = innerBottomRightRadiusY * (1.0 - KAPPA);\n  const bottomRightYCoord = top + height - Math.max(borderBottomWidth, rbr);\n\n  // Clip inner top left cap\n  ctx.bezierCurveTo(\n    left + width - borderRightWidth - c3,\n    top + height - borderBottomWidth,\n    left + width - borderRightWidth,\n    top + height - borderBottomWidth - c4,\n    left + width - borderRightWidth,\n    bottomRightYCoord,\n  );\n  ctx.lineTo(left + width, bottomRightYCoord);\n\n  // Move down in case the margin exceedes the radius\n  ctx.lineTo(left + width, top + height - rbr);\n\n  // Ellipse coefficients outer top left cap\n  const c5 = rbr * (1.0 - KAPPA);\n\n  // Clip outer top left cap\n  ctx.bezierCurveTo(\n    left + width,\n    top + height - c5,\n    left + width - c5,\n    top + height,\n    left + width - rbr,\n    top + height,\n  );\n  ctx.closePath();\n  ctx.clip();\n\n  // Clip border bottom cap joins\n  if (borderRightWidth) {\n    const brSlope = borderBottomWidth / borderRightWidth;\n    ctx.moveTo(left + width / 2, brSlope * (-width / 2) + top + height);\n    ctx.lineTo(left + width, top + height);\n    ctx.lineTo(left, top + height);\n    ctx.lineTo(left, top);\n    ctx.closePath();\n    ctx.clip();\n  }\n\n  if (borderLeftWidth) {\n    const trSlope = -borderBottomWidth / borderLeftWidth;\n    ctx.moveTo(left + width / 2, trSlope * (width / 2) + top + height);\n    ctx.lineTo(left, top + height);\n    ctx.lineTo(left + width, top + height);\n    ctx.lineTo(left + width, top);\n    ctx.closePath();\n    ctx.clip();\n  }\n};\n\nconst fillBorderBottom = (ctx, layout, style, rbl, rbr) => {\n  const { top, left, width, height } = layout;\n  const {\n    borderBottomColor,\n    borderBottomStyle,\n    borderBottomWidth,\n    borderRightWidth,\n    borderLeftWidth,\n  } = style;\n\n  const c0 = rbl * (1.0 - KAPPA);\n  const c1 = rbr * (1.0 - KAPPA);\n\n  ctx.moveTo(left + width, top + height - rbr);\n  ctx.bezierCurveTo(\n    left + width,\n    top + height - c1,\n    left + width - c1,\n    top + height,\n    left + width - rbr,\n    top + height,\n  );\n  ctx.lineTo(left + rbl, top + height);\n  ctx.bezierCurveTo(\n    left + c0,\n    top + height,\n    left,\n    top + height - c0,\n    left,\n    top + height - rbl,\n  );\n\n  ctx.strokeColor(borderBottomColor);\n  ctx.lineWidth(\n    Math.max(borderBottomWidth, borderRightWidth, borderLeftWidth) * 2,\n  );\n\n  if (borderBottomStyle === 'dashed') {\n    ctx.dash(borderBottomWidth * 2, { space: borderBottomWidth * 1.2 });\n  } else if (borderBottomStyle === 'dotted') {\n    ctx.dash(borderBottomWidth, { space: borderBottomWidth * 1.2 });\n  }\n\n  ctx.stroke();\n  ctx.undash();\n};\n\nconst clipBorderLeft = (ctx, layout, style, rbl, rtl) => {\n  const { top, left, width, height } = layout;\n  const { borderTopWidth, borderLeftWidth, borderBottomWidth } = style;\n\n  // Clip outer left border edge\n  ctx.moveTo(left, top + height - rbl);\n  ctx.lineTo(left, top + rtl);\n\n  // Ellipse coefficients outer top left cap\n  const c0 = rtl * (1.0 - KAPPA);\n\n  // Clip outer top left cap\n  ctx.bezierCurveTo(left, top + c0, left + c0, top, left + rtl, top);\n\n  // Move right in case the margin exceedes the radius\n  const topLeftCoordX = left + Math.max(borderLeftWidth, rtl);\n  ctx.lineTo(topLeftCoordX, top);\n\n  // Clip inner top left cap\n  ctx.lineTo(topLeftCoordX, top + borderTopWidth);\n\n  // Ellipse coefficients inner top left cap\n  const innerTopLeftRadiusX = Math.max(rtl - borderLeftWidth, 0);\n  const innerTopLeftRadiusY = Math.max(rtl - borderTopWidth, 0);\n  const c1 = innerTopLeftRadiusX * (1.0 - KAPPA);\n  const c2 = innerTopLeftRadiusY * (1.0 - KAPPA);\n\n  // Clip inner top right cap\n  ctx.bezierCurveTo(\n    left + borderLeftWidth + c1,\n    top + borderTopWidth,\n    left + borderLeftWidth,\n    top + borderTopWidth + c2,\n    left + borderLeftWidth,\n    top + Math.max(rtl, borderTopWidth),\n  );\n\n  // Clip inner left border edge\n  ctx.lineTo(\n    left + borderLeftWidth,\n    top + height - Math.max(rbl, borderBottomWidth),\n  );\n\n  // Ellipse coefficients inner bottom left cap\n  const innerBottomLeftRadiusX = Math.max(rbl - borderLeftWidth, 0);\n  const innerBottomLeftRadiusY = Math.max(rbl - borderBottomWidth, 0);\n  const c3 = innerBottomLeftRadiusX * (1.0 - KAPPA);\n  const c4 = innerBottomLeftRadiusY * (1.0 - KAPPA);\n  const bottomLeftXCoord = left + Math.max(rbl, borderLeftWidth);\n\n  // Clip inner top left cap\n  ctx.bezierCurveTo(\n    left + borderLeftWidth,\n    top + height - borderBottomWidth - c4,\n    left + borderLeftWidth + c3,\n    top + height - borderBottomWidth,\n    bottomLeftXCoord,\n    top + height - borderBottomWidth,\n  );\n  ctx.lineTo(bottomLeftXCoord, top + height);\n\n  // Move left in case the margin exceedes the radius\n  ctx.lineTo(left + rbl, top + height);\n\n  // Ellipse coefficients outer top right cap\n  const c5 = rbl * (1.0 - KAPPA);\n\n  // Clip outer top right cap\n  ctx.bezierCurveTo(\n    left + c5,\n    top + height,\n    left,\n    top + height - c5,\n    left,\n    top + height - rbl,\n  );\n\n  ctx.closePath();\n  ctx.clip();\n\n  // Clip border right cap joins\n  if (borderBottomWidth) {\n    const trSlope = -borderBottomWidth / borderLeftWidth;\n    ctx.moveTo(left + width / 2, trSlope * (width / 2) + top + height);\n    ctx.lineTo(left, top + height);\n    ctx.lineTo(left, top);\n    ctx.lineTo(left + width, top);\n    ctx.closePath();\n    ctx.clip();\n  }\n\n  if (borderBottomWidth) {\n    const trSlope = -borderTopWidth / borderLeftWidth;\n    ctx.moveTo(left + width / 2, trSlope * (-width / 2) + top);\n    ctx.lineTo(left, top);\n    ctx.lineTo(left, top + height);\n    ctx.lineTo(left + width, top + height);\n    ctx.closePath();\n    ctx.clip();\n  }\n};\n\nconst fillBorderLeft = (ctx, layout, style, rbl, rtl) => {\n  const { top, left, height } = layout;\n  const {\n    borderLeftColor,\n    borderLeftStyle,\n    borderLeftWidth,\n    borderTopWidth,\n    borderBottomWidth,\n  } = style;\n\n  const c0 = rbl * (1.0 - KAPPA);\n  const c1 = rtl * (1.0 - KAPPA);\n\n  ctx.moveTo(left + rbl, top + height);\n  ctx.bezierCurveTo(\n    left + c0,\n    top + height,\n    left,\n    top + height - c0,\n    left,\n    top + height - rbl,\n  );\n  ctx.lineTo(left, top + rtl);\n  ctx.bezierCurveTo(left, top + c1, left + c1, top, left + rtl, top);\n\n  ctx.strokeColor(borderLeftColor);\n  ctx.lineWidth(\n    Math.max(borderLeftWidth, borderTopWidth, borderBottomWidth) * 2,\n  );\n\n  if (borderLeftStyle === 'dashed') {\n    ctx.dash(borderLeftWidth * 2, { space: borderLeftWidth * 1.2 });\n  } else if (borderLeftStyle === 'dotted') {\n    ctx.dash(borderLeftWidth, { space: borderLeftWidth * 1.2 });\n  }\n\n  ctx.stroke();\n  ctx.undash();\n};\n\nconst shouldRenderBorders = node =>\n  node.box &&\n  (node.box.borderTopWidth ||\n    node.box.borderRightWidth ||\n    node.box.borderBottomWidth ||\n    node.box.borderLeftWidth);\n\nconst renderBorders = (ctx, node) => {\n  if (!shouldRenderBorders(node)) return node;\n\n  const {\n    width,\n    height,\n    borderTopWidth,\n    borderLeftWidth,\n    borderRightWidth,\n    borderBottomWidth,\n  } = node.box;\n\n  const {\n    opacity,\n    borderTopLeftRadius = 0,\n    borderTopRightRadius = 0,\n    borderBottomLeftRadius = 0,\n    borderBottomRightRadius = 0,\n    borderTopColor = 'black',\n    borderTopStyle = 'solid',\n    borderLeftColor = 'black',\n    borderLeftStyle = 'solid',\n    borderRightColor = 'black',\n    borderRightStyle = 'solid',\n    borderBottomColor = 'black',\n    borderBottomStyle = 'solid',\n  } = node.style;\n\n  const style = {\n    borderTopColor,\n    borderTopWidth,\n    borderTopStyle,\n    borderLeftColor,\n    borderLeftWidth,\n    borderLeftStyle,\n    borderRightColor,\n    borderRightWidth,\n    borderRightStyle,\n    borderBottomColor,\n    borderBottomWidth,\n    borderBottomStyle,\n    borderTopLeftRadius,\n    borderTopRightRadius,\n    borderBottomLeftRadius,\n    borderBottomRightRadius,\n  };\n\n  const rtr = Math.min(borderTopRightRadius, 0.5 * width, 0.5 * height);\n  const rtl = Math.min(borderTopLeftRadius, 0.5 * width, 0.5 * height);\n  const rbr = Math.min(borderBottomRightRadius, 0.5 * width, 0.5 * height);\n  const rbl = Math.min(borderBottomLeftRadius, 0.5 * width, 0.5 * height);\n\n  ctx.save();\n  ctx.strokeOpacity(opacity);\n\n  if (borderTopWidth) {\n    ctx.save();\n    clipBorderTop(ctx, node.box, style, rtr, rtl);\n    fillBorderTop(ctx, node.box, style, rtr, rtl);\n    ctx.restore();\n  }\n\n  if (borderRightWidth) {\n    ctx.save();\n    clipBorderRight(ctx, node.box, style, rtr, rbr);\n    fillBorderRight(ctx, node.box, style, rtr, rbr);\n    ctx.restore();\n  }\n\n  if (borderBottomWidth) {\n    ctx.save();\n    clipBorderBottom(ctx, node.box, style, rbl, rbr);\n    fillBorderBottom(ctx, node.box, style, rbl, rbr);\n    ctx.restore();\n  }\n\n  if (borderLeftWidth) {\n    ctx.save();\n    clipBorderLeft(ctx, node.box, style, rbl, rtl);\n    fillBorderLeft(ctx, node.box, style, rbl, rtl);\n    ctx.restore();\n  }\n\n  ctx.restore();\n\n  return node;\n};\n\nexport default R.curryN(2, renderBorders);\n","import * as R from 'ramda';\n\nimport save from './save';\nimport restore from './restore';\nimport clipNode from './clipNode';\n\nconst drawBackground = ctx => node => {\n  if (node.box && node.style.backgroundColor) {\n    const { top, left, width, height } = node.box;\n\n    ctx\n      .fillOpacity(node.style.opacity || 1)\n      .fillColor(node.style.backgroundColor)\n      .rect(left, top, width, height)\n      .fill();\n  }\n\n  return node;\n};\n\nconst shouldRenderBackground = R.hasPath(['style', 'backgroundColor']);\n\nconst renderBackground = (ctx, node) => {\n  R.when(\n    shouldRenderBackground,\n    R.compose(\n      restore(ctx),\n      drawBackground(ctx),\n      clipNode(ctx),\n      save(ctx),\n    ),\n  )(node);\n\n  return node;\n};\n\nexport default R.curryN(2, renderBackground);\n","import * as R from 'ramda';\n\n// TODO: Implement using only matrices to support skew and even more operations than css.\n\nconst getRotation = transform => {\n  const match = /rotate\\((-?\\d+.?\\d+)(.+)\\)/g.exec(transform);\n\n  if (match && match[1] && match[2]) {\n    const value = match[1];\n    return match[2] === 'rad' ? (value * 180) / Math.PI : value;\n  }\n\n  return 0;\n};\n\nconst getTranslateX = transform => {\n  const matchX = /translateX\\((-?\\d+\\.?d*)\\)/g.exec(transform);\n  const matchGeneric = /translate\\((-?\\d+\\.?d*).*,\\s*(-?\\d+\\.?d*).*\\)/g.exec(\n    transform,\n  );\n\n  if (matchX && matchX[1]) return matchX[1];\n  if (matchGeneric && matchGeneric[1]) return matchGeneric[1];\n\n  return 0;\n};\n\nconst getTranslateY = transform => {\n  const matchY = /translateY\\((-?\\d+\\.?\\d*)\\)/g.exec(transform);\n  const matchGeneric = /translate\\((-?\\d+\\.?\\d*).*,\\s*(-?\\d+\\.?\\d*).*\\)/g.exec(\n    transform,\n  );\n\n  if (matchY && matchY[1]) return matchY[1];\n  if (matchGeneric && matchGeneric[2]) return matchGeneric[2];\n\n  return 0;\n};\n\nconst getScaleX = transform => {\n  const matchX = /scaleX\\((-?\\d+\\.?\\d*)\\)/g.exec(transform);\n  const matchGeneric = /scale\\((-?\\d+\\.?\\d*).*,\\s*(-?\\d+\\.?\\d*).*\\)/g.exec(\n    transform,\n  );\n\n  if (matchX && matchX[1]) return matchX[1];\n  if (matchGeneric && matchGeneric[1]) return matchGeneric[1];\n\n  return 1;\n};\n\nconst getScaleY = transform => {\n  const matchY = /scaleY\\((-?\\d+\\.?\\d*)\\)/g.exec(transform);\n  const matchGeneric = /scale\\((-?\\d+\\.?\\d*).*,\\s*(-?\\d+\\.?\\d*).*\\)/g.exec(\n    transform,\n  );\n\n  if (matchY && matchY[1]) return matchY[1];\n  if (matchGeneric && matchGeneric[2]) return matchGeneric[2];\n\n  return 1;\n};\n\nconst getMatrix = transform => {\n  const match = /matrix\\(([^,]+),([^,]+),([^,]+),([^,]+),([^,]+),([^,]+)\\)/g.exec(\n    transform,\n  );\n  if (match) return match.slice(1, 7);\n  return null;\n};\n\nconst applySingleTransformation = (ctx, transform, origin) => {\n  if (/rotate/g.test(transform)) {\n    ctx.rotate(getRotation(transform), { origin });\n  } else if (/scaleX/g.test(transform)) {\n    ctx.scale(getScaleX(transform), 1, { origin });\n  } else if (/scaleY/g.test(transform)) {\n    ctx.scale(1, getScaleY(transform), { origin });\n  } else if (/scale/g.test(transform)) {\n    ctx.scale(getScaleX(transform), getScaleY(transform), {\n      origin,\n    });\n  } else if (/translateX/g.test(transform)) {\n    ctx.translate(getTranslateX(transform), 1, { origin });\n  } else if (/translateY/g.test(transform)) {\n    ctx.translate(1, getTranslateY(transform), { origin });\n  } else if (/translate/g.test(transform)) {\n    ctx.translate(getTranslateX(transform), getTranslateY(transform), {\n      origin,\n    });\n  } else if (/matrix/g.test(transform)) {\n    ctx.transform(...getMatrix(transform));\n  }\n};\n\nconst applyTransformations = (ctx, node) => {\n  if (!node.origin) return node;\n\n  let match;\n  const re = /[a-zA-Z]+\\([^)]+\\)/g;\n  const origin = [node.origin.left, node.origin.top];\n  const transform = (node.style && node.style.transform) || '';\n\n  while ((match = re.exec(transform)) != null) {\n    applySingleTransformation(ctx, match[0], origin);\n  }\n\n  return node;\n};\n\nexport default R.curryN(2, applyTransformations);\n","import * as R from 'ramda';\n\nimport Font from '../font';\nimport save from './save';\nimport restore from './restore';\nimport isText from '../node/isText';\nimport isPage from '../node/isPage';\nimport isImage from '../node/isImage';\nimport isNote from '../node/isNote';\nimport isLink from '../node/isLink';\nimport isCanvas from '../node/isCanvas';\nimport renderText from './renderText';\nimport renderPage from './renderPage';\nimport renderLink from './renderLink';\nimport renderNote from './renderNote';\nimport renderImage from './renderImage';\nimport renderCanvas from './renderCanvas';\nimport renderRulers from './renderRulers';\nimport addMetadata from './addMetadata';\nimport renderDebug from './renderDebug';\nimport renderBorders from './renderBorders';\nimport renderBackground from './renderBackground';\nimport applyTransformations from './applyTransformations';\n\nconst isNotText = R.complement(isText);\n\nconst renderNode = ctx => node => {\n  const renderChildren = R.tap(\n    R.compose(\n      R.forEach(renderNode(ctx)),\n      R.pathOr([], ['children']),\n    ),\n  );\n\n  return R.compose(\n    restore(ctx),\n    renderDebug(ctx),\n    R.when(isNotText, renderChildren),\n    R.cond([\n      [isText, renderText(ctx)],\n      [isLink, renderLink(ctx)],\n      [isNote, renderNote(ctx)],\n      [isImage, renderImage(ctx)],\n      [isCanvas, renderCanvas(ctx)],\n      [R.T, R.identity],\n    ]),\n    renderBorders(ctx),\n    renderBackground(ctx),\n    applyTransformations(ctx),\n    save(ctx),\n    R.when(isPage, renderPage(ctx)),\n  )(node);\n};\n\nconst renderDocument = ctx =>\n  R.compose(\n    R.forEach(\n      R.compose(\n        renderRulers(ctx),\n        renderNode(ctx),\n      ),\n    ),\n    R.pathOr([], ['children']),\n  );\n\nconst renderRoot = ctx =>\n  R.compose(\n    R.forEach(renderDocument(ctx)),\n    R.pathOr([], ['children']),\n  );\n\nconst render = (ctx, root) => {\n  addMetadata(ctx)(root);\n  renderRoot(ctx)(root);\n\n  ctx.end();\n  Font.reset();\n\n  return ctx;\n};\n\nexport default render;\n","import flatten from './flatten';\n\nconst create = styles => styles;\n\nconst absoluteFillObject = {\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  bottom: 0,\n  right: 0,\n};\n\nexport default {\n  hairlineWidth: 1,\n  create,\n  flatten,\n  absoluteFillObject,\n};\n","import BlobStream from 'blob-stream';\nimport PDFDocument from '@react-pdf/pdfkit';\n\nimport createRenderer from './renderer';\nimport layoutDocument from './layout';\nimport renderPDF from './pdf/render';\nimport StyleSheet from './stylesheet';\nimport Font from './font';\nimport { version } from '../package.json';\nimport {\n  VIEW,\n  TEXT,\n  LINK,\n  PAGE,\n  NOTE,\n  IMAGE,\n  DOCUMENT,\n  CANVAS,\n} from './constants';\n\nconst View = VIEW;\nconst Text = TEXT;\nconst Link = LINK;\nconst Page = PAGE;\nconst Note = NOTE;\nconst Image = IMAGE;\nconst Document = DOCUMENT;\nconst Canvas = CANVAS;\n\nconst pdf = input => {\n  let _isDirty = true;\n\n  const container = { type: 'ROOT', children: [] };\n  const PDFRenderer = createRenderer(markAsDirty);\n  const mountNode = PDFRenderer.createContainer(container);\n\n  if (input) updateContainer(input);\n\n  function isDirty() {\n    return _isDirty;\n  }\n\n  function markAsDirty() {\n    _isDirty = true;\n  }\n\n  function callOnRender(params = {}) {\n    // if (container.document.props.onRender) {\n    // const layoutData = container.document.getLayoutData();\n    // container.document.props.onRender({ ...params, layoutData });\n    // }\n  }\n\n  const render = async () => {\n    const ctx = new PDFDocument({ autoFirstPage: false });\n\n    // let layout;\n\n    // for (let i = 0; i < 10; i++) {\n    console.time('layout');\n    const layout = await layoutDocument(container);\n    console.timeEnd('layout');\n    // }\n\n    const instance = renderPDF(ctx, layout);\n\n    _isDirty = false;\n\n    // console.log(layout);\n\n    return instance;\n  };\n\n  const renderWithContext = async ctx => {\n    const layout = await layoutDocument(container);\n    const instance = renderPDF(ctx, layout);\n    _isDirty = false;\n\n    return instance;\n  };\n\n  const layout = async () => {\n    return layoutDocument(container);\n  };\n\n  function updateContainer(doc) {\n    PDFRenderer.updateContainer(doc, mountNode, null);\n  }\n\n  async function toBlob() {\n    const instance = await render();\n    const stream = instance.pipe(BlobStream());\n\n    return new Promise((resolve, reject) => {\n      stream.on('finish', () => {\n        try {\n          const blob = stream.toBlob('application/pdf');\n          callOnRender({ blob });\n          resolve(blob);\n        } catch (error) {\n          reject(error);\n        }\n      });\n\n      stream.on('error', reject);\n    });\n  }\n\n  // async function toBuffer() {\n  //   await container.render();\n\n  //   callOnRender();\n\n  //   return container.instance;\n  // }\n\n  // function toString() {\n  //   let result = '';\n  //   container.render();\n\n  //   return new Promise((resolve, reject) => {\n  //     try {\n  //       container.instance.on('data', function(buffer) {\n  //         result += buffer;\n  //       });\n\n  //       container.instance.on('end', function() {\n  //         callOnRender({ string: result });\n  //         resolve(result);\n  //       });\n  //     } catch (error) {\n  //       reject(error);\n  //     }\n  //   });\n  // }\n\n  return {\n    layout,\n    isDirty,\n    container,\n    updateContainer,\n    renderWithContext,\n    // toBuffer,\n    toBlob,\n    toString,\n  };\n};\n\nexport {\n  version,\n  View,\n  Text,\n  Link,\n  Page,\n  Font,\n  Note,\n  Image,\n  Document,\n  Canvas,\n  StyleSheet,\n  pdf,\n};\n","import fs from 'fs';\nimport {\n  pdf,\n  View,\n  Text,\n  Link,\n  Page,\n  Font,\n  Note,\n  Image,\n  version,\n  Document,\n  StyleSheet,\n} from './index';\n\nexport const renderToStream = async function(element) {\n  const instance = pdf(element);\n  const buffer = await instance.toBuffer();\n  instance.container.finish();\n  return buffer;\n};\n\nexport const renderToFile = async function(element, filePath, callback) {\n  const output = await renderToStream(element);\n  const stream = fs.createWriteStream(filePath);\n\n  output.pipe(stream);\n\n  return new Promise((resolve, reject) => {\n    stream.on('finish', () => {\n      if (callback) callback(output, filePath);\n      resolve(output);\n    });\n    stream.on('error', reject);\n  });\n};\n\nconst throwEnvironmentError = name => {\n  throw new Error(\n    `${name} is a web specific API. Or you're either using this component on Node, or your bundler is not loading react-pdf from the appropiate web build.`,\n  );\n};\n\nexport const PDFViewer = () => {\n  throwEnvironmentError('PDFViewer');\n};\n\nexport const PDFDownloadLink = () => {\n  throwEnvironmentError('PDFDownloadLink');\n};\n\nexport const BlobProvider = () => {\n  throwEnvironmentError('BlobProvider');\n};\n\nexport const render = renderToFile;\n\nexport {\n  pdf,\n  View,\n  Text,\n  Link,\n  Page,\n  Font,\n  Note,\n  Image,\n  version,\n  Document,\n  StyleSheet,\n} from './index';\n\nexport default {\n  pdf,\n  View,\n  Text,\n  Link,\n  Page,\n  Font,\n  Note,\n  Image,\n  version,\n  Document,\n  StyleSheet,\n  PDFViewer,\n  BlobProvider,\n  PDFDownloadLink,\n  renderToStream,\n  renderToFile,\n  render,\n};\n"],"names":["propsEqual","a","b","oldPropsKeys","Object","keys","newPropsKeys","length","i","propName","emptyObject","FONT_WEIGHTS","thin","hairline","ultralight","extralight","light","normal","medium","semibold","demibold","bold","ultrabold","extrabold","heavy","black","matchBoxModel","R","matchObjectPosition","matchBorderShorthand","matchTransformOrigin","isFontWeightStyle","key","match","isBorderStyle","value","isBoxModelStyle","isObjectPositionStyle","isTransformOriginStyle","processBorders","Error","processBoxModel","processFontWeight","toLowerCase","processObjectPosition","processTransformOrigin","result","transformOffsetKeywords","matchNumber","String","castFloat","v","parseFloat","transformStyles","style","propsArray","resolvedStyle","fetchFont","async","src","options","response","fetch","buffer","arrayBuffer","constructor","name","Buffer","from","FontSource","fontFamily","fontStyle","fontWeight","data","loading","BROWSER","this","headers","body","method","fontkit","create","Promise","resolve","reject","open","err","Font","family","sources","register","push","descriptor","styleSources","filter","s","exactFit","find","res","leftOffset","rightOffset","lt","gt","emojiSource","registerEmojiSource","url","format","getEmojiSource","hyphenationCallback","registerHyphenationCallback","callback","getHyphenationCallback","warning","process","env","NODE_ENV","condition","args","undefined","argIndex","message","replace","console","error","x","printWarning","fonts","getFont","standardFonts","includes","font","getRegisteredFonts","getRegisteredFontFamilies","load","clear","reset","hasOwnProperty","emoji","hyphenation","isImage","PNG","isValid","e","MARKERS","JPEG","width","height","readUInt16BE","marker","pos","isBuffer","IMAGE_CACHE","limit","cache","get","set","shift","createCache","getAbsoluteLocalPath","protocol","auth","host","port","hostname","path","pathname","parse","absolutePath","getImage","extension","resolveBufferImage","guessFormat","resolveImageFromUrl","uri","fs","readFile","fetchLocalFile","fetchRemoteFile","isPng","isJpg","getImageFormat","resolveImage","cacheKey","toString","image","test","isCompatibleBase64","exec","lower","isValidFormat","resolveBase64Image","JSON","stringify","resolveImageFromData","getSource","fetchImage","node","props","warn","emojis","regex","emojiRegex","makeFetchEmojiImage","promise","then","reflect","_removeNoColor","buildEmojiUrl","string","Array","map","char","codePointAt","join","getCodePoints","fetchEmojis","promises","emojiUrl","fetchEmojiImage","fetchAssets","listToExplore","children","slice","forEach","childNode","compact","Boolean","isArray","isNotArray","castArray","flatten","styles","reduce","acc","prototype","styleShorthands","margin","marginTop","marginRight","marginBottom","marginLeft","marginHorizontal","marginVertical","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingHorizontal","paddingVertical","border","borderTopColor","borderTopStyle","borderTopWidth","borderRightColor","borderRightStyle","borderRightWidth","borderBottomColor","borderBottomStyle","borderBottomWidth","borderLeftColor","borderLeftStyle","borderLeftWidth","borderTop","borderRight","borderBottom","borderLeft","borderColor","borderRadius","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","borderStyle","borderWidth","objectPosition","objectPositionX","objectPositionY","transformOrigin","transformOriginX","transformOriginY","expandedKeys","expandStyles","expandedProps","call","transformUnit","container","scalar","unit","parseValue","matchMedia","resolveStyles","transformUnits","resolveMediaQueries","flattenStyles","resolveNodeStyles","page","pageBox","resolveZIndex","hasVerticalRuler","hasHorizontalRuler","adjustPageSize","box","top","left","resolveRulers","matchPercent","isPercent","percent","absValue","Math","abs","absPercent","getTransformStyle","getOrigin","percentX","percentY","resolveNodeOrigin","resolveOrigin","getOrientation","isLandscape","toSizeObject","flipSizeObject","getStringSize","A0","A1","A2","A3","A4","A5","A6","A7","A8","A9","A10","B0","B1","B2","B3","B4","B5","B6","B7","B8","B9","B10","C0","C1","C2","C3","C4","C5","C6","C7","C8","C9","C10","RA0","RA1","RA2","RA3","RA4","SRA0","SRA1","SRA2","SRA3","SRA4","EXECUTIVE","FOLIO","LEGAL","LETTER","TABLOID","getNumberSize","throwInvalidError","size","target","resolvePageSize","Number","getPageSize","isNotNil","firstPass","fns","fn","getComputedMargin","edge","yogaNode","_yogaNode","getMargin","Yoga","EDGE_TOP","EDGE_RIGHT","EDGE_BOTTOM","EDGE_LEFT","getComputedPadding","getPadding","getTop","getComputedTop","getRight","getComputedRight","getBottom","getComputedBottom","getLeft","getComputedLeft","getPosition","right","bottom","DEFAULT_DIMENSION","getDimension","getComputedWidth","getComputedHeight","getComputedBorder","getBorderWidth","upperFirst","setYogaValue","attr","hasEdge","fixedMethod","autoMethod","percentMethod","setFlex","setFlexGrow","setFlexBasis","setAlign","yogaValue","ALIGN_FLEX_START","ALIGN_CENTER","ALIGN_FLEX_END","ALIGN_STRETCH","ALIGN_BASELINE","ALIGN_SPACE_BETWEEN","ALIGN_SPACE_AROUND","ALIGN_AUTO","setAlignSelf","setFlexShrink","setAlignContent","isRow","isRowReverse","isColumnReverse","setMarginTop","setMarginRight","setMarginBottom","setMarginLeft","setPaddingTop","setPaddingRight","setPaddingBottom","setPaddingLeft","setBorderTop","setBorderRight","setBorderBottom","setBorderLeft","setPositionTop","setPositionRight","setPositionBottom","setPositionLeft","setWidth","setMinWidth","setMaxWidth","setHeight","setMinHeight","setMaxHeight","isText","isNote","isPage","isCanvas","StandardFont","PDFFont","layout","str","encoded","positions","encode","stringIndices","_","glyphs","g","glyph","getGlyph","parseInt","advanceWidth","glyphForCodePoint","codePoint","id","_font","codePoints","isLigature","characterToGlyph","hasGlyphForCodePoint","fontCache","IGNORED_CODE_POINTS","getFontSize","getOrCreateFont","getFallbackFont","shouldFallbackToFont","IGNORABLE_CODEPOINTS","isTextInstance","PREPROCESSORS","fragments","fragment","charSubset","fromCharCode","buildSubsetForFont","attributes","subsetRegex","RegExp","lastIndex","index","emojiSize","fontSize","chunk","attachment","yOffset","floor","transformText","text","transformation","toUpperCase","l","capitalize","getFragments","instance","color","backgroundColor","textAlign","lineHeight","textDecoration","textDecorationColor","textDecorationStyle","textTransform","letterSpacing","textIndent","opacity","obj","align","indent","link","characterSpacing","underlineStyle","underline","underlineColor","strike","strikeStyle","strikeColor","child","preprocessor","engine","layoutEngine","linebreaker","justification","scriptItemizer","wordHyphenation","fontSubstitution","runs","lastFont","run","defaultFont","start","end","scale","unitsPerEm","layoutText","AttributedString","fromFragments","y","maxLines","Infinity","truncateMode","hyphenationPenalty","shrinkWhitespaceFactor","before","after","linesWidth","lines","max","line","linesHeight","widthMode","heightMode","MEASURE_MODE_EXACTLY","MEASURE_MODE_AT_MOST","min","getRatio","isHeightAuto","imageRatio","imageMargin","pagePadding","pageArea","MEASURE_MODE_UNDEFINED","scaledHeight","getMax","ctx","points","nil","addPoint","moveTo","rect","w","h","ellipse","rx","ry","lineTo","circle","polygon","pts","roundedRect","lineWidth","bezierCurveTo","quadraticCurveTo","rotate","translate","dash","clip","save","fill","stroke","lineCap","restore","lineJoin","fillColor","miterLimit","strokeColor","fillOpacity","strokeOpacity","linearGradient","radialGradient","getWidth","getHeight","measureCtx","paint","YOGA_CONFIG","Config","setPointScaleFactor","setYogaValues","setNodeHeight","minWidth","maxWidth","minHeight","maxHeight","setPositionType","POSITION_TYPE_ABSOLUTE","POSITION_TYPE_RELATIVE","position","setDisplay","DISPLAY_NONE","DISPLAY_FLEX","display","FLEX_DIRECTION_ROW","FLEX_DIRECTION_ROW_REVERSE","FLEX_DIRECTION_COLUMN_REVERSE","FLEX_DIRECTION_COLUMN","setFlexDirection","flexDirection","alignSelf","alignContent","JUSTIFY_CENTER","JUSTIFY_FLEX_END","JUSTIFY_SPACE_BETWEEN","JUSTIFY_SPACE_AROUND","JUSTIFY_SPACE_EVENLY","JUSTIFY_FLEX_START","setJustifyContent","justifyContent","WRAP_WRAP","WRAP_WRAP_REVERSE","WRAP_NO_WRAP","setFlexWrap","flexWrap","OVERFLOW_HIDDEN","OVERFLOW_SCROLL","OVERFLOW_VISIBLE","setOverflow","overflow","setAspectRatio","aspectRatio","flex","flexBasis","flexGrow","flexShrink","insertYogaNodes","parent","insertChild","getChildCount","isNotText","isNotNote","isLayoutElement","isNotTextInstance","createYogaNodes","Node","createWithConfig","setMeasureFunc","measureText","measureImage","measureCanvas","calculateLayout","persistDimensions","destroyYogaNodes","n","destroy","resolvePageDimensions","resolveDimensions","shouldLayoutText","resolveTextLayout","getInheritStyles","mergeStyles","resolveInheritance","inheritStyles","removeMargins","setMargin","resolvePageMargins","getWrap","getBreak","getMinPresenceAhead","defaultPresenceAhead","element","shouldBreak","futureElements","minPresenceAhead","presenceAhead","elements","isElementInside","getPresenceAhead","futureHeight","nodes","getNodesHeight","shouldSplit","shouldWrap","getPaddingBottom","getChildren","setChildren","setBreak","breakChildren","offset","nextElements","currentElements","childTop","childHeight","shouldNodeBreak","currentChildren","nextChildren","childsOffset","ceil","breakNode","resolvePageBreaks","pages","getContentArea","subpages","current","nextPage","isElementOutside","splitChildren","currentChild","nextChild","splitNode","splitNodes","nodeTop","currentChilds","resolvePageSplitting","getWrappingArea","splittedPage","restorePageSize","resolvePageWrapping","getNodesText","wrapTextInstance","type","resolveNoteChildren","resolvePageHorizontalPadding","resolvePageVerticalPadding","resolveRadius","resolvePercentRadius","transformHeight","hasHeight","resolveNodePercentHeight","getPageArea","resolvePercentHeight","isLink","hasRenderProp","hasTextInstanceChilds","resolveLinkSubstitution","resolveAbsoluteCoordinates","origin","resolvePageSizeStyle","assocIfNil","resolvePageSizes","asyncCompose","resolveOrigins","timeEnd","endTimer","time","startTimer","p","all","resolvePagePaddings","initialY","PDFRenderer","render","addPage","PROTOCOL_REGEXP","note","KAPPA","sqrt","rtr","ctr","rbr","cbr","rbl","cbl","rtl","ctl","closePath","isNumeric","isNaN","isFinite","applyContainObjectFit","cw","ch","iw","ih","px","py","cr","ir","pxp","pyp","pxv","pyv","xOffset","applyNoneObjectFit","resolveObjectFit","applyCoverObjectFit","containDimension","noneDimension","applyScaleDownObjectFit","applyFillObjectFit","objectFit","drawImage","clipNode","availableMethods","defaultsZero","availableWidth","availableHeight","prop","painter","range","steps","matchPercentage","renderVerticalRuler","hRange","horizontalRulerSteps","rulerSteps","percentage","getVerticalSteps","step","round","renderHorizontalRuler","verticalRulerSteps","getHorizontalSteps","root","getProp","or","getDocumentProp","setProp","info","setPDFMetadata","title","author","subject","keywords","creator","producer","shouldDebug","debugContent","debugPadding","debugMargin","roundedWidth","roundedHeight","debugText","debugOrigin","shouldRenderBorders","c0","topRightYCoord","innerTopRightRadiusX","innerTopRightRadiusY","c1","c2","innerTopLeftRadiusX","innerTopLeftRadiusY","c3","c4","topLeftYCoord","c5","trSlope","clipBorderTop","space","undash","fillBorderTop","topBottomXCoord","innerBottomRightRadiusX","innerBottomRightRadiusY","topRightXCoord","brSlope","clipBorderRight","fillBorderRight","bottomLeftYCoord","innerBottomLeftRadiusX","innerBottomLeftRadiusY","bottomRightYCoord","clipBorderBottom","fillBorderBottom","topLeftCoordX","bottomLeftXCoord","clipBorderLeft","fillBorderLeft","shouldRenderBackground","drawBackground","getTranslateX","transform","matchX","matchGeneric","getTranslateY","matchY","getScaleX","getScaleY","applySingleTransformation","PI","getRotation","getMatrix","re","renderNode","renderChildren","renderDebug","renderText","renderLink","renderNote","renderImage","renderCanvas","renderBorders","renderBackground","applyTransformations","renderPage","renderRoot","renderRulers","renderDocument","addMetadata","hairlineWidth","absoluteFillObject","View","Text","Link","Page","Note","Image","Document","pdf","input","_isDirty","onChange","ReactFiberReconciler","supportsMutation","appendInitialChild","parentInstance","createInstance","createTextInstance","rootContainerInstance","finalizeInitialChildren","getPublicInstance","prepareForCommit","prepareUpdate","oldProps","newProps","resetAfterCommit","c","resetTextContent","getRootHostContext","getChildHostContext","shouldSetTextContent","now","Date","useSyncScheduling","appendChild","appendChildToContainer","insertBefore","beforeChild","indexOf","splice","removeChild","removeChildFromContainer","commitTextUpdate","textInstance","oldText","newText","commitUpdate","updatePayload","createRenderer","mountNode","createContainer","updateContainer","PDFDocument","autoFirstPage","layoutDocument","renderPDF","doc","isDirty","renderWithContext","toBlob","stream","pipe","BlobStream","on","blob","renderToStream","toBuffer","finish","renderToFile","filePath","output","createWriteStream","throwEnvironmentError","PDFViewer","PDFDownloadLink","BlobProvider","version","StyleSheet"],"mappings":"wjDAQA,MAAMA,GAAa,CAACC,EAAGC,WACfC,EAAeC,OAAOC,KAAKJ,GAC3BK,EAAeF,OAAOC,KAAKH,MAE7BC,EAAaI,SAAWD,EAAaC,cAChC,MAGJ,IAAIC,EAAI,EAAGA,EAAIL,EAAaI,OAAQC,IAAK,OACtCC,EAAWN,EAAaK,MAEb,WAAbC,MAOa,aAAbA,GAA2BR,EAAEQ,KAAcP,EAAEO,GAAW,IAEjC,iBAAhBR,EAAEQ,IACc,iBAAhBP,EAAEO,IACTT,GAAWC,EAAEQ,GAAWP,EAAEO,oBAKrB,KAIM,aAAbA,IACwB,iBAAhBR,EAAEQ,IAAiD,iBAAhBP,EAAEO,WAEtCR,EAAEQ,KAAcP,EAAEO,YAtBpBR,EAAEQ,KAAeP,EAAEO,UACf,SAyBN,GCvCHC,GAAc,GCMPC,GAAe,CAC1BC,KAAM,IACNC,SAAU,IACVC,WAAY,IACZC,WAAY,IACZC,MAAO,IACPC,OAAQ,IACRC,OAAQ,IACRC,SAAU,IACVC,SAAU,IACVC,KAAM,IACNC,UAAW,IACXC,UAAW,IACXC,MAAO,IACPC,MAAO,KClBHC,GAAgBC,EALE,iCAMlBC,GAAsBD,EALE,iCAMxBE,GAAuBF,EALE,8CAMzBG,GAAuBH,EALE,kEAOzBI,GAAoBC,GAAOA,EAAIC,MAAM,eAErCC,GAAgB,CAACF,EAAKG,IAC1BH,EAAIC,MAAM,sDACO,iBAAVE,EAEHC,GAAkB,CAACJ,EAAKG,IAC5BH,EAAIC,MAAM,wBAA2C,iBAAVE,EAEvCE,GAAwB,CAACL,EAAKG,IAClCH,EAAIC,MAAM,oBAAuC,iBAAVE,EAEnCG,GAAyB,CAACN,EAAKG,IACnCH,EAAIC,MAAM,qBAAwC,iBAAVE,EAEpCI,GAAiB,CAACP,EAAKG,WACrBF,EAAQJ,GAAqBM,MAE/BF,EAAO,IACLD,EAAIC,MAAM,iBACLA,EAAM,GACR,GAAID,EAAIC,MAAM,iBACZA,EAAM,GACR,GAAID,EAAIC,MAAM,iBACZA,EAAM,SAEP,IAAIO,8BAA8BL,WAAeH,aAIpDG,GAGHM,GAAkB,CAACT,EAAKG,WACtBF,EAAQP,GAAcS,MAExBF,EAAO,IACLD,EAAIC,MAAM,eACLA,EAAM,GACR,GAAID,EAAIC,MAAM,iBACZA,EAAM,IAAMA,EAAM,GACpB,GAAID,EAAIC,MAAM,kBACZA,EAAM,IAAMA,EAAM,GACpB,GAAID,EAAIC,MAAM,gBACZA,EAAM,IAAMA,EAAM,IAAMA,EAAM,SAE/B,IAAIO,8BAA8BL,WAAeH,aAIpDG,GAGIO,GAAoB,CAACV,EAAKG,IAChCA,EACgB,iBAAVA,EAA2BA,EAC/BxB,GAAawB,EAAMQ,eAFPhC,GAAaM,OAKrB2B,GAAwB,CAACZ,EAAKG,WACnCF,EAAQL,GAAoBO,MAE9BF,EAAO,IACLD,EAAIC,MAAM,aACLA,EAAM,GACR,GAAID,EAAIC,MAAM,aACZA,EAAM,SAEP,IAAIO,8BAA8BL,WAAeH,aAIpDG,GAmBHU,GAAyB,CAACb,EAAKG,WAC7BF,EAAQH,GAAqBK,MAE/BF,EAAO,KACLa,KAEAd,EAAIC,MAAM,MACZa,EAASb,EAAM,OACV,CAAA,IAAID,EAAIC,MAAM,YAGb,IAAIO,8BAA8BL,WAAeH,MAFvDc,EAASb,EAAM,IAAMA,EAAM,SAzBDE,CAAAA,WACtBA,OACD,UACA,aACI,SACJ,YACA,eACI,WACJ,eACI,qBAEAA,IAmBFY,CAAwBD,UAG1BX,GAGHa,GAAcrB,EAClBA,EAAKsB,QACLtB,EACEA,EAAaA,GACbA,EAAQ,mBAINuB,GAAYvB,EAAOqB,GAAaG,GAAKC,WAAWD,EAAG,KAEnDE,GAAkBC,UAChBC,EAAanD,OAAOC,KAAKiD,GACzBE,EAAgB,OAEjB,IAAIhD,EAAI,EAAGA,EAAI+C,EAAWhD,OAAQC,IAAK,OACpCwB,EAAMuB,EAAW/C,GACjB2B,EAAQmB,EAAMtB,GAEpBwB,EAAcxB,GAAOL,EACnBuB,GACAvB,EAAO,CACL,CAACO,GAAeK,IAChB,CAACH,GAAiBK,IAClB,CAACJ,GAAuBO,IACxB,CAACN,GAAwBO,IACzB,CAACd,GAAmBW,IACpB,CAACf,EAAKA,EAASQ,MARER,CAUnBK,EAAKG,UAGFqB,GCtJHC,GAAYC,MAAOC,EAAKC,WACtBC,QAAiBC,GAAMH,EAAKC,GAE5BG,QAAgBF,EAASE,OAC3BF,EAASE,SACTF,EAASG,qBAEsB,WAA5BD,EAAOE,YAAYC,KAAoBH,EAASI,OAAOC,KAAKL,IAGrE,MAAMM,GACJJ,YAAYN,EAAKW,EAAYC,EAAWC,EAAYZ,QAC7CD,IAAMA,OACNW,WAAaA,OACbC,UAAYA,GAAa,cACzBC,WAAa9B,GAAkB8B,IAAe,SAE9CC,KAAO,UACPC,SAAU,OACVd,QAAUA,uBAIVc,SAAU,EAEXC,GAAiBC,KAAKjB,KAAM,OACxBkB,QAAEA,EAAFC,KAAWA,EAAXC,OAAiBA,EAAS,OAAUH,KAAKhB,QACzCa,QAAahB,GAAUmB,KAAKjB,IAAK,CAAEoB,OAAAA,EAAQD,KAAAA,EAAMD,QAAAA,SAClDJ,KAAOO,GAAQC,OAAOR,aAEtBA,WAAa,IAAIS,QAAQ,CAACC,EAASC,IACtCJ,GAAQK,KAAKT,KAAKjB,IAAK,CAAC2B,EAAKb,IAC3Ba,EAAMF,EAAOE,GAAOH,EAAQV,UAK7BC,SAAU,GAInB,MAAMa,iBACUC,UACL,IAAID,GAAKC,GAGlBvB,YAAYuB,QACLA,OAASA,OACTC,QAAU,GAGjBC,UAAS/B,IAAEA,EAAFa,WAAOA,EAAPD,UAAmBA,KAAcX,SACnC6B,QAAQE,KACX,IAAItB,GAAWV,EAAKiB,KAAKN,WAAYC,EAAWC,EAAYZ,IAIhEuB,QAAQS,SACApB,WAAEA,EAAa,IAAfD,UAAoBA,EAAY,UAAaqB,EAC7CC,EAAejB,KAAKa,QAAQK,OAAOC,GAAKA,EAAExB,YAAcA,GAGxDyB,EAAWH,EAAaI,KAAKF,GAAKA,EAAEvB,aAAeA,MAErDwB,EAAU,OAAOA,MAEjBE,KAEA1B,GAAc,KAAOA,GAAc,IAAK,OACpC2B,EAAaN,EAAaC,OAAOC,GAAKA,EAAEvB,YAAcA,GACtD4B,EAAcP,EAAaC,OAAOC,GAAKA,EAAEvB,WAAa,KAK5D0B,EAJYL,EAAaC,OACvBC,GAAKA,EAAEvB,YAAcA,GAAcuB,EAAEvB,WAAa,KAG1C,IAAM2B,EAAWA,EAAW5F,OAAS,IAAM6F,EAAY,SAG7DC,EAAKR,EAAaC,OAAOC,GAAKA,EAAEvB,WAAaA,GAC7C8B,EAAKT,EAAaC,OAAOC,GAAKA,EAAEvB,WAAaA,MAE/CA,EAAa,MACf0B,EAAMG,EAAGA,EAAG9F,OAAS,IAAM+F,EAAG,IAG5B9B,EAAa,MACf0B,EAAMI,EAAG,IAAMD,EAAGA,EAAG9F,OAAS,KAG3B2F,QACG,IAAI1D,oCAENoC,KAAKN,0BACSE,YAIb0B,GCvGX,IAAIK,GAQJ,OAAe,CACbC,oBAPiC,EAAGC,IAAAA,EAAKC,OAAAA,EAAS,UAClDH,GAAc,CAAEE,IAAAA,EAAKC,OAAAA,IAOrBC,eAJ4B,IAAMJ,OCNrB,CACb,UACA,eACA,kBACA,YACA,iBACA,oBACA,cACA,aACA,gBCTF,IAAIK,GAQJ,OAAe,CACbC,4BAPyCC,IACzCF,GAAsBE,GAOtBC,uBAJoC,IAAMH,ICO5C,MAEMI,GAFmC,eAAzBC,QAAQC,IAAIC,SAGxB,CAACC,EAAWV,KAAWW,aACNC,IAAXZ,QACI,IAAIlE,MACR,6EAIC4E,GAvBX,SAAsBV,KAAWW,OAC3BE,EAAW,QACTC,EAAU,YAAcd,EAAOe,QAAQ,MAAO,IAAMJ,EAAKE,MAExC,oBAAZG,SACTA,QAAQC,MAAMH,aAIR,IAAIhF,MAAMgF,GAChB,MAAOI,KAcHC,CAAanB,KAAWW,IAG5B,OCrBJ,IAAIS,GAAQ,GAEZ,MAgCMC,GAAUnC,UACRtB,WAAEA,GAAesB,KACJoC,GAAcC,SAAS3D,GAE1B,OAAO,SAElBwD,GAAMxD,SACH,IAAI9B,qCACuB8B,gEAI5BwD,GAAMxD,GAAYa,QAAQS,IA6BnC,OAAe,CACbF,SA1Ee,CAAC/B,EAAKc,KACF,iBAARd,EACTc,EAAOd,GAEPqD,IACE,EACA,mKAGFvC,EAAKd,IAAMA,SAGP6B,OAAEA,GAAWf,KAEdqD,GAAMtC,KACTsC,GAAMtC,GAAU0C,GAAKjD,OAAOO,IAI1Bf,EAAKqD,UACF,IAAItH,EAAI,EAAGA,EAAIiE,EAAKqD,MAAMvH,OAAQC,IACrCsH,GAAMtC,GAAQE,SAAS,CAAEF,OAAAA,KAAWf,EAAKqD,MAAMtH,UAGjDsH,GAAMtC,GAAQE,SAASjB,IAmDzB0D,mBA/CyB,IAAML,GAgD/BM,0BA9CgC,IAAMhI,OAAOC,KAAKyH,IA+ClDC,QAAAA,GACAM,KA/BW3E,eAAekC,SACpBtB,WAAEA,GAAesB,KACJoC,GAAcC,SAAS3D,GAE1B,aAEV4D,EAAOH,GAAQnC,GAGhBsC,EAAKzD,MAASyD,EAAKxD,eAChBwD,EAAKG,QAsBbC,MAVY,WACZR,GAAQ,IAURS,MAnBY,eACP,MAAML,KAAQJ,GACbA,GAAMU,eAAeN,KACvBJ,GAAMI,GAAMzD,KAAO,UAiBpBgE,MACAC,IChFL,MAAMC,GAAUhH,EAAS,ORLJ,SSHrBiH,GAAIC,QAAU,SAASpE,eAEV,IAAImE,GAAInE,GACjB,MAAOqE,UACA,ICJX,MAAMC,GAAU,CACd,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OAGF,MAAMC,GAKJ/E,YAAYQ,WAJZA,KAAO,UACPwE,MAAQ,UACRC,OAAS,UAGFzE,KAAOA,EAEiB,QAAzBA,EAAK0E,aAAa,SACd,IAAI3G,MAAM,6BAGd4G,EACAC,EAAM,OAEHA,EAAM5E,EAAKlE,SAChB6I,EAAS3E,EAAK0E,aAAaE,GAC3BA,GAAO,GACHN,GAAQd,SAASmB,KAGrBC,GAAO5E,EAAK0E,aAAaE,OAGtBN,GAAQd,SAASmB,SACd,IAAI5G,MAAM,iBAGlB6G,GAAO,OACFH,OAASzE,EAAK0E,aAAaE,GAEhCA,GAAO,OACFJ,MAAQxE,EAAK0E,aAAaE,IAInCL,GAAKH,QAAU,SAASpE,OACjBA,IAASN,OAAOmF,SAAS7E,IAAkC,QAAzBA,EAAK0E,aAAa,UAChD,MAGLC,EACAC,EAAM,OAEHA,EAAM5E,EAAKlE,SAChB6I,EAAS3E,EAAK0E,aAAaE,GAC3BA,GAAO,GACHN,GAAQd,SAASmB,KAGrBC,GAAO5E,EAAK0E,aAAaE,WAGtBN,GAAQd,SAASmB,ICzExB,MCSaG,GDTO,GAAGC,MAAAA,EAAQ,KAAQ,UACjCC,EAAQ,GACRpJ,EAAO,SAEJ,CACLqJ,IAAK1H,GAAOyH,EAAMzH,GAClB2H,IAAK,CAAC3H,EAAKG,KACT9B,EAAKsF,KAAK3D,GACN3B,EAAKE,OAASiJ,UACTC,EAAMpJ,EAAKuJ,SAEpBH,EAAMzH,GAAOG,GAEfoG,MAAO,KACLkB,EAAQ,GACRpJ,EAAO,IAETE,OAAQ,IAAMF,EAAKE,SCRIsJ,CAAY,CAAEL,MAAO,KAEnCM,GAAuBnG,UAK5BoG,SAAEA,EAAFC,KAAYA,EAAZC,KAAkBA,EAAlBC,KAAwBA,EAAxBC,SAA8BA,EAAUC,KAAMC,GAAa5D,GAAI6D,MACnE3G,GAEI4G,EAAeH,GAAKjF,QAAQkF,QAC7BN,GAAyB,UAAbA,GAAyBC,GAAQC,GAAQC,GAAQC,UAG3DI,GAmDT,SAASC,GAAS1F,EAAM2F,UACdA,EAAU9H,mBACX,UACA,cACI,IAAIqG,GAAKlE,OACb,aACI,IAAI8D,GAAI9D,kBAER,MAIb,MAsBM4F,GAAqB3G,UACnB2C,EAlDY3C,CAAAA,QACd2C,SAEAsC,GAAKH,QAAQ9E,GACf2C,EAAS,MACAkC,GAAIC,QAAQ9E,KACrB2C,EAAS,OAGJA,GAyCQiE,CAAY5G,MAEvB2C,SACK,IAAIxB,QAAQC,GAAWA,EAAQqF,GAASzG,EAAQ2C,MA6BrDkE,GAAsBlH,MAAAA,UACpBmH,IAAEA,EAAF/F,KAAOA,EAAPD,QAAaA,EAAbE,OAAsBA,EAAS,OAAUpB,EAEzCc,EACQqF,GAAqBe,QAvHdlH,CAAAA,GACrB,IAAIuB,QAAQ,CAACC,EAASC,eAKZmF,EAAeT,GAAqBnG,OACrC4G,SACInF,EAAO,IAAI5C,sCAAsCmB,MAE1DmH,EAAGC,SAASR,EAAc,CAACjF,EAAKb,IAC9Ba,EAAMF,EAAOE,GAAOH,EAAQV,IAE9B,MAAOa,GACPF,EAAOE,MA0GC0F,CAAeH,QAtGLnH,OAAOmH,EAAKjH,WAC5BC,QAAiBC,GAAM+G,EAAKjH,GAE5BG,QAAgBF,EAASE,OAC3BF,EAASE,SACTF,EAASG,qBAEsB,WAA5BD,EAAOE,YAAYC,KAAoBH,EAASI,OAAOC,KAAKL,IAgGvDkH,CAAgBJ,EAAK,CAAE/F,KAAAA,EAAMD,QAAAA,EAASE,OAAAA,WAI3CyF,GAAS/F,EAnCKK,CAAAA,UACfoG,EACQ,MAAZpG,EAAK,IACO,KAAZA,EAAK,IACO,KAAZA,EAAK,IACO,KAAZA,EAAK,IACO,KAAZA,EAAK,IACO,KAAZA,EAAK,IACO,KAAZA,EAAK,IACO,KAAZA,EAAK,GAEDqG,EAAoB,MAAZrG,EAAK,IAA0B,MAAZA,EAAK,IAA0B,MAAZA,EAAK,OAErD2F,EAAY,MACZS,EACFT,EAAY,UACP,CAAA,IAAIU,QAGH,IAAI3I,MAAM,6BAFhBiI,EAAY,aAKPA,GAWWW,CAAe3G,KAK7B4G,GAAe,CAAC1H,GAAO8F,MAAAA,GAAQ,GAAS,YACtC6B,EAAW3H,EAAIc,KAAOd,EAAIc,KAAK8G,WAAa5H,EAAIkH,OAElDpB,GAASF,GAAYG,IAAI4B,UACpB/B,GAAYG,IAAI4B,OAGrBE,OAEFA,EA5FuB,GAAGX,IAAAA,KAC5B,uCAAuCY,KAAKZ,GA0FxCa,CAAmB/H,GA5EE,GAAGkH,IAAAA,YACtB5I,EAAQ,2CAA2C0J,KAAKd,GACxDnE,EAASzE,EAAM,GACfwC,EAAOxC,EAAM,OAnCCyE,CAAAA,UACdkF,EAAQlF,EAAO/D,oBACJ,QAAViJ,GAA6B,SAAVA,GAA8B,QAAVA,GAmCzCC,CAAcnF,SACX,IAAIlE,sCAAsCkE,YAG3C,IAAIxB,QAAQC,GACVA,EAAQqF,GAASrG,OAAOC,KAAKK,EAAM,UAAWiC,MAmE7CoF,CAAmBnI,GAClBQ,OAAOmF,SAAS3F,GACjB+G,GAAmB/G,GACH,iBAARA,GAAoBA,EAAIc,KAlEfd,CAAAA,OACvBA,EAAIc,MAAQd,EAAI+C,cACX,IAAIxB,QAAQC,GAAWA,EAAQqF,GAAS7G,EAAIc,KAAMd,EAAI+C,gBAGzD,IAAIlE,4CAA4CuJ,KAAKC,UAAUrI,OA8D3DsI,CAAqBtI,GAErBiH,GAAoBjH,UAItB,IAAInB,MAAM,+BAGdiH,GACFF,GAAYI,IAAI2B,EAAUE,GAGrBA,GC5KHU,GAAYvK,EAChBA,EAAOA,EAAKsB,QAASU,KAAUkH,IAAKlH,KACpChC,EAASA,EAAO,CAAC,QAAS,QAASA,EAAO,CAAC,QAAS,aCNhDwK,GAAazI,MAAAA,UACXC,EAAMuI,GAAUE,IAChB3C,MAAEA,GAAU2C,EAAKC,SAElB1I,MAMHyI,EAAKZ,YAAcH,GAAa1H,EAAK,CAAE8F,MAAAA,IACvC,MAAOX,GACPsD,EAAKZ,MAAQ,CAAEvC,MAAO,EAAGC,OAAQ,GACjCxB,QAAQ4E,KAAKxD,EAAEtB,cARfR,IAAQ,EAAO,yDCFbuF,GAAS,GACTC,GAAQC,KAKRC,GAAsB,IAHZC,CAAAA,GAAW,IAAItF,IAASsF,KAAWtF,GAAMuF,KAAKzJ,GAAKA,EAAG2F,GAAKA,GAGzC+D,CAAQxB,IAYpCyB,GAAiBlF,GAAW,MAANA,EAQtBmF,GAAgBtE,UACdhC,IAAEA,EAAFC,OAAOA,GAAWnB,GAAKoB,0BACnBF,IARUuG,CAAAA,GACpBC,MAAM7I,KAAK4I,GACRlH,OAAOgH,IACPI,IAAIC,GAAQA,EAAKC,YAAY,GAAG7B,SAAS,KACzC8B,KAAK,KAIQC,CAAc7E,MAAU/B,KAG7B6G,GAAcP,UACnBzG,EAAchB,GAAKoB,qBAEpBJ,IAAgBA,EAAYE,IAAK,MAAO,SAEvC+G,EAAW,OAEbvL,OACIA,EAAQuK,GAAMb,KAAKqB,IAAU,OAC7BvE,EAAQxG,EAAM,OAEfsK,GAAO9D,IAAU8D,GAAO9D,GAAO/D,QAAS,OACrC+I,EAAWV,GAActE,GAE/B8D,GAAO9D,GAAS,CAAE/D,SAAS,SACrBgJ,EAAkBhB,KACxBc,EAAS7H,KACP+H,EAAgB,CAAE7C,IAAK4C,IAAYb,KAAKpB,IACtCe,GAAO9D,GAAO/D,SAAU,EACxB6H,GAAO9D,GAAOhE,KAAO+G,EAAM/G,gBAM5B+I,GClDHG,GAAcvB,UACZoB,EAAW,GACXI,EAAgBxB,EAAKyB,SAASC,MAAM,QAEnCF,EAAcrN,OAAS,GAAG,OACzB6L,EAAOwB,EAAchE,QAEvBjB,GAAQyD,IACVoB,EAAS7H,KAAKwG,GAAWC,IAGvBA,EAAK9I,OAAS8I,EAAK9I,MAAMgB,YAC3BkJ,EAAS7H,KAAKJ,GAAK8C,KAAK+D,EAAK9I,QAGX,iBAAT8I,GACToB,EAAS7H,QAAQ4H,GAAYnB,IAGL,iBAAfA,EAAKjK,OACdqL,EAAS7H,QAAQ4H,GAAYnB,EAAKjK,QAGhCiK,EAAKyB,UACPzB,EAAKyB,SAASE,QAAQC,IACpBJ,EAAcjI,KAAKqI,YAKlBR,GCnCHS,GAAUtM,EAASuM,SAQnBC,GAAUxM,EAAKsL,OAQfmB,GAAazM,EAAawM,IAQ1BE,GAAY1M,EAAOyM,GAAYjL,GAAK,CAACA,IA2BrCmL,GAAU3M,EAnBI4M,GAClBA,EAAOC,OAAO,CAACC,EAAKnL,WACZyC,EAAIoI,GAAQ7K,GAASgL,GAAQhL,GAASA,SAE5ClD,OAAOC,KAAK0F,GAAGgI,QAAQ/L,IACN,OAAX+D,EAAE/D,SAA4BsF,IAAXvB,EAAE/D,KACvByM,EAAIzM,GAAO+D,EAAE/D,MAIVyM,GACN,IAUHR,GACAI,IC5DI7F,GAAiBpI,OAAOsO,UAAUlG,eAKlCmG,GAAkB,CACtBC,OAAQ,CACNC,WAAW,EACXC,aAAa,EACbC,cAAc,EACdC,YAAY,GAEdC,iBAAkB,CAChBD,YAAY,EACZF,aAAa,GAEfI,eAAgB,CACdL,WAAW,EACXE,cAAc,GAEhBI,QAAS,CACPC,YAAY,EACZC,cAAc,EACdC,eAAe,EACfC,aAAa,GAEfC,kBAAmB,CACjBD,aAAa,EACbF,cAAc,GAEhBI,gBAAiB,CACfL,YAAY,EACZE,eAAe,GAEjBI,OAAQ,CACNC,gBAAgB,EAChBC,gBAAgB,EAChBC,gBAAgB,EAChBC,kBAAkB,EAClBC,kBAAkB,EAClBC,kBAAkB,EAClBC,mBAAmB,EACnBC,mBAAmB,EACnBC,mBAAmB,EACnBC,iBAAiB,EACjBC,iBAAiB,EACjBC,iBAAiB,GAEnBC,UAAW,CACTZ,gBAAgB,EAChBC,gBAAgB,EAChBC,gBAAgB,GAElBW,YAAa,CACXV,kBAAkB,EAClBC,kBAAkB,EAClBC,kBAAkB,GAEpBS,aAAc,CACZR,mBAAmB,EACnBC,mBAAmB,EACnBC,mBAAmB,GAErBO,WAAY,CACVN,iBAAiB,EACjBC,iBAAiB,EACjBC,iBAAiB,GAEnBK,YAAa,CACXhB,gBAAgB,EAChBG,kBAAkB,EAClBG,mBAAmB,EACnBG,iBAAiB,GAEnBQ,aAAc,CACZC,qBAAqB,EACrBC,sBAAsB,EACtBC,yBAAyB,EACzBC,wBAAwB,GAE1BC,YAAa,CACXrB,gBAAgB,EAChBG,kBAAkB,EAClBG,mBAAmB,EACnBG,iBAAiB,GAEnBa,YAAa,CACXrB,gBAAgB,EAChBG,kBAAkB,EAClBG,mBAAmB,EACnBG,iBAAiB,GAEnBa,eAAgB,CACdC,iBAAiB,EACjBC,iBAAiB,GAEnBC,gBAAiB,CACfC,kBAAkB,EAClBC,kBAAkB,IAIhBC,GAAe9P,EAAOgN,IAQtB+C,GAAepO,QACdA,EAAO,OAAOA,QAEbC,EAAanD,OAAOC,KAAKiD,GACzBE,EAAgB,OAEjB,IAAIhD,EAAI,EAAGA,EAAI+C,EAAWhD,OAAQC,IAAK,OACpCwB,EAAMuB,EAAW/C,GACjB2B,EAAQmB,EAAMtB,MAEhBL,EAAWK,EAAKyP,IAAe,OAC3BE,EAAgBhD,GAAgB3M,OACjC,MAAMvB,KAAYkR,EACjBnJ,GAAeoJ,KAAKD,EAAelR,KACrC+C,EAAc/C,GAAY0B,QAI9BqB,EAAcxB,GAAOG,SAIlBqB,GC9GHqO,GAAgBlQ,EAAS,EAAG,CAACmQ,EAAW3P,WACtC4P,EAfW5P,CAAAA,UACXF,EAAQ,uCAAuC0J,KAAKxJ,UACnDF,EACH,CAAEE,MAAOiB,WAAWnB,EAAM,GAAI,IAAK+P,KAAM/P,EAAM,IAAM,MACrD,CAAEE,MAAAA,EAAO6P,UAAM1K,IAWJ2K,CAAW9P,UAClB4P,EAAOC,UACR,YnBjBU,GmBkBND,EAAO5P,UACX,YACI4P,EAAO5P,OAAS,EAAI,MnBpBd,OmBqBV,YACI4P,EAAO5P,OAAS,EAAI,MnBtBd,OmBuBV,YACI4P,EAAO5P,OAAS2P,EAAU5I,OAAS,SACvC,YACI6I,EAAO5P,OAAS2P,EAAU7I,MAAQ,oBAElC8I,EAAO5P,SAepB,OAAeR,EAAS,EAHD,CAACmQ,EAAWvD,IACjC5M,EAAMkQ,GAAcC,GAAYvD,IC7BlC,OAAe5M,EAAS,EAbI,CAACmQ,EAAWvD,IAC/BnO,OAAOC,KAAKkO,GAAQC,OAAO,CAACC,EAAKzM,IAClC,SAASyJ,KAAKzJ,GACT,IACFyM,KACAyD,GAAW,EAAGlQ,GAAMuM,EAAOvM,IAAQ8P,IAInC,IAAKrD,GAAMzM,GAAMuM,EAAOvM,IAC9B,KCJL,MAAMmQ,GAAgBL,GACpBnQ,EACEyQ,GAAeN,GACfzO,GACAqO,GACAW,GAAoBP,GACpBQ,IAUEC,GAAoBC,GAAQpG,UAC1B0F,EAAYnQ,EAAS,GAAI,MAAO6Q,UAE/B7Q,EAAS,CACd2B,MAAO6O,GAAcL,GACrBjE,SAAUlM,EAAM4Q,GAAkBC,KAF7B7Q,CAGJyK,IA6BL,OAAezK,EAAS,CACtBkM,SAAUlM,EACRA,EAAS,CACPkM,SAAUlM,EAvBU6Q,UAClBC,EAAU9Q,EAAS,GAAI,MAAO6Q,UAE7B7Q,EAAS,CACdkM,SAAUlM,EAAM4Q,GAAkBC,IAClClP,MAAO3B,EACLyQ,GAAeK,GACfpP,GACAqO,GACAY,KANG3Q,CAQJ6Q,UCjDL,MAAME,GAAgBtG,GACpBzK,EAAS,CACPkM,SAAUlM,EACRA,EAAM+Q,IACN/Q,EAASA,EAAO,CAAC,QAAS,cAH9BA,CAKGyK,GCNCuG,GAAmBhR,EACvBA,EAAU,CAAC,QAAS,UACpBA,EAAU,CAAC,QAAS,mBCFhBiR,GAAqBjR,EACzBA,EAAU,CAAC,QAAS,UACpBA,EAAU,CAAC,QAAS,qBCEhBkR,GAAiBlR,EACrBA,EACEgR,GACAhR,EAAS,CACPmR,IAAK,CAAE5J,OAAQvH,EzBqFM,KyBpFrBkM,SAAUlM,EACRA,EAAS,CACPmR,IAAK,CAAEC,IAAKpR,EzBkFK,WyB7EzBA,EACEiR,GACAjR,EAAS,CACPmR,IAAK,CAAE7J,MAAOtH,EzB0EO,KyBzErBkM,SAAUlM,EACRA,EAAS,CACPmR,IAAK,CAAEE,KAAMrR,EzBuEI,YyB1DrBsR,GAAgBtR,EAAS,CAC7BkM,SAAUlM,EACRA,EAAS,CACPkM,SAAUlM,EAAMkR,SCtChBK,GAAe/Q,UACbF,EATUE,CAAAA,GAAS,oBAAoBwJ,KAAKxJ,GASpCgR,CAAUhR,MAEpBF,EAAO,OACHE,EAAQiB,WAAWnB,EAAM,GAAI,IAC7BmR,EAAUjR,EAAQ,UAEjB,CACLA,MAAAA,EACAiR,QAAAA,EACAC,SAAUC,KAAKC,IAAIpR,GACnBqR,WAAYF,KAAKC,IAAIH,WAIlB,MCnBHK,GAAoB1N,GAAKpE,EAAS,MAAO,CAAC,QAASoE,IAQnD2N,GAAYtH,QACXA,EAAK0G,IAAK,MAAO,SAEhBE,KAAEA,EAAFD,IAAQA,EAAR9J,MAAaA,EAAbC,OAAoBA,GAAWkD,EAAK0G,IACpCvB,EAAmBkC,GAAkB,mBAAlBA,CAAsCrH,GACzDoF,EAAmBiC,GAAkB,mBAAlBA,CAAsCrH,GAEzDuH,EAAWT,GAAa3B,GACxBqC,EAAWV,GAAa1B,SAKvB,CAAEwB,KAAMA,GAHCW,EAAW1K,EAAQ0K,EAASP,QAAU7B,GAGvBwB,IAAKA,GAFpBa,EAAW1K,EAAS0K,EAASR,QAAU5B,KCbnDqC,GAAoBzH,GACxBzK,EACEA,EAAS,CAAEkM,SAAUlM,EAAMkS,MAC3BlS,EAAWA,EAAQ,UAAW,CAAC+R,GAAW/R,IAF5CA,CAGEyK,GAQE0H,GAAgBnS,EAAS,CAC7BkM,SAAUlM,EACRA,EAAS,CACPkM,SAAUlM,EAAMkS,SCbhBE,GAAiBpS,EACrBA,EACEA,EAAWA,EAVY,C7B+EH,WACC,c6BrErBA,EACAA,E7BmEoB,a6BjEtBA,E7BiEsB,W6BjEH,CAAC,QAAS,iBCZzBqS,GAAcrS,EAClBA,E9B6EuB,a8B5EvBoS,ICGIE,GAAetS,EAAY,CAC/BsH,MAAOtH,EAAO,GACduH,OAAQvH,EAAO,KASXuS,GAAiBvS,EAAY,CACjCsH,MAAOtH,EAAO,UACduH,OAAQvH,EAAO,WASXwS,GAAgBxS,EACpBsS,GACAtS,EAAOA,E/BLiB,OACjB,CAAC,QAAS,eACV,CAAC,QAAS,SACjByS,GAAI,CAAC,QAAS,SACdC,GAAI,CAAC,QAAS,SACdC,GAAI,CAAC,QAAS,SACdC,GAAI,CAAC,OAAQ,SACbC,GAAI,CAAC,OAAQ,QACbC,GAAI,CAAC,OAAQ,QACbC,GAAI,CAAC,OAAQ,QACbC,GAAI,CAAC,OAAQ,QACbC,GAAI,CAAC,MAAO,QACZC,GAAI,CAAC,OAAQ,OACbC,IAAK,CAAC,KAAM,QACZC,GAAI,CAAC,QAAS,SACdC,GAAI,CAAC,QAAS,SACdC,GAAI,CAAC,QAAS,SACdC,GAAI,CAAC,QAAS,SACdC,GAAI,CAAC,OAAQ,SACbC,GAAI,CAAC,MAAO,QACZC,GAAI,CAAC,OAAQ,OACbC,GAAI,CAAC,OAAQ,QACbC,GAAI,CAAC,OAAQ,QACbC,GAAI,CAAC,OAAQ,QACbC,IAAK,CAAC,MAAO,QACbC,GAAI,CAAC,QAAS,SACdC,GAAI,CAAC,QAAS,SACdC,GAAI,CAAC,QAAS,SACdC,GAAI,CAAC,OAAQ,SACbC,GAAI,CAAC,OAAQ,QACbC,GAAI,CAAC,OAAQ,QACbC,GAAI,CAAC,OAAQ,QACbC,GAAI,CAAC,OAAQ,QACbC,GAAI,CAAC,OAAQ,QACbC,GAAI,CAAC,OAAQ,QACbC,IAAK,CAAC,MAAO,QACbC,IAAK,CAAC,OAAQ,SACdC,IAAK,CAAC,QAAS,QACfC,IAAK,CAAC,OAAQ,SACdC,IAAK,CAAC,OAAQ,QACdC,IAAK,CAAC,OAAQ,QACdC,KAAM,CAAC,QAAS,SAChBC,KAAM,CAAC,QAAS,SAChBC,KAAM,CAAC,QAAS,SAChBC,KAAM,CAAC,OAAQ,SACfC,KAAM,CAAC,MAAO,QACdC,UAAW,CAAC,OAAQ,KACpBC,MAAO,CAAC,IAAO,KACfC,MAAO,CAAC,IAAO,MACfC,OAAQ,CAAC,IAAO,KAChBC,QAAS,CAAC,IAAO,Q+B5CjBxV,GASIyV,GAAgBzV,EACpBsS,GACA9Q,GAAK,CAACA,IAQFkU,GAAoBC,UAClB,IAAI9U,4BAA4BuJ,KAAKC,UAAUsL,OCvCvD,OAAe3V,EAAS,EATL,CAACK,EAAKG,EAAOoV,IAC9B5V,EACEA,EACEA,EACAA,EAAOK,IAETL,EAAQK,EAAKG,GALfR,CAME4V,ICJG,MAAMC,GAAkBxV,GAAOwQ,UAC9B8E,EFqDQ9E,CAAAA,UACR8E,EAAO3V,EACXA,EAAO,CACL,CAACA,EAAKsB,QAASkR,IACf,CAACxS,EAAKsL,OAAQgH,IACd,CAACtS,EAAK8V,QAASL,IACf,CAACzV,EAAKvB,QAASuB,GACf,CAACA,EAAK0V,MAER1V,EAAS,KAAM,CAAC,QAAS,SARdA,CASX6Q,UAEKwB,GAAYxB,GAAQ0B,GAAeoD,GAAQA,GEjErCI,CAAYlF,UAClB7Q,EAAS,EAAGK,GAAML,EAAQA,EAAM2V,IAAhC3V,CAAyC6Q,ICX5CmF,GAAWhW,EAAaA,GAQxBiW,GAAY,IAAIC,IAAQ1V,QACxB+D,MAEC,MAAM4R,KAAMD,KACf3R,EAAM4R,EAAG3V,GACLwV,GAASzR,GAAM,OAAOA,SAGrBA,GCbH6R,GAAoBC,GAAQ5L,UAC1B6L,EAAW7L,EAAK8L,iBACfD,EAAWA,EAASF,kBAAkBC,GAAQ,MASjDG,GAAYxW,EAAY,CAC5BkN,UAAW+I,GACTG,GAAkBK,GAAKC,UACvB1W,EAAO,CAAC,MAAO,cACfA,EAAO,CAAC,QAAS,cACjBA,EAAO,CAAC,QAAS,mBACjBA,EAAO,CAAC,QAAS,WACjBA,EAAS,IAEXmN,YAAa8I,GACXG,GAAkBK,GAAKE,YACvB3W,EAAO,CAAC,MAAO,gBACfA,EAAO,CAAC,QAAS,gBACjBA,EAAO,CAAC,QAAS,qBACjBA,EAAO,CAAC,QAAS,WACjBA,EAAS,IAEXoN,aAAc6I,GACZG,GAAkBK,GAAKG,aACvB5W,EAAO,CAAC,MAAO,iBACfA,EAAO,CAAC,QAAS,iBACjBA,EAAO,CAAC,QAAS,mBACjBA,EAAO,CAAC,QAAS,WACjBA,EAAS,IAEXqN,WAAY4I,GACVG,GAAkBK,GAAKI,WACvB7W,EAAO,CAAC,MAAO,eACfA,EAAO,CAAC,QAAS,eACjBA,EAAO,CAAC,QAAS,qBACjBA,EAAO,CAAC,QAAS,WACjBA,EAAS,MC1CP8W,GAAqBT,GAAQ5L,UAC3B6L,EAAW7L,EAAK8L,iBACfD,EAAWA,EAASQ,mBAAmBT,GAAQ,MASlDU,GAAa/W,EAAY,CAC7ByN,WAAYwI,GACVa,GAAmBL,GAAKC,UACxB1W,EAAO,CAAC,MAAO,eACfA,EAAO,CAAC,QAAS,eACjBA,EAAO,CAAC,QAAS,oBACjBA,EAAO,CAAC,QAAS,YACjBA,EAAS,IAEX0N,aAAcuI,GACZa,GAAmBL,GAAKE,YACxB3W,EAAO,CAAC,MAAO,iBACfA,EAAO,CAAC,QAAS,iBACjBA,EAAO,CAAC,QAAS,sBACjBA,EAAO,CAAC,QAAS,YACjBA,EAAS,IAEX2N,cAAesI,GACba,GAAmBL,GAAKG,aACxB5W,EAAO,CAAC,MAAO,kBACfA,EAAO,CAAC,QAAS,kBACjBA,EAAO,CAAC,QAAS,oBACjBA,EAAO,CAAC,QAAS,YACjBA,EAAS,IAEX4N,YAAaqI,GACXa,GAAmBL,GAAKI,WACxB7W,EAAO,CAAC,MAAO,gBACfA,EAAO,CAAC,QAAS,gBACjBA,EAAO,CAAC,QAAS,sBACjBA,EAAO,CAAC,QAAS,YACjBA,EAAS,MC7CPgX,GAASV,GAAaA,EAAWA,EAASW,iBAAmB,EAC7DC,GAAWZ,GAAaA,EAAWA,EAASa,mBAAqB,EACjEC,GAAYd,GAAaA,EAAWA,EAASe,oBAAsB,EACnEC,GAAUhB,GAAaA,EAAWA,EAASiB,kBAAoB,EAQ/DC,GAAc/M,UACZ6L,EAAW7L,EAAK8L,iBAEfvW,EAAY,CACjBoR,IAAK4F,GACLS,MAAOP,GACPQ,OAAQN,GACR/F,KAAMiG,IAJDtX,CAKJsW,ICrBCqB,GAAoB,CACxBrQ,MAAO,EACPC,OAAQ,GASJqQ,GAAenN,UACb6L,EAAW7L,EAAK8L,iBAEjBD,EAEE,CACLhP,MAAOgP,EAASuB,mBAChBtQ,OAAQ+O,EAASwB,qBAJGH,ICXlBI,GAAoB1B,GAAQC,GAChCA,EAAWA,EAASyB,kBAAkB1B,GAAQ,EAQ1C2B,GAAiBvN,UACf6L,EAAW7L,EAAK8L,iBAEfvW,EAAY,CACjBkO,eAAgB6J,GAAkBtB,GAAKC,UACvCrI,iBAAkB0J,GAAkBtB,GAAKE,YACzCnI,kBAAmBuJ,GAAkBtB,GAAKG,aAC1CjI,gBAAiBoJ,GAAkBtB,GAAKI,YAJnC7W,CAKJsW,ICZC2B,GAAajY,EACjBA,EACAA,EACAA,EACEA,EAAO,IACPA,EAAO,CACLA,EACEA,EACAA,GAEFA,MCJAkY,GAAe,CAACC,EAAM9B,IAAS7V,GACnCR,EAAMyK,UACE6L,EAAW7L,EAAK8L,cAEjBvW,EAAQQ,IAAU8V,EAAU,OACzB8B,EAAUpY,EAAaA,EAAbA,CAAsBqW,GAChCgC,QAAoBJ,GAAWE,KAC/BG,KAAgBD,QAChBE,KAAmBF,WACnB5G,EAAUF,GAAa/Q,MAEzBiR,IAAY6E,EAASiC,SACjB,IAAI1X,6CAA6CsX,cAGrD1G,EACF2G,EACI9B,EAASiC,GAAelC,EAAM5E,EAAQjR,OACtC8V,EAASiC,GAAe9G,EAAQjR,OACjB,SAAVA,EACT4X,EAAU9B,EAASgC,GAAYjC,GAAQC,EAASgC,KAEhDF,EACI9B,EAAS+B,GAAahC,EAAM7V,GAC5B8V,EAAS+B,GAAa7X,MC7B5BgY,GAAUN,GAAa,QCEvBO,GAAczY,EAClBkY,GAAa,YACblY,EAAY,ICJR0Y,GAAeR,GAAa,aCI5BS,GAAWR,GAAQ3X,GACvBR,EAAMyK,UACE6L,EAAW7L,EAAK8L,aAElBD,EAAU,OACNsC,EAAY5Y,EAAO,CACvB,CAACA,EAAS,cAAeA,EAASyW,GAAKoC,mBACvC,CAAC7Y,EAAS,UAAWA,EAASyW,GAAKqC,eACnC,CAAC9Y,EAAS,YAAaA,EAASyW,GAAKsC,iBACrC,CAAC/Y,EAAS,WAAYA,EAASyW,GAAKuC,gBACpC,CAAChZ,EAAS,YAAaA,EAASyW,GAAKwC,iBACrC,CAACjZ,EAAS,iBAAkBA,EAASyW,GAAKyC,sBAC1C,CAAClZ,EAAS,gBAAiBA,EAASyW,GAAK0C,qBACzC,CAACnZ,EAAKA,EAASyW,GAAK2C,cARJpZ,CASfQ,GAEH8V,aAAoB2B,GAAWE,MAASS,MCpBxCS,GAAeV,GAAS,QCExBW,GAAgBtZ,EACpBkY,GAAa,cACblY,EAAY,ICJRuZ,GAAkBZ,GAAS,WCN3Ba,GAAQxZ,EAAS,OACjByZ,GAAezZ,EAAS,eACxB0Z,GAAkB1Z,EAAS,kBCOpB2Z,GAAezB,GAAa,SAAUzB,GAAKC,UAS3CkD,GAAiB1B,GAAa,SAAUzB,GAAKE,YAS7CkD,GAAkB3B,GAAa,SAAUzB,GAAKG,aAS9CkD,GAAgB5B,GAAa,SAAUzB,GAAKI,WC3B5CkD,GAAgB7B,GAAa,UAAWzB,GAAKC,UAS7CsD,GAAkB9B,GAAa,UAAWzB,GAAKE,YAS/CsD,GAAmB/B,GAAa,UAAWzB,GAAKG,aAShDsD,GAAiBhC,GAAa,UAAWzB,GAAKI,WC3B9CsD,GAAejC,GAAa,SAAUzB,GAAKC,UAS3C0D,GAAiBlC,GAAa,SAAUzB,GAAKE,YAS7C0D,GAAkBnC,GAAa,SAAUzB,GAAKG,aAS9C0D,GAAgBpC,GAAa,SAAUzB,GAAKI,WC3B5C0D,GAAiBrC,GAAa,WAAYzB,GAAKC,UAS/C8D,GAAmBtC,GAAa,WAAYzB,GAAKE,YASjD8D,GAAoBvC,GAAa,WAAYzB,GAAKG,aASlD8D,GAAkBxC,GAAa,WAAYzB,GAAKI,WC9BhD8D,GAAWzC,GAAa,SASxB0C,GAAc1C,GAAa,YAS3B2C,GAAc3C,GAAa,YAS3B4C,GAAY5C,GAAa,UASzB6C,GAAe7C,GAAa,aAS5B8C,GAAe9C,GAAa,aC5CnC+C,GAASjb,EAAS,OvDTJ,QwDSdkb,GAASlb,EAAS,OxDNJ,QyDMdmb,GAASnb,EAAS,OzDPJ,Q0DOdob,GAAWpb,EAAS,O1DHJ,U2DLtB,MAAMqb,GACJ/Y,YAAYN,QACLO,KAAOP,OACPA,IAAMsZ,EAAQ5X,KAAK,KAAM1B,GAGhCuZ,OAAOC,SACEC,EAASC,GAAazY,KAAKjB,IAAI2Z,OAAOH,SAEtC,CACLE,UAAAA,EACAE,cAAeF,EAAUnQ,IAAI,CAACsQ,EAAGhd,IAAMA,GACvCid,OAAQL,EAAQlQ,IAAI,CAACwQ,EAAGld,WAChBmd,EAAQ/Y,KAAKgZ,SAASC,SAASH,EAAG,YACxCC,EAAMG,aAAeT,EAAU7c,GAAGsd,aAC3BH,KAKbI,kBAAkBC,SACVL,EAAQ/Y,KAAKgZ,SAASI,UAC5BL,EAAMG,aAAe,IACdH,EAGTC,SAASK,SACA,CACLA,GAAAA,EACAC,MAAOtZ,KAAKjB,IACZwa,WAAY,CAACF,GACbG,YAAY,EACZla,KAAMU,KAAKjB,IAAIuE,KAAKmW,iBAAiBJ,IAIzCK,qBAAqBN,SACkC,YAA9CpZ,KAAKjB,IAAIuE,KAAKmW,iBAAiBL,uBAK/B,yBAKCpZ,KAAKV,UACN,kBACA,iBACA,sBACK,QACL,cACA,mBACA,yBACK,mBAEA,0BAKL,0BAIA,KChEX,MAAMqa,GAAY,GAEZC,GAAsB,CAAC,KAEvBC,GAAc9c,EAAS,GAAI,CAAC,aAAc,aAE1C+c,GAAkBxa,OAClBqa,GAAUra,GAAO,OAAOqa,GAAUra,SAEhCgE,EAAO,IAAI8U,GAAa9Y,UAC9Bqa,GAAUra,GAAQgE,EAEXA,GAGHyW,GAAkB,IAAMD,GAAgB,aAExCE,GAAuB,CAACZ,EAAW9V,KACtCsW,GAAoBvW,SAAS+V,KAC7B9V,EAAKoW,qBAAqBN,IAC3BW,KAAkBL,qBAAqBN,GCxBnCa,GAAuB,CAC3B,KACA,MCQIC,GAAiBnd,EAAS,O9DFH,iB+DEvBod,GAAgB,CFGKC,GACzBA,EAAU9R,IAAI+R,UACNC,EAViBhX,CAAAA,GACzB2W,GAAqBrQ,OAAO,CAACC,EAAKuP,IAC5B9V,EAAKoW,sBAAwBpW,EAAKoW,qBAAqBN,GAClDvP,EAEF,IAAIA,EAAKxL,OAAOkc,aAAanB,IACnC,IAIkBoB,CAAmBH,EAASI,WAAWnX,MACpDoX,EAAc,IAAIC,OAAOL,EAAW7R,KAAK,YAExC,CACLL,OAAQiS,EAASjS,OAAOvF,QAAQ6X,EAAa,IAC7CD,WAAYJ,EAASI,c9C8CAL,UACnBlc,EAAS,OAEV,IAAItC,EAAI,EAAGA,EAAIwe,EAAUze,OAAQC,IAAK,OACnCye,EAAWD,EAAUxe,OAEvByB,EACAud,EAAY,OAERvd,EAAQuK,GAAMb,KAAKsT,EAASjS,SAAU,OACtCyS,EAAQxd,EAAMwd,MACdhX,EAAQxG,EAAM,GACdyd,EAAYT,EAASI,WAAWM,SAChCC,EAAQX,EAASjS,OAAOc,MAAM0R,EAAWC,EAAQxd,EAAM,GAAG1B,QAI5DgM,GAAO9D,IAAU8D,GAAO9D,GAAOhE,KACjC3B,EAAO6C,KAAK,CACVqH,OAAQ4S,EAAMnY,QAAQxF,EAAOgB,OAAOkc,aAAa,QACjDE,WAAY,IACPJ,EAASI,WACZQ,WAAY,CACV5W,MAAOyW,EACPxW,OAAQwW,EACRI,QAASxM,KAAKyM,MAAkB,GAAZL,GACpBlU,MAAOe,GAAO9D,GAAOhE,SAM3B3B,EAAO6C,KAAK,CACVqH,OAAQ4S,EAAMnY,QAAQxF,EAAOgB,OAAOkc,aAAa,IACjDE,WAAYJ,EAASI,aAIzBG,EAAYC,EAAQhX,EAAMlI,OAGxBif,EAAYP,EAASjS,OAAOzM,QAC9BuC,EAAO6C,KAAK,CACVqH,OAAQiS,EAASjS,OAAOc,MAAM0R,GAC9BH,WAAYJ,EAASI,oBAKpBvc,IgDhGHkd,GAAgB,CAACC,EAAMC,YACnBA,OACD,mBACID,EAAKE,kBACT,mBACIF,EAAKtd,kBACT,mBCnBUR,CAAAA,GACZA,EACEA,EAAMsF,QAAQ,YAAa2Y,GAAKA,EAAED,eADtBhe,EDmBRke,CAAWJ,OACf,oBACIrG,GAAWqG,kBAEXA,IAUPK,GAAeC,QACdA,EAAU,MAAO,CAAC,CAAEvT,OAAQ,SAE7BgS,EAAY,SACVwB,MACJA,EAAQ,QADJC,gBAEJA,EAFInc,WAGJA,EAAa,YAHTE,WAIJA,EAJID,UAKJA,EALIob,SAMJA,EAAW,GANPe,UAOJA,EAAY,OAPRC,WAQJA,EARIC,eASJA,EATIC,oBAUJA,EAVIC,oBAWJA,EAXIC,cAYJA,EAZIC,cAaJA,EAbIC,WAcJA,EAdIC,QAeJA,GACEX,EAASjd,MAEP6d,EAAM5b,GAAKwC,QAAQ,CAAEzD,WAAAA,EAAYE,WAAAA,EAAYD,UAAAA,IAG7C8a,EAAa,CACjBnX,KAHWiZ,EAAMA,EAAI1c,KAAOH,EAI5Bkc,MAAAA,EACAU,QAAAA,EACAvB,SAAAA,EACAc,gBAAAA,EACAW,MAAOV,EACPW,OAAQJ,EACRK,KAAMf,EAAS5c,IACf4d,iBAAkBP,EAClBQ,eAAgBV,EAChBW,UAA8B,cAAnBb,EACXc,eAAgBb,GAAuBL,EACvCmB,OAA2B,iBAAnBf,EACRgB,YAAad,EACbe,YAAahB,GAAuBL,EACpCG,WAAYA,EAAaA,EAAahB,EAAW,MAGnDY,EAAS1S,SAASE,QAAQ+T,IACpBnZ,GAAQmZ,GACV9C,EAAUrZ,KAAK,CACbqH,OAAQ/J,OAAOkc,aAAa,OAC5BE,WAAY,IACPA,EACHQ,WAAY,CACV5W,MAAO6Y,EAAMxe,MAAM2F,OAAS0W,EAC5BzW,OAAQ4Y,EAAMxe,MAAM4F,QAAUyW,EAC9BnU,MAAOsW,EAAMtW,MAAM/G,SAIhBqa,GAAegD,GACxB9C,EAAUrZ,KAAK,CACbqH,OAAQgT,GAAc8B,EAAM3f,MAAO4e,GACnC1B,WAAAA,IAGEyC,GACF9C,EAAUrZ,QAAQ2a,GAAawB,UAKhC,MAAMC,KAAgBhD,GACzBC,EAAY+C,EAAa/C,UAGpBA,GE5FHgD,GAASC,GATC,CACdC,YAAAA,GACAC,cAAAA,GACAvB,eAAAA,GACAwB,eAAAA,GACAC,gBAAAA,GACAC,iBLQuB,IAAM,EAAGtV,OAAAA,EAAQuV,KAAAA,UACpCC,EAAW,KACXhD,EAAY,EACZC,EAAQ,QAENvZ,EAAM,OAEP,MAAMuc,KAAOF,EAAM,OAChB5C,EAAWlB,GAAYgE,GACvBC,EAC2B,iBAAxBD,EAAIpD,WAAWnX,KAClBwW,GAAgB+D,EAAIpD,WAAWnX,MAC/Bua,EAAIpD,WAAWnX,QAEC,IAAlB8E,EAAOzM,OAAc,CACvB2F,EAAIP,KAAK,CAAEgd,MAAO,EAAGC,IAAK,EAAGvD,WAAY,CAAEnX,KAAMwa,eAI9C,MAAMvV,KAAQH,EAAOc,MAAM2U,EAAIE,MAAOF,EAAIG,KAAM,OAC7C5E,EAAY7Q,EAAKC,cAEjBlF,EADiB0W,GAAqBZ,EAAW0E,GACzB/D,KAAoB+D,EAG9Cxa,IAASsa,IACPA,GACFtc,EAAIP,KAAK,CACPgd,MAAOnD,EACPoD,IAAKnD,EACLJ,WAAY,CACVnX,KAAMsa,EACNK,MAAOL,EAAW7C,EAAW6C,EAASM,WAAa,KAKzDN,EAAWta,EACXsX,EAAYC,GAGdA,GAAStS,EAAK5M,WAIdif,EAAYxS,EAAOzM,OAAQ,OACvBof,EAAWlB,GAAY9c,EAAO4gB,IAEpCrc,EAAIP,KAAK,CACPgd,MAAOnD,EACPoD,IAAK5V,EAAOzM,OACZ8e,WAAY,CACVnX,KAAMsa,EACNK,MAAOL,EAAW7C,EAAW6C,EAASM,WAAa,WAKlD,CAAE9V,OAAAA,EAAQuV,KAAMrc,MKnBnB6c,GAAaphB,EACjBA,EAASA,EAAU,IACnBA,EAAWqgB,GAAQ,CFuDOzB,GAC1ByC,GAAiBC,cAAc3C,GAAaC,IE5FzB,CAACnU,EAAMnD,EAAOC,WAI1B,CACLtB,EAAG,EACHsb,EAAG,EACHja,MAAAA,EACAka,SAPexhB,EAAO,CAAC,QAAS,YAAayK,GAQ7ClD,OAAQA,GAAUka,EAAAA,EAClBC,aARmB1hB,EAAO,CAAC,QAAS,gBAAiByK,KAkBhCA,KACvBkX,mBAAoBlX,EAAKC,MAAMiX,mBAC/B1c,oBAAqBrB,GAAKwB,yBAC1Bwc,uBAAwB,CAAEC,QAAS,GAAKC,OAAQ,SC9C5CC,GAAatX,GACZA,EAAKuX,MACHrQ,KAAKsQ,OACPxX,EAAKuX,MAAMzW,IAAI2W,GAAQb,GAAiBlF,aAAa+F,MAFjC,ECHrBC,GAAc1X,GACbA,EAAKuX,MACHvX,EAAKuX,MAAMnV,OAAO,CAACC,EAAKoV,IAASpV,EAAMoV,EAAK/Q,IAAI5J,OAAQ,IADtC,EC8B3B,OAAevH,EAAS,EAnBJ,CAAC6Q,EAAMpG,EAAMnD,EAAO8a,EAAW7a,EAAQ8a,IACrDD,IAAc3L,GAAK6L,sBAChB7X,EAAKuX,QAAOvX,EAAKuX,MAAQZ,GAAW3W,EAAMnD,EAAOC,IAE/C,CAAEA,OAAQ4a,GAAY1X,KAG3B2X,IAAc3L,GAAK8L,sBAChB9X,EAAKuX,QAAOvX,EAAKuX,MAAQZ,GAAW3W,EAAMnD,EAAOC,IAE/C,CACLA,OAAQ4a,GAAY1X,GACpBnD,MAAOqK,KAAK6Q,IAAIlb,EAAOya,GAAWtX,MAI/B,IC1BT,MAAMgY,GAAWziB,EACfA,EAAU,CAAC,QAAS,SACpByK,GAAQA,EAAKZ,MAAMvC,MAAQmD,EAAKZ,MAAMtC,OACtCvH,EAAS,ICHL0iB,GAAe1iB,EAAgBA,EAAS,CAAC,MAAO,WCyEtD,OAAeA,EAAS,EA5DH,CAAC6Q,EAAMpG,EAAMnD,EAAO8a,EAAW7a,EAAQ8a,WACpDM,EAAaF,GAAShY,GACtBmY,EAAcpM,GAAU/L,GACxBoY,EAAc9L,GAAWlG,GACzBiS,EAAWJ,GAAa7R,GAC1B4Q,EAAAA,EACA5Q,EAAKM,IAAI5J,OACTsb,EAAYpV,WACZoV,EAAYlV,cACZiV,EAAY1V,UACZ0V,EAAYxV,aAvBI,OA2Bf3C,EAAKZ,MAAO,MAAO,CAAEvC,MAAO,EAAGC,OAAQ,MAG1C6a,IAAc3L,GAAK6L,sBACnBD,IAAe5L,GAAKsM,uBACpB,OACMC,EAAe1b,EAAQqb,QACtB,CAAEpb,OAAQoK,KAAK6Q,IAAIM,EAAUE,OAIpCX,IAAe5L,GAAK6L,uBACnBF,IAAc3L,GAAK8L,sBAClBH,IAAc3L,GAAKsM,8BAEd,CAAEzb,MAAOqK,KAAK6Q,IAAIjb,EAASob,EAAYrb,OAI9C8a,IAAc3L,GAAK6L,sBACnBD,IAAe5L,GAAK8L,qBACpB,OACMS,EAAe1b,EAAQqb,QACtB,CAAEpb,OAAQoK,KAAK6Q,IAAIjb,EAAQub,EAAUE,WAI5CZ,IAAc3L,GAAK8L,sBACnBF,IAAe5L,GAAK8L,qBAEhBI,EAAa,EACR,CACLrb,MAAOA,EACPC,OAAQoK,KAAK6Q,IAAIlb,EAAQqb,EAAYpb,IAGhC,CACLD,MAAOqK,KAAK6Q,IAAIjb,EAASob,EAAYrb,GACrCC,OAAQA,GAKP,CAAEA,OAAAA,EAAQD,MAAAA,KCxEnB,MAEM2b,GAASjjB,EAASA,GAAQyhB,EAAAA,GAiIhC,OAAezhB,EAAS,EAtBF,CAAC6Q,EAAMpG,WACrBmY,EAAcpM,GAAU/L,GACxBoY,EAAc9L,GAAWlG,GACzBiS,EAAWJ,GAAa7R,GAC1B4Q,EAAAA,EACA5Q,EAAKM,IAAI5J,OACTsb,EAAYpV,WACZoV,EAAYlV,cACZiV,EAAY1V,UACZ0V,EAAYxV,aAtHI,GAyHd8V,EAjHW,YACXA,EAAM,GACNC,EAAS,GAETC,EAAM,IAAMF,EACZG,EAAW,CAACpd,EAAGsb,IAAM4B,EAAOnf,KAAK,CAACiC,EAAGsb,IACrC+B,EAAStjB,EACbojB,EACAC,GAGIE,EAAO,CAACtd,EAAGsb,EAAGiC,EAAGC,KACrBJ,EAASpd,EAAGsb,GACZ8B,EAASpd,EAAIud,EAAGjC,GAChB8B,EAASpd,EAAGsb,EAAIkC,GAChBJ,EAASpd,EAAIud,EAAGjC,EAAIkC,GACbP,GAGHQ,EAAU,CAACzd,EAAGsb,EAAGoC,EAAIC,KAGzBP,EAASpd,EAAI0d,EAAIpC,GAFjBqC,EAAKA,GAAMD,IAGXN,EAASpd,EAAI0d,EAAIpC,EAAIqC,GACrBP,EAASpd,EAAI0d,EAAIpC,EAAIqC,GACrBP,EAASpd,EAAI0d,EAAIpC,EAAIqC,GAEdV,UASTA,EAAIK,KAAOA,EACXL,EAAII,OAASA,EACbJ,EAAIW,OAASP,EACbJ,EAAIY,OAASJ,EACbR,EAAIa,QAVY,KAAIC,KAClBb,EAAOnf,QAAQggB,GACRZ,MASTF,EAAIQ,QAAUA,EACdR,EAAIe,YAAcV,EAGlBL,EAAI5E,KAAO8E,EACXF,EAAIza,KAAO2a,EACXF,EAAIgB,UAAYd,EAChBF,EAAIiB,cAAgBf,EACpBF,EAAIkB,iBAAmBhB,EAEvBF,EAAIhC,MAAQkC,EACZF,EAAImB,OAASjB,EACbF,EAAIoB,UAAYlB,EAGhBF,EAAIqB,KAAOnB,EACXF,EAAIsB,KAAOpB,EACXF,EAAIuB,KAAOrB,EACXF,EAAIwB,KAAOtB,EACXF,EAAI3c,KAAO6c,EACXF,EAAIyB,OAASvB,EACbF,EAAI0B,QAAUxB,EACdF,EAAI3D,QAAU6D,EACdF,EAAI2B,QAAUzB,EACdF,EAAI4B,SAAW1B,EACfF,EAAIlF,SAAWoF,EACfF,EAAI6B,UAAY3B,EAChBF,EAAI8B,WAAa5B,EACjBF,EAAI+B,YAAc7B,EAClBF,EAAIgC,YAAc9B,EAClBF,EAAIiC,cAAgB/B,EACpBF,EAAIkC,eAAiBhC,EACrBF,EAAImC,eAAiBjC,EAErBF,EAAIoC,SAAW,KACbtlB,EACEijB,GACAjjB,EAAQ,GAFVA,CAGEmjB,IAEJD,EAAIqC,UAAY,KACdvlB,EACEijB,GACAjjB,EAAQ,GAFVA,CAGEmjB,IAEGD,GA0BKsC,GAEZ/a,EAAKC,MAAM+a,MAAMvC,SAEX5b,EAAQ4b,EAAIoC,iBAGX,CAAE/d,OAFMoK,KAAK6Q,IAAIM,EAAUI,EAAIqC,aAErBje,MAAAA,KCvEnB,MACMoe,GAAcjP,GAAKkP,OAAOriB,SAEhCoiB,GAAYE,oBAAoB,GAEhC,MAaMC,GAAgB7lB,EAAMyK,IAC1BzK,EAdoByK,CAAAA,GACpBzK,EACEmb,GACAL,GAAUrQ,EAAK0G,IAAI5J,QACnBuT,GAAUrQ,EAAK0G,IAAI5J,QAAUkD,EAAK9I,MAAM4F,SAWxCue,CAAcrb,GACdkQ,GAASlQ,EAAK9I,MAAM2F,OACpBsT,GAAYnQ,EAAK9I,MAAMokB,UACvBlL,GAAYpQ,EAAK9I,MAAMqkB,UACvBjL,GAAatQ,EAAK9I,MAAMskB,WACxBjL,GAAavQ,EAAK9I,MAAMukB,WACxBvM,GAAalP,EAAK9I,MAAMuL,WACxB0M,GAAenP,EAAK9I,MAAMwL,aAC1B0M,GAAgBpP,EAAK9I,MAAMyL,cAC3B0M,GAAcrP,EAAK9I,MAAM0L,YACzB0M,GAActP,EAAK9I,MAAM8L,YACzBuM,GAAgBvP,EAAK9I,MAAM+L,cAC3BuM,GAAiBxP,EAAK9I,MAAMgM,eAC5BuM,GAAezP,EAAK9I,MAAMiM,aCtFNpN,CAAAA,GACtBR,EAAMyK,UACE6L,EAAW7L,EAAK8L,WAEjBvW,EAAQQ,IAAU8V,GACrBA,EAAS6P,gBACG,aAAV3lB,EACIiW,GAAK2P,uBACL3P,GAAK4P,0BD+EbF,CAAgB1b,EAAK9I,MAAM2kB,UAC3B/L,GAAe9P,EAAK9I,MAAMyP,KAC1BoJ,GAAiB/P,EAAK9I,MAAM8V,OAC5BgD,GAAkBhQ,EAAK9I,MAAM+V,QAC7BgD,GAAgBjQ,EAAK9I,MAAM0P,MAC3B8I,GAAa1P,EAAK9I,MAAMuM,gBACxBkM,GAAe3P,EAAK9I,MAAM0M,kBAC1BgM,GAAgB5P,EAAK9I,MAAM6M,mBAC3B8L,GAAc7P,EAAK9I,MAAMgN,iBE/FVnO,CAAAA,GACjBR,EAAMyK,UACE6L,EAAW7L,EAAK8L,UAElBD,GACFA,EAASiQ,WACG,SAAV/lB,EAAmBiW,GAAK+P,aAAe/P,GAAKgQ,gBF0FhDF,CAAW9b,EAAK9I,MAAM+kB,SxB5FDlmB,CAAAA,GACvBR,EAAMyK,UACE6L,EAAW7L,EAAK8L,aAElBD,EAAU,OACNsC,EAAY5Y,EAAO,CACvB,CAACwZ,GAAOxZ,EAASyW,GAAKkQ,qBACtB,CAAClN,GAAczZ,EAASyW,GAAKmQ,6BAC7B,CAAClN,GAAiB1Z,EAASyW,GAAKoQ,gCAChC,CAAC7mB,EAAKA,EAASyW,GAAKqQ,yBAJJ9mB,CAKfQ,GAEH8V,EAASyQ,iBAAiBnO,MwBiF5BmO,CAAiBtc,EAAK9I,MAAMqlB,eAC5B3N,GAAa5O,EAAK9I,MAAMslB,WACxB1N,GAAgB9O,EAAK9I,MAAMulB,cGnGL1mB,CAAAA,GACxBR,EAAMyK,UACE6L,EAAW7L,EAAK8L,cAEjBvW,EAAQQ,IAAU8V,EAAU,OACzBsC,EAAY5Y,EAAO,CACvB,CAACA,EAAS,UAAWA,EAASyW,GAAK0Q,iBACnC,CAACnnB,EAAS,YAAaA,EAASyW,GAAK2Q,mBACrC,CAACpnB,EAAS,iBAAkBA,EAASyW,GAAK4Q,wBAC1C,CAACrnB,EAAS,gBAAiBA,EAASyW,GAAK6Q,uBACzC,CAACtnB,EAAS,gBAAiBA,EAASyW,GAAK8Q,uBACzC,CAACvnB,EAAKA,EAASyW,GAAK+Q,sBANJxnB,CAOfQ,GAEH8V,EAASmR,kBAAkB7O,MHsF7B6O,CAAkBhd,EAAK9I,MAAM+lB,gBIpGblnB,CAAAA,GAClBR,EAAMyK,UACE6L,EAAW7L,EAAK8L,aAElBD,EAAU,OACNsC,EAAY5Y,EAAO,CACvB,CAACA,EAAS,QAASA,EAASyW,GAAKkR,YACjC,CAAC3nB,EAAS,gBAAiBA,EAASyW,GAAKmR,oBACzC,CAAC5nB,EAAKA,EAASyW,GAAKoR,gBAHJ7nB,CAIfQ,GAEH8V,EAASwR,YAAYlP,MJ0FvBkP,CAAYrd,EAAK9I,MAAMomB,UKrGPvnB,CAAAA,GAClBR,EAAMyK,UACE6L,EAAW7L,EAAK8L,cAEjBvW,EAAQQ,IAAU8V,EAAU,OACzBsC,EAAY5Y,EAAO,CACvB,CAACA,EAAS,UAAWA,EAASyW,GAAKuR,kBACnC,CAAChoB,EAAS,UAAWA,EAASyW,GAAKwR,kBACnC,CAACjoB,EAAKA,EAASyW,GAAKyR,oBAHJloB,CAIfQ,GAEH8V,EAAS6R,YAAYvP,ML2FvBuP,CAAY1d,EAAK9I,MAAMymB,UMvGJ5nB,CAAAA,GACrBR,EAAMyK,UACE6L,EAAW7L,EAAK8L,WAEjBvW,EAAQQ,IAAU8V,GACrBA,EAAS+R,eAAe7nB,KNmG1B6nB,CAAe5d,EAAK9I,MAAM2mB,aAC1B9P,GAAQ/N,EAAK9I,MAAM4mB,MACnB7P,GAAajO,EAAK9I,MAAM6mB,WACxB/P,GAAYhO,EAAK9I,MAAM8mB,UACvBnP,GAAc7O,EAAK9I,MAAM+mB,YAnC3B1oB,CAoCEyK,KAUEke,GAAkBC,GACtB5oB,EAAMmgB,GAASyI,EAAOC,YAAY1I,EAAK,UAAayI,EAAOE,kBAoBvDC,GAAY/oB,EAAaib,IACzB+N,GAAYhpB,EAAakb,IACzB+N,GAAkBjpB,EAAO+oB,GAAWC,IACpCE,GAAoBlpB,EAAamd,IASjCgM,GAAkBtY,GAAQpG,UACxB6L,EAAWG,GAAK2S,KAAKC,iBAAiB3D,WAErC1lB,EAjCc6Q,CAAAA,GAAQpG,UACvB6L,EAAW7L,EAAI,iBAEjBwQ,GAAOxQ,IACT6L,EAASgT,eAAeC,GAAY1Y,EAAMpG,IAGxCzD,GAAQyD,IACV6L,EAASgT,eAAeE,GAAa3Y,EAAMpG,IAGzC2Q,GAAS3Q,IACX6L,EAASgT,eAAeG,GAAc5Y,EAAMpG,IAGvCA,GAmBL6e,CAAezY,GACf7Q,EACEipB,GACAjpB,EAAS,CACPkM,SAAUlM,EACRA,EACE2oB,GAAgBrS,GAChB6S,GAAgBtY,QAKxBgV,GACA7lB,EAnHc,YAmHKsW,GAddtW,CAeLyK,IASEif,GAAkB1pB,EAAM6Q,GAAQA,EAAI,UAAY6Y,mBAQhDC,GAAoBlf,GACjBzK,EAAS,CACdkM,SAAUlM,EAAMA,EAAOkpB,GAAmBS,KAC1CxY,IAAKnR,EACHA,EAAW,CACT+W,GAAWtM,GACX+L,GAAU/L,GACVuN,GAAevN,GACf+M,GAAY/M,GACZmN,GAAanN,OARZzK,CAWJyK,GASCmf,GAAmBnf,GAChBzK,EACLA,GA5Jc,aA6JdA,EAAM6pB,GAAKpT,GAAK2S,KAAKU,QAAQD,EAAC,YAC9B7pB,EAAS,CAAEkM,SAAUlM,EAAMA,EAAOipB,GAAiBW,OAH9C5pB,CAILyK,GAWSsf,GAAwBlZ,GACnC7Q,EACEA,EACAA,EAAS,MACTA,EACE4pB,GACAD,GACAD,GACAP,GAAgBtY,IAPpB7Q,CASE6Q,GAQEmZ,GAAoBhqB,EAAS,CACjCkM,SAAUlM,EACRA,EAAS,CACPkM,SAAUlM,EAAM+pB,SOzPhBE,GAAmBxf,GAAQwQ,GAAOxQ,KAAUA,EAAKuX,MAUjDkI,GAAoBzf,GACxBzK,EACEA,EAAS,CAAEkM,SAAUlM,EAAMkqB,MAC3BlqB,EACEiqB,GACAjqB,EACEA,EAAWA,EAAQ,SAAU,CAC3BA,EAAWohB,GAAY,CACrBphB,EACAA,EAAO,CAAC,MAAO,UACfA,EAAO,CAAC,MAAO,aAEjBA,MAXRA,CAeEyK,GCrBE0f,GAAmBnqB,EACvBA,GjF2EkC,CAClC,QACA,aACA,WACA,YACA,aACA,gBACA,UACA,iBACA,aACA,YACA,aACA,gBiFtFAA,EAAS,GAAI,UAUToqB,GAAcxd,GAClB5M,EAAS,CACP2B,MAAO3B,EAAQ4M,KAUbyd,GAAqB5f,UACnB6f,EAAgBH,GAAiB1f,UAEhCzK,EAAS,CACdkM,SAAUlM,EACRA,EACEqqB,GACAD,GAAYE,MAJXtqB,CAOJyK,IClCC8f,GAAgBvqB,EhCsCGiN,CAAAA,GACvBjN,EAAMyK,IACJkP,GAAa1M,EAAb0M,CAAqBlP,GACrBmP,GAAe3M,EAAf2M,CAAuBnP,GACvBoP,GAAgB5M,EAAhB4M,CAAwBpP,GACxBqP,GAAc7M,EAAd6M,CAAsBrP,KgC1CxB+f,CAAU,GACVxqB,GAAa,CAAC,QAAS,WACvBA,GAAa,CAAC,QAAS,cACvBA,GAAa,CAAC,QAAS,gBACvBA,GAAa,CAAC,QAAS,iBACvBA,GAAa,CAAC,QAAS,eACvBA,GAAa,CAAC,QAAS,qBACvBA,GAAa,CAAC,QAAS,oBCRnByqB,GAAqBzqB,EAAS,CAClCkM,SAAUlM,EACRA,EAAS,CACPkM,SAAUlM,EAAMuqB,SCNhBG,GAAU1qB,EACdA,GAAU,CAACkb,GAAQlU,GAASoU,KAC5Bpb,GAAS,GACTA,GAAS,EAAM,CAAC,QAAS,UAGrB2qB,GAAW3qB,GAAS,EAAO,CAAC,QAAS,UAErC4qB,GAAsB5qB,EAAO,CAAC,QAAS,qBAEvC6qB,GAAuBC,GAAWvjB,GACtCoK,KAAK6Q,IAAIsI,EAAQ3Z,IAAI5J,OAAQA,GAsBzBwjB,GAAc,CAAC5K,EAAO6K,EAAgBzjB,WACpC0jB,EAAmBL,GAAoBzK,GACvC+K,EAtBiB,EAACC,EAAU5jB,SAC9BpG,EAAS,MAER,IAAItC,EAAI,EAAGA,EAAIssB,EAASvsB,OAAQC,IAAK,OAClCisB,EAAUK,EAAStsB,OAEpBisB,EAAQ3Z,IAAK,eAEZia,EAAkB7jB,EAASujB,EAAQ3Z,IAAIC,IACvC8Z,EACJJ,EAAQpgB,MAAMwgB,eAAiBL,GAAqBC,GAElDA,GAAWM,IACbjqB,GAAU+pB,EAAc3jB,EAASujB,EAAQ3Z,IAAIC,aAI1CjQ,GAKekqB,CAAiBL,EAAgBzjB,GACjD+jB,ECnCeC,CAAAA,QACjBtJ,EAAM,EACNO,EAAMf,EAAAA,KAENzhB,EAAUurB,GAAQ,OAAO,MAExB,IAAI1sB,EAAI,EAAGA,EAAI0sB,EAAM3sB,OAAQC,IAAK,OAC/B4L,EAAO8gB,EAAM1sB,GACnB2jB,EAAM7Q,KAAK6Q,IAAIA,EAAK/X,EAAK0G,IAAIC,KAC7B6Q,EAAMtQ,KAAKsQ,IAAIA,EAAKxX,EAAK0G,IAAIC,IAAM3G,EAAK0G,IAAI5J,eAGvC0a,EAAMO,GDuBQgJ,CAAeR,GAC9BS,EAAclkB,EAAS4Y,EAAMhP,IAAIC,IAAM+O,EAAMhP,IAAI5J,OACjDmkB,EAAahB,GAAQvK,UAGzBwK,GAASxK,KACPuL,GAAcD,GACfR,EAAmBK,GAAgBJ,EAAgBD,GEhDlDU,GAAmB3rB,EAAS,EAAG,CAAC,QAAS,kBCIzCulB,GAAYvlB,EAAO,CAAC,MAAO,WAE3BgX,GAAShX,EAAS,EAAG,CAAC,MAAO,QAE7B4rB,GAAc5rB,EAAS,GAAI,YAE3B6rB,GAAc7rB,EAAQ,YAEtB8a,GAAY9a,GAAY,CAAC,MAAO,WAEhC8rB,GAAW9rB,GAAY,CAAC,QAAS,UAEjC+rB,GAAgB,CAACxkB,EAAQkD,WACvByB,EAAW0f,GAAYnhB,OAEzBuhB,EAAS,KACTC,EAAe,SACbC,EAAkB,OAEnB,IAAIrtB,EAAI,EAAGA,EAAIqN,EAAStN,OAAQC,IAAK,OAClCshB,EAAQjU,EAASrN,GACjBstB,EAAWnV,GAAOmJ,GAClBiM,EAAc7G,GAAUpF,GACxB6K,EAAiB9e,EAASC,MAAMtN,EAAI,MACtBwtB,GAAgBlM,EAAO6K,EAAgBzjB,GAE1C,CACfykB,EAASG,EACTF,EAAejsB,EACbA,GAAU8rB,IAAS,EAAO3L,IAC1BngB,GAAQnB,EAAI,EAAG4iB,EAAAA,GAFFzhB,CAGbkM,eAIGogB,EAAiBC,EAAcC,GAAgBT,GACpDxkB,EACA4Y,OAGEngB,EAAQwsB,IAKZR,EAASG,EAAWK,EAEpBN,EAAgBloB,KACdhE,EACE6rB,GAAYS,GACZxR,GAAUnJ,KAAK8a,KAAKT,EAASzkB,GAAUA,EAAS4kB,GAFlDnsB,CAGEmgB,IAGJ8L,EAAejsB,EACbA,GACEA,EACE6rB,GAAYU,GACZzR,GAAUqF,EAAMhP,IAAI5J,OAAS6kB,GAF/BpsB,CAGEmgB,IAEJngB,GAAQnB,EAAI,EAAG4iB,EAAAA,GAPFzhB,CAQbkM,SArBAggB,EAAgBloB,KAAK6nB,GAAYS,EAAiBnM,UA0B/C,CAAC+L,EAAiBD,EAAcD,IAGnCU,GAAYnlB,GAAUkD,UACnB6hB,EAAiBC,EAAcP,GAAUD,GAAcxkB,EAAQkD,UAElEzK,EAAQgsB,GAAgB,CAACvhB,GAYtB,CAVazK,EAClB6rB,GAAYS,GACZxR,GAAUnJ,KAAK8a,KAAKT,EAASzkB,GAAUA,GAFrBvH,CAGlByK,GAEezK,EACf6rB,GAAYU,GACZzR,GAAUrQ,EAAK0G,IAAI5J,OAASykB,GAFbhsB,CAGfyK,KA+BEkiB,GAAoB3sB,EAAS,CACjCkM,SAAUlM,EACRA,EAAS,CACPkM,SAAUlM,EACRA,GACAA,EA/BU6Q,UACV+b,EAAQ,GACRrlB,ED5FesJ,CAAAA,UACflD,EAAgBge,GAAiB9a,UACxB7Q,EAAO,CAAC,QAAS,UAAW6Q,GAC3BlD,GCyFDkf,CAAehc,OAE1Bic,EAAWJ,GAAUnlB,EAAVmlB,CAAkB7b,GAC7Bkc,EAAUD,EAAS,GACnBE,EAAWF,EAAS,OAExBF,EAAM5oB,KAAK+oB,GAEJC,GAOLD,GANAD,EAAW9sB,EACT0sB,GAAUnlB,GACVwiB,GACAjP,GAAU,MAHD9a,CAITgtB,IAEiB,GACnBA,EAAWF,EAAS,GAEpBF,EAAM5oB,KAAK+oB,UAGNH,UCnHH5V,GAAShX,EAAS,EAAG,CAAC,MAAO,QAE7BulB,GAAYvlB,EAAO,CAAC,MAAO,WAE3B4rB,GAAc5rB,EAAS,GAAI,YAE3BitB,GAAmBjtB,GAAUA,GAAO,CAACA,EAAYgX,KAiBjDkW,GAAgB,CAAC3lB,EAAQkD,WACvByB,EAAW0f,GAAYnhB,SAhBZ,EAAClD,EAAQgkB,WACpBe,EAAkB,GAClBC,EAAe,OAEhB,IAAI1tB,EAAI,EAAGA,EAAI0sB,EAAM3sB,OAAQC,IAAK,OAC/BshB,EAAQoL,EAAM1sB,IACbsuB,EAAcC,GAAaC,GAAU9lB,EAAQ4Y,GAEhDgN,GAAcb,EAAgBtoB,KAAKmpB,GACnCC,GAAWb,EAAavoB,KAAKopB,SAG5B,CAACd,EAAiBC,IAMlBe,CADiB/lB,EAASyP,GAAOvM,GACLyB,IAG/BmhB,GAAYrtB,EAAS,EAAG,CAACuH,EAAQkD,SAChCA,EAAM,MAAO,CAAC,KAAM,YAEnB8iB,EAAUvW,GAAOvM,GAGjBghB,EAAclkB,EAASgmB,EAFVhI,GAAU9a,MACXwiB,GAAiB1lB,EAAQkD,GAG5B,OAEN,CAAC,KADKzK,EAAS,CAAEmR,IAAK,CAAEC,IAAKpR,GAAWA,EAAMuH,KAAxCvH,CAAqDyK,IAC9C,MAGlBghB,EAAa,OACR+B,EAAejB,GAAgBW,GAAc3lB,EAAQkD,SAyBrD,CAvBSzK,EAAS,CACvBkM,SAAUlM,EAASwtB,GACnB7rB,MAAO,CACL0N,uBAAwBrP,EAAS,GACjCoP,wBAAyBpP,EAAS,IAEpCmR,IAAK,CACH5J,OAAQvH,EAAOA,EAASyrB,GAAczrB,EAASuH,EAASgmB,MAP5CvtB,CASbyK,GAEUzK,EAAS,CACpBkM,SAAUlM,EAASusB,GACnB5qB,MAAO,CACLuN,oBAAqBlP,EAAS,GAC9BmP,qBAAsBnP,EAAS,IAEjCmR,IAAK,CACHC,IAAKpR,EAAS,GACduH,OAAQvH,GAAWA,EAAMuH,EAASgmB,KARzBvtB,CAUVyK,UAKE,CAACA,EAAM,MAAM,KCrEhBkhB,GAAmB3rB,EAAS,EAAG,CAAC,QAAS,kBAyBzCytB,GAAuBztB,EAAS,CACpCkM,SAAUlM,EACRA,EAAS,CACPkM,SAAUlM,EACRA,GACAA,EAtBU6Q,QACXA,EAAM,MAAO,SAEZtJ,EATgBsJ,CAAAA,UAChBlD,EAAgBge,GAAiB9a,UACxB7Q,EAAO,CAAC,QAAS,UAAW6Q,GAC3BlD,GAMD+f,CAAgB7c,OAC3B8c,EAAeN,GAAU9lB,EAAQsJ,SAC/B+b,EAAQ,CAACe,EAAa,QACxBX,EAAWW,EAAa,QAER,OAAbX,GACLW,EAAeN,GAAU9lB,EAAQylB,GACjCJ,EAAM5oB,KAAK2pB,EAAa,IACxBX,EAAWW,EAAa,UAGnBf,UCpBHgB,GAAkB5tB,EAAS,CAC/BkM,SAAUlM,EACRA,EAAS,CACPkM,SAAUlM,EAAM6V,GAAgB,aAKhCgY,GAAsB7tB,EAC1B4tB,GACAH,GACAd,ICaImB,GAAe9tB,EACnBA,EAAO,IACPA,EArBkByK,GAClBzK,EAAO,CACL,CAACA,EAAKsB,QAAStB,GACf,CAACmd,GAAgBnd,EAAO,UACxB,CACEA,EACAA,EACE8tB,GACA9tB,EAAS,GAAI,eAPnBA,CAUGyK,KAmBCsjB,GAAmBvtB,GAAS,CAAC,CAAEwtB,KAAM,gBAAiBxtB,MAAAA,IAQtDytB,GAAsBxjB,GAC1BzK,EACEkb,GACAlb,EAAS,CACPkM,SAAUlM,EACR+tB,GACAD,MAGJ9tB,EAAS,CAAEkM,SAAUlM,EAAMiuB,MAR7BjuB,CASEyK,GChDEyjB,GAA+B/d,GAAa3P,UAC1CF,EAAQiR,GAAa/Q,UACpBF,EAAQA,EAAMmR,QAAUtB,EAAU7I,MAAQ9G,GAU7C2tB,GAA6Bhe,GAAa3P,UACxCF,EAAQiR,GAAa/Q,UACpBF,EAAQA,EAAMmR,QAAUtB,EAAU5I,OAAS/G,GAyBpD,OAAeR,EAAS,CACtBkM,SAAUlM,EACRA,EAAS,CACPkM,SAAUlM,EAnBY6Q,GAC1B7Q,EAAS,CACP2B,MAAO3B,EAAS,CACd4N,YAAasgB,GAA6Brd,EAAKM,KAC/CzD,aAAcwgB,GAA6Brd,EAAKM,KAChD1D,WAAY0gB,GAA2Btd,EAAKM,KAC5CxD,cAAewgB,GAA2Btd,EAAKM,QALnDnR,CAOG6Q,SChCL,MAAMud,GAAgBje,GAAa3P,UAC3BF,EAAQiR,GAAa/Q,UACpBF,EACHA,EAAMmR,QAAUE,KAAK6Q,IAAIrS,EAAU7I,MAAO6I,EAAU5I,QACpD/G,GASA6tB,GAAuB5jB,GAC3BzK,EAAS,CACPkM,SAAUlM,EAAMquB,IAChB1sB,MAAO3B,EAAS,CACdkP,oBAAqBkf,GAAc3jB,EAAK0G,KACxChC,qBAAsBif,GAAc3jB,EAAK0G,KACzC/B,wBAAyBgf,GAAc3jB,EAAK0G,KAC5C9B,uBAAwB+e,GAAc3jB,EAAK0G,QAN/CnR,CAQGyK,GCtBC6jB,GAAkBxL,GAAYvb,UAC5BjH,EAAQiR,GAAahK,UACpBjH,EAAQA,EAAMmR,QAAUqR,EAAWvb,GAsBtCgnB,GAAYvuB,EAAU,CAAC,QAAS,WAShCwuB,GAA2B3d,GAAQpG,OACnC8jB,GAAU1d,GAAO,OACbiS,EAxBUjS,CAAAA,WACC7Q,EAAO,CAAC,QAAS,UAAW6Q,GACxB7Q,EAAS,EAAG,CAAC,QAAS,cAAe6Q,GAClC7Q,EAAS,EAAG,CAAC,QAAS,iBAAkB6Q,IAqB/C4d,CAAY5d,UACtB7Q,EAAS,CAAE2B,MAAO,CAAE4F,OAAQ+mB,GAAgBxL,KAA5C9iB,CAA2DyK,UAG7DA,GAoBHikB,GAAuB1uB,EAAS,CACpCkM,SAAUlM,EACRA,EAAS,CACPkM,SAAUlM,EAdiB6Q,GAC/B7Q,EAAS,CACPkM,SAAUlM,EAAMwuB,GAAyB3d,KAD3C7Q,CAEG6Q,SCnDC8d,GAAS3uB,EAAS,O/FRJ,QgGUd4uB,GAAgB5uB,EAAU,CAAC,QAAS,WAQpC6uB,GAAwB7uB,EAC5BA,GAAMmd,IACNnd,EAAS,GAAI,aAUT8uB,GAA0BrkB,GAC9BzK,EAAS,CACPkM,SAAUlM,EACRA,EACEA,EAAO2uB,GAAQ3uB,EAAS4uB,GAAeC,KACvC7uB,EAAQ,OhGpCI,QgGqCZ8uB,MALN9uB,CAQGyK,GCjCCskB,GAA6BtkB,UAC3B2G,EAAMpR,EAAS,EAAG,CAAC,MAAO,OAAQyK,GAClC4G,EAAOrR,EAAS,EAAG,CAAC,MAAO,QAASyK,UAEnCzK,EAAS,CACdkM,SAAUlM,EACRA,EACE+uB,GACA/uB,EAAS,CACPmR,IAAKnR,EAAS,CACZoR,IAAKpR,EAAMoR,GACXsG,OAAQ1X,EAAMoR,GACdC,KAAMrR,EAAMqR,GACZoG,MAAOzX,EAAMqR,KAEf2d,OAAQhvB,EAAS,CACfoR,IAAKpR,EAAMoR,GACXC,KAAMrR,EAAMqR,UAbfrR,CAkBJyK,ICNCwkB,GjEFmB5uB,CAAAA,GAAOL,EAAS,CACvCkM,SAAUlM,EACRA,EAAS,CACPkM,SAAUlM,EACRA,EACE6V,GAAgBxV,GAChB6uB,GAAW7uB,EAAK,WiEJG8uB,CAAiB,SAExC5T,GCnBe,KAAIrF,IAAQnU,MAAAA,QAC1B,MAAMoU,KAAMnW,GAAUkW,GAAM1V,QAAc2V,EAAG3V,UAC3CA,GDiBM4uB,CACbL,GACAzd,GACA+d,GAPe9sB,CAAAA,GAAQvC,EAAM,IAAM+F,QAAQupB,QAAQ/sB,IAQnDgtB,CAAS,qBACT1B,GAViBtrB,CAAAA,GAAQvC,EAAM,IAAM+F,QAAQypB,KAAKjtB,IAWlDktB,CAAW,qBACXvF,GACAmE,GACAtd,GACAiZ,GlFiBoBvf,GACpBzK,EACEA,EAAOA,EAASyK,IAChBilB,GAAKnsB,QAAQosB,IAAID,GACjB1jB,GAHFhM,CAIEyK,GkFpBF4f,GACAqE,GACAkB,GACApf,GACAyd,GACAa,GACArE,GACAwE,IE3CIxK,GAAOvB,GAAOljB,EAAM,IAAMkjB,EAAIuB,QCA9BI,GAAU3B,GAAOljB,EAAM,IAAMkjB,EAAI2B,WCevC,OAAe7kB,EAAS,EAdL,CAACkjB,EAAKzY,WACjB2G,IAAEA,EAAFC,KAAOA,GAAS5G,EAAK0G,IACrB1D,EAAazN,EAAS,EAAG,CAAC,MAAO,cAAeyK,GAChDmD,EAAc5N,EAAS,EAAG,CAAC,MAAO,eAAgByK,GAClDolB,EAAWplB,EAAKuX,MAAM,GAAKvX,EAAKuX,MAAM,GAAG7Q,IAAIoQ,EAAI,SAEvD2B,EAAIuB,OACJvB,EAAIoB,UAAUjT,EAAOzD,EAAawD,EAAM3D,EAAaoiB,GACrDC,GAAYC,OAAO7M,EAAK,CAACzY,EAAKuX,QAC9BkB,EAAI2B,UAEGpa,ICJT,OAAezK,EAAS,EARL,CAACkjB,EAAKzY,WACjBnD,MAAEA,EAAFC,OAASA,GAAWkD,EAAK0G,WAE/B+R,EAAI8M,QAAQ,CAAEra,KAAM,CAACrO,EAAOC,GAAS0F,OAAQ,IAEtCxC,ICPT,MAAMwlB,GAAkB,sBCIlB1lB,GAAYvK,EDIIQ,GACfA,EAEgB,iBAAVA,GAAuBA,EAAMF,MAAM2vB,IAIvCzvB,YAHYA,IAHA,GCHnBR,EAASA,EAAO,CAAC,QAAS,QAASA,EAAO,CAAC,QAAS,WCOtD,OAAeA,EAAS,EATL,CAACkjB,EAAKzY,WACjB2G,IAAEA,EAAFC,KAAOA,EAAP/J,MAAaA,EAAbC,OAAoBA,GAAWkD,EAAK0G,IACpCnP,EAAMuI,GAAUE,UAEtByY,EAAIvD,KAAKtO,EAAMD,EAAK9J,EAAOC,EAAQvF,GAE5ByI,ICCT,OAAezK,EAAS,EATL,CAACkjB,EAAKzY,WACjB2G,IAAEA,EAAFC,KAAOA,GAAS5G,EAAK0G,IACrB3Q,EAAQiK,EAAKyB,SAAS,GAAKzB,EAAKyB,SAAS,GAAG1L,MAAQ,UAE1D0iB,EAAIgN,KAAK7e,EAAMD,EAAK,EAAG,EAAG5Q,GAEnBiK,ICJT,MAAM0lB,IAAgBxe,KAAKye,KAAK,GAAK,GAAO,EAA9B,EAmEd,OAAepwB,EAAS,EAjEP,CAACkjB,EAAKzY,WACf2G,IAAEA,EAAFC,KAAOA,EAAP/J,MAAaA,EAAbC,OAAoBA,GAAWkD,EAAK0G,KAEpCjC,oBACJA,EAAsB,EADlBC,qBAEJA,EAAuB,EAFnBC,wBAGJA,EAA0B,EAHtBC,uBAIJA,EAAyB,GACvB5E,EAAK9I,MAGH0uB,EAAM1e,KAAK6Q,IAAIrT,EAAsB,GAAM7H,EAAO,GAAMC,GACxD+oB,EAAMD,GAAO,EAAMF,IAEzBjN,EAAII,OAAOjS,EAAOgf,EAAKjf,GACvB8R,EAAIW,OAAOxS,EAAO/J,EAAQ+oB,EAAKjf,GAC/B8R,EAAIiB,cACF9S,EAAO/J,EAAQgpB,EACflf,EACAC,EAAO/J,EACP8J,EAAMkf,EACNjf,EAAO/J,EACP8J,EAAMif,SAIFE,EAAM5e,KAAK6Q,IAAIpT,EAAyB,GAAM9H,EAAO,GAAMC,GAC3DipB,EAAMD,GAAO,EAAMJ,IAEzBjN,EAAIW,OAAOxS,EAAO/J,EAAO8J,EAAM7J,EAASgpB,GACxCrN,EAAIiB,cACF9S,EAAO/J,EACP8J,EAAM7J,EAASipB,EACfnf,EAAO/J,EAAQkpB,EACfpf,EAAM7J,EACN8J,EAAO/J,EAAQipB,EACfnf,EAAM7J,SAIFkpB,EAAM9e,KAAK6Q,IAAInT,EAAwB,GAAM/H,EAAO,GAAMC,GAC1DmpB,EAAMD,GAAO,EAAMN,IAEzBjN,EAAIW,OAAOxS,EAAOof,EAAKrf,EAAM7J,GAC7B2b,EAAIiB,cACF9S,EAAOqf,EACPtf,EAAM7J,EACN8J,EACAD,EAAM7J,EAASmpB,EACfrf,EACAD,EAAM7J,EAASkpB,SAIXE,EAAMhf,KAAK6Q,IAAItT,EAAqB,GAAM5H,EAAO,GAAMC,GACvDqpB,EAAMD,GAAO,EAAMR,WAEzBjN,EAAIW,OAAOxS,EAAMD,EAAMuf,GACvBzN,EAAIiB,cAAc9S,EAAMD,EAAMwf,EAAKvf,EAAOuf,EAAKxf,EAAKC,EAAOsf,EAAKvf,GAChE8R,EAAI2N,YACJ3N,EAAIsB,OAEG/Z,IClET,MAAMqmB,GAAYjH,IACRkH,MAAMtvB,WAAWooB,KAAOmH,SAASnH,GAGrCoH,GAAwB,CAACC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,WAC3CC,EAAKN,EAAKC,EACVM,EAAKL,EAAKC,EAEVK,EAAMngB,GAAa+f,GACnBK,EAAMpgB,GAAaggB,GACnBK,EAAMF,EAAMA,EAAIjgB,QAAU,GAC1BogB,EAAMF,EAAMA,EAAIlgB,QAAU,MAE5B+f,EAAKC,EAAI,OACLlqB,EAAS4pB,EACT7pB,EAAQC,EAASkqB,EACjBtT,EAAU2S,GAAUS,GAAMA,EAAK,QAG9B,CAAEjqB,MAAAA,EAAOC,OAAAA,EAAQuqB,QAFRhB,GAAUQ,GAAMA,GAAMJ,EAAK5pB,GAASsqB,EAEnBzT,QAAAA,GAC5B,OACC7W,EAAQ4pB,EACR3pB,EAASD,EAAQmqB,EACjBK,EAAUhB,GAAUQ,GAAMA,EAAK,QAG9B,CAAEhqB,MAAAA,EAAOC,OAAAA,EAAQ4W,QAFR2S,GAAUS,GAAMA,GAAMJ,EAAK5pB,GAAUsqB,EAEpBC,QAAAA,KAI/BC,GAAqB,CAACb,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,WACxCjqB,EAAQ8pB,EACR7pB,EAAS8pB,EACTK,EAAMngB,GAAa+f,GACnBK,EAAMpgB,GAAaggB,GACnBK,EAAMF,EAAMA,EAAIjgB,QAAU,GAC1BogB,EAAMF,EAAMA,EAAIlgB,QAAU,SAIzB,CAAEnK,MAAAA,EAAOC,OAAAA,EAAQuqB,QAHRhB,GAAUQ,GAAMA,GAAMJ,EAAK5pB,GAASsqB,EAGnBzT,QAFjB2S,GAAUS,GAAMA,GAAMJ,EAAK5pB,GAAUsqB,IA+CjDG,GAAmB,CAAChE,EAAO,OAAQkD,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,YACnDvD,OACD,iBACIiD,GAAsBC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,OAC9C,cA9CmB,EAACL,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,WACzCE,EAAKL,EAAKC,EACVG,EAAKN,EAAKC,EAEVO,EAAMngB,GAAa+f,GACnBK,EAAMpgB,GAAaggB,GACnBK,EAAMF,EAAMA,EAAIjgB,QAAU,GAC1BogB,EAAMF,EAAMA,EAAIlgB,QAAU,MAE5B+f,EAAKC,EAAI,OACLnqB,EAAQ4pB,EACR3pB,EAASD,EAAQmqB,EACjBK,EAAUhB,GAAUQ,GAAMA,EAAK,QAE9B,CAAEhqB,MAAAA,EAAOC,OAAAA,EAAQ4W,QADR2S,GAAUS,GAAMA,GAAMJ,EAAK5pB,GAAUsqB,EACpBC,QAAAA,GAC5B,OAECxqB,EADS6pB,EACQM,QAGhB,CAAEnqB,MAAAA,EAAOC,OAJD4pB,EAISW,QAFRhB,GAAUQ,GAAMA,GAAMJ,EAAK5pB,GAASsqB,EAEnBzT,QADjB2S,GAAUS,GAAMA,EAAK,KA4B5BU,CAAoBf,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,OAC5C,cACIQ,GAAmBb,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,OAC3C,mBA1BuB,EAACL,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,WAC7CW,EAAmBjB,GAAsBC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,GAC7DY,EAAgBJ,GAAmBb,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,UAEtDW,EAAiB5qB,MAAQ6qB,EAAc7qB,MAC1C4qB,EACAC,GAqBOC,CAAwBlB,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,iBAlB9B,EAACL,EAAIC,EAAIG,EAAIC,KAC/B,CACLjqB,MAAO4pB,EACP3pB,OAAQ4pB,EACRW,QAASvgB,GAAa+f,GAAM,EAAIA,GAAM,EACtCnT,QAAS5M,GAAaggB,GAAM,EAAIA,GAAM,IAe7Bc,CAAmBnB,EAAIC,EAAIG,EAAIC,KCrC5C,OAAevxB,EAAS,EAXJ,CAACkjB,EAAKzY,KACxBzK,EACE6kB,GAAQ3B,GA5CMA,CAAAA,GAAOzY,UACjB4G,KAAEA,EAAFD,IAAQA,GAAQ3G,EAAK0G,KACrBoO,QAAEA,EAAF9P,gBAAWA,EAAXC,gBAA4BA,GAAoBjF,EAAK9I,MACrD8L,EAAahD,EAAK0G,IAAIvD,aAAe,EACrCF,EAAejD,EAAK0G,IAAIzD,cAAgB,EACxCC,EAAgBlD,EAAK0G,IAAIxD,eAAiB,EAC1CC,EAAcnD,EAAK0G,IAAIvD,aAAe,GAEtCtG,MAAEA,EAAFC,OAASA,EAATuqB,QAAiBA,EAAjB3T,QAA0BA,GAAY6T,GAC1CvnB,EAAK9I,MAAM2wB,UACX7nB,EAAK0G,IAAI7J,MAAQsG,EAAcF,EAC/BjD,EAAK0G,IAAI5J,OAASkG,EAAaE,EAC/BlD,EAAKZ,MAAMvC,MACXmD,EAAKZ,MAAMtC,OACXkI,EACAC,UAGEjF,EAAKZ,MAAM/G,OACC,IAAVwE,GAA0B,IAAXC,EACjB2b,EACGgC,YAAY3F,GAAW,GACvB1V,MACCY,EAAKZ,MAAM/G,KACXuO,EAAOzD,EAAckkB,EACrB1gB,EAAM3D,EAAa0Q,EACnB,CACE7W,MAAAA,EACAC,OAAAA,IAINlC,IACE,qBACmBoF,EAAKC,MAAM1I,2CAK7ByI,GAML8nB,CAAUrP,GACVsP,GAAStP,GACTuB,GAAKvB,GAJPljB,CAKEyK,GAEKA,IC1DF,MAAMgoB,GAAmB,CAC9B,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,QACA,SACA,SACA,SACA,SACA,SACA,UACA,UACA,UACA,UACA,UACA,WACA,WACA,YACA,YACA,YACA,aACA,cACA,cACA,cACA,gBACA,gBACA,mBACA,iBACA,kBC5BIC,GAAe1yB,EAAS,GA6B9B,OAAeA,EAAS,EA3BH,CAACkjB,EAAKzY,WACnB2G,IAAEA,EAAFC,KAAOA,EAAP/J,MAAaA,EAAbC,OAAoBA,GAAWkD,EAAK0G,IAEpCvD,EAAc8kB,GAAa,cAAejoB,EAAK0G,KAC/CzD,EAAeglB,GAAa,eAAgBjoB,EAAK0G,KACjD1D,EAAailB,GAAa,aAAcjoB,EAAK0G,KAG7CwhB,EAAiBrrB,EAAQsG,EAAcF,EACvCklB,EAAkBrrB,EAASkG,EAHXilB,GAAa,gBAAiBjoB,EAAK0G,YAKzD9L,GACEstB,GAAkBC,EAClB,8HAGF1P,EAAIuB,OAAOH,UAAUjT,EAAOzD,EAAawD,EAAM3D,GAE3ChD,EAAKC,MAAM+a,OACbhb,EAAKC,MAAM+a,MDUC,SAASvC,SACjBwM,EAAI+C,GAAiB5lB,OACzB,CAACC,EAAK+lB,SACD/lB,GACF+lB,GAAO,IAAIntB,KACVwd,EAAI2P,MAASntB,GACNgqB,KAGX,WAGKA,ECtBYoD,CAAQ5P,GAAMyP,EAAgBC,GAGjD1P,EAAI2B,UAEGpa,UChBHsoB,GAAQ,CAAC9Q,EAAK+Q,IAClB1nB,MAAM7I,KAAK,CAAE7D,OAAQ+S,KAAK8a,KAAKxK,EAAM+Q,IAAU,CAACnX,EAAGhd,IAAMA,EAAIm0B,GAEzDC,GAAkBzyB,UAChBF,EAAQiR,GAAa/Q,UACpBF,EAAQ,IAAMA,EAAME,MAAQ,MAwC/B0yB,GAAsBhQ,GAAOrS,UAC3BvJ,EAAQuJ,EAAKM,IAAI7J,MACjBC,EAASsJ,EAAKM,IAAI5J,OAClBykB,EAAS/a,GAAmBJ,GjHsCT,GiHtC+B,EAClDsiB,EAASJ,GAAMzrB,EAzCEuJ,CAAAA,UACjBrQ,EACJqQ,EAAKnG,MAAM0oB,sBACXviB,EAAKnG,MAAM2oB,YjH8EoB,MiH3EZ,iBAAV7yB,EAAoB,OACvB8yB,EAAaL,GAAgBzyB,MAC/B8yB,SACYziB,EAAKM,IAAI7J,OAAS0J,GAAiBH,GjHqE5B,GiHrEkD,IACxDyiB,QAEX,IAAIzyB,MAAM,+CAGXL,GA0BqB+yB,CAAiB1iB,WAE7CqS,EACGK,KAAKyI,EAAQ,EAAG1kB,EjHkCM,IiHjCtBod,KjHkCsB,SiHjCtBpB,OAAO0I,EjHgCe,IiH/BtBnI,OAAOvc,EjH+Be,IiH9BtBqd,OjHmCqB,QiHjCxBwO,EAAO5nB,IAAIioB,IACTtQ,EACGI,OAAO0I,EAASwH,EAAM,GACtB3P,OAAOmI,EAASwH,EjHyBI,IiHxBpB7O,OjH6BmB,QiH5BnBI,UAAU,SACVzG,QAAQ3M,KAAK8hB,MAAMD,KAASxH,EAASwH,EAAO,EAAG,GAErC,IAATA,GACFtQ,EACGI,OAAO0I,EAASwH,EjHkBE,IiHjBlB3P,OAAOmI,EAASwH,EAAMjsB,GACtBod,OjHsBiB,aiHlBjB9T,GAGH6iB,GAAwBxQ,GAAOrS,UAC7BvJ,EAAQuJ,EAAKM,IAAI7J,MACjBC,EAASsJ,EAAKM,IAAI5J,OAClBykB,EAAShb,GAAiBH,GjHMP,GiHN6B,EAChDsiB,EAASJ,GAAMxrB,EAvDIsJ,CAAAA,UACnBrQ,EACJqQ,EAAKnG,MAAMipB,oBACX9iB,EAAKnG,MAAM2oB,YjH4DoB,MiHzDZ,iBAAV7yB,EAAoB,OACvB8yB,EAAaL,GAAgBzyB,MAC/B8yB,SAEAziB,EAAKM,IAAI5J,QAAUyJ,GAAiBH,GjHkDjB,GiHlDuC,IAC5CyiB,QAEZ,IAAIzyB,MAAM,+CAGXL,GAuCsBozB,CAAmB/iB,WAEhDqS,EACGK,KAAK,EAAGyI,EjHEc,GiHFOzkB,GAC7Bmd,KjHEsB,SiHDtBpB,OjHAsB,GiHAFrS,GAAmBJ,GjHAjB,GiHAuC,GAC7DgT,OjHDsB,GiHCFtc,GACpBod,OjHGqB,QiHDxBwO,EAAO5nB,IAAIioB,IACTtQ,EACGI,OAAO,EAAG0I,EAASwH,GACnB3P,OjHPoB,GiHOAmI,EAASwH,GAC7B7O,OjHHmB,QiHInBI,UAAU,SACVzG,QAAQ3M,KAAK8hB,MAAMD,KAAS,EAAGxH,EAASwH,EAAO,GAErC,IAATA,GACFtQ,EACGI,OjHdkB,GiHcE0I,EAASwH,GAC7B3P,OAAOvc,EAAO0kB,EAASwH,GACvB7O,OjHViB,aiHcjB9T,GAoBT,OAAe7Q,EAAS,EAjBH,CAACkjB,EAAKrS,KACzBqS,EACGuB,OACAP,UjHtBqB,IiHuBrBlG,SjHzB0B,GiH0B1BuB,QAAQ,GAEXvf,EACEA,EAAOgR,GAAkBkiB,GAAoBhQ,IAC7CljB,EAAOiR,GAAoByiB,GAAsBxQ,IAFnDljB,CAGE6Q,GAEFqS,EAAI2B,UAEGhU,ICtGT,OAAe7Q,EAAS,EArBJ,CAACkjB,EAAK2Q,WAClBC,EAdgBle,CAAAA,GAAU,CAACme,EAAIlB,IACrC7yB,EAAS+zB,EAAI,CAAC,WAAY,EAAG,QAASlB,GAAOjd,GAa7Boe,CAAgBH,GAC1BI,EAZere,CAAAA,GAAU,CAACvV,EAAKG,KACjCA,IAAOoV,EAAOse,KAAK7zB,GAAOG,IAWd2zB,CAAejR,GAEzBkR,EAAQN,EAAQ,KAAM,SACtBO,EAASP,EAAQ,KAAM,UACvBQ,EAAUR,EAAQ,KAAM,WACxBS,EAAWT,EAAQ,KAAM,YACzBU,EAAUV,EAAQ,YAAa,WAC/BW,EAAWX,EAAQ,YAAa,mBAEtCG,EAAQ,QAASG,GACjBH,EAAQ,SAAUI,GAClBJ,EAAQ,UAAWK,GACnBL,EAAQ,WAAYM,GACpBN,EAAQ,UAAWO,GACnBP,EAAQ,WAAYQ,GAEbZ,IC/BT,MAIMa,GAAc10B,GAAS,CAAC,QAAS,UAAU,GAiKjD,OAAeA,EAAS,EAhBJ,CAACkjB,EAAKzY,IACnBiqB,GAAYjqB,IAEjByY,EAAIuB,OAhJe,EAACvB,EAAKzY,WACnB4G,KACJA,EADID,IAEJA,EAFI9J,MAGJA,EAHIC,OAIJA,EAJIqG,YAKJA,EALIH,WAMJA,EANIC,aAOJA,EAPIC,cAQJA,GACElD,EAAK0G,IAET+R,EACG6B,UArBiB,WAsBjBxF,QAAQ,IACRgE,KACClS,EAAOzD,EACPwD,EAAM3D,EACNnG,EAAQsG,EAAcF,EACtBnG,EAASkG,EAAaE,GAEvB+W,QA6HHiQ,CAAazR,EAAKzY,GA1HC,EAACyY,EAAKzY,WACnB4G,KACJA,EADID,IAEJA,EAFI9J,MAGJA,EAHIC,OAIJA,EAJIqG,YAKJA,EALIH,WAMJA,EANIC,aAOJA,EAPIC,cAQJA,GACElD,EAAK0G,IAET+R,EAAI6B,UA3CgB,WA2CSxF,QAAQ,IAGrC2D,EACGK,KACClS,EAAOzD,EACPwD,EACA9J,EAAQoG,EAAeE,EACvBH,GAEDiX,OAGHxB,EAAIK,KAAKlS,EAAMD,EAAKxD,EAAarG,GAAQmd,OAGzCxB,EAAIK,KAAKlS,EAAO/J,EAAQoG,EAAc0D,EAAK1D,EAAcnG,GAAQmd,OAGjExB,EACGK,KACClS,EAAOzD,EACPwD,EAAM7J,EAASoG,EACfrG,EAAQoG,EAAeE,EACvBD,GAED+W,QAqFHkQ,CAAa1R,EAAKzY,GAlFA,EAACyY,EAAKzY,WAClB4G,KACJA,EADID,IAEJA,EAFI9J,MAGJA,EAHIC,OAIJA,EAJI8F,WAKJA,EALIH,UAMJA,EANIC,YAOJA,EAPIC,aAQJA,GACE3C,EAAK0G,IACT+R,EAAI6B,UAlFe,WAkFSxF,QAAQ,IAGpC2D,EAAIK,KAAKlS,EAAMD,EAAMlE,EAAW5F,EAAO4F,GAAWwX,OAGlDxB,EACGK,KACClS,EAAOhE,EACP+D,EAAMlE,EACNG,EACA9F,EAAS2F,EAAYE,GAEtBsX,OAGHxB,EACGK,KACClS,EAAO/J,EACP8J,EAAMlE,EACNC,EACA5F,EAAS2F,EAAYE,GAEtBsX,OAGHxB,EAAIK,KAAKlS,EAAMD,EAAM7J,EAAQD,EAAO8F,GAAcsX,QA8ClDmQ,CAAY3R,EAAKzY,GA3CD,EAACyY,EAAKzY,WAChB4G,KACJA,EADID,IAEJA,EAFI9J,MAGJA,EAHIC,OAIJA,EAJI8F,WAKJA,EALIH,UAMJA,EANIC,YAOJA,EAPIC,aAQJA,GACE3C,EAAK0G,IAEH2jB,EAAenjB,KAAK8hB,MAAMnsB,EAAQ+F,EAAaF,GAC/C4nB,EAAgBpjB,KAAK8hB,MAAMlsB,EAAS2F,EAAYE,GAEtD8V,EACGlF,SAAS,GACTuB,QAAQ,GACRwF,UAAU,SACVzG,QACIwW,OAAkBC,IACrB1jB,EAAOhE,EACPsE,KAAKsQ,IAAI7Q,EAAMlE,EAAY,EAAG,KAsBlC8nB,CAAU9R,EAAKzY,GAlBG,EAACyY,EAAKzY,KACpBA,EAAKukB,QACP9L,EACGY,OAAOrZ,EAAKukB,OAAO3d,KAAM5G,EAAKukB,OAAO5d,IAAK,GAC1CsT,KAAK,OACLZ,OAAOrZ,EAAKukB,OAAO3d,KAAM5G,EAAKukB,OAAO5d,IAAK,GAC1CuT,OAAO,QAaZsQ,CAAY/R,EAAKzY,GAEjByY,EAAI2B,UAEGpa,GAZwBA,GCnJjC,MAAM0lB,IAAgBxe,KAAKye,KAAK,GAAK,GAAO,EAA9B,EAgrBd,OAAepwB,EAAS,EAxFF,CAACkjB,EAAKzY,SAPAA,CAAAA,GAC1BA,EAAK0G,MACJ1G,EAAK0G,IAAIjD,gBACRzD,EAAK0G,IAAI9C,kBACT5D,EAAK0G,IAAI3C,mBACT/D,EAAK0G,IAAIxC,iBAGNumB,CAAoBzqB,GAAO,OAAOA,QAEjCnD,MACJA,EADIC,OAEJA,EAFI2G,eAGJA,EAHIS,gBAIJA,EAJIN,iBAKJA,EALIG,kBAMJA,GACE/D,EAAK0G,KAEHoO,QACJA,EADIrQ,oBAEJA,EAAsB,EAFlBC,qBAGJA,EAAuB,EAHnBE,uBAIJA,EAAyB,EAJrBD,wBAKJA,EAA0B,EALtBpB,eAMJA,EAAiB,QANbC,eAOJA,EAAiB,QAPbQ,gBAQJA,EAAkB,QARdC,gBASJA,EAAkB,QATdP,iBAUJA,EAAmB,QAVfC,iBAWJA,EAAmB,QAXfE,kBAYJA,EAAoB,QAZhBC,kBAaJA,EAAoB,SAClB9D,EAAK9I,MAEHA,EAAQ,CACZqM,eAAAA,EACAE,eAAAA,EACAD,eAAAA,EACAQ,gBAAAA,EACAE,gBAAAA,EACAD,gBAAAA,EACAP,iBAAAA,EACAE,iBAAAA,EACAD,iBAAAA,EACAE,kBAAAA,EACAE,kBAAAA,EACAD,kBAAAA,EACAW,oBAAAA,EACAC,qBAAAA,EACAE,uBAAAA,EACAD,wBAAAA,GAGIihB,EAAM1e,KAAK6Q,IAAIrT,EAAsB,GAAM7H,EAAO,GAAMC,GACxDopB,EAAMhf,KAAK6Q,IAAItT,EAAqB,GAAM5H,EAAO,GAAMC,GACvDgpB,EAAM5e,KAAK6Q,IAAIpT,EAAyB,GAAM9H,EAAO,GAAMC,GAC3DkpB,EAAM9e,KAAK6Q,IAAInT,EAAwB,GAAM/H,EAAO,GAAMC,UAEhE2b,EAAIuB,OACJvB,EAAIiC,cAAc5F,GAEdrR,IACFgV,EAAIuB,OA9oBc,EAACvB,EAAK3H,EAAQ5Z,EAAO0uB,EAAKM,WACxCvf,IAAEA,EAAFC,KAAOA,EAAP/J,MAAaA,EAAbC,OAAoBA,GAAWgU,GAC/BrN,eAAEA,EAAFG,iBAAkBA,EAAlBM,gBAAoCA,GAAoBhN,EAG9DuhB,EAAII,OAAOjS,EAAOsf,EAAKvf,GACvB8R,EAAIW,OAAOxS,EAAO/J,EAAQ+oB,EAAKjf,SAGzB+jB,EAAK9E,GAAO,EAAMF,IAGxBjN,EAAIiB,cACF9S,EAAO/J,EAAQ6tB,EACf/jB,EACAC,EAAO/J,EACP8J,EAAM+jB,EACN9jB,EAAO/J,EACP8J,EAAMif,SAIF+E,EAAiBhkB,EAAMO,KAAKsQ,IAAI/T,EAAgBmiB,GACtDnN,EAAIW,OAAOxS,EAAO/J,EAAO8tB,GAGzBlS,EAAIW,OAAOxS,EAAO/J,EAAQ+G,EAAkB+mB,SAGtCC,EAAuB1jB,KAAKsQ,IAAIoO,EAAMhiB,EAAkB,GACxDinB,EAAuB3jB,KAAKsQ,IAAIoO,EAAMniB,EAAgB,GACtDqnB,EAAKF,GAAwB,EAAMlF,IACnCqF,EAAKF,GAAwB,EAAMnF,IAGzCjN,EAAIiB,cACF9S,EAAO/J,EAAQ+G,EACf+C,EAAMlD,EAAiBsnB,EACvBnkB,EAAO/J,EAAQ+G,EAAmBknB,EAClCnkB,EAAMlD,EACNmD,EAAO/J,EAAQ+G,EAAmBgnB,EAClCjkB,EAAMlD,GAIRgV,EAAIW,OAAOxS,EAAOM,KAAKsQ,IAAI0O,EAAKhiB,GAAkByC,EAAMlD,SAGlDunB,EAAsB9jB,KAAKsQ,IAAI0O,EAAMhiB,EAAiB,GACtD+mB,EAAsB/jB,KAAKsQ,IAAI0O,EAAMziB,EAAgB,GACrDynB,EAAKF,GAAuB,EAAMtF,IAClCyF,EAAKF,GAAuB,EAAMvF,IAClC0F,EAAgBzkB,EAAMO,KAAKsQ,IAAI/T,EAAgByiB,GAGrDzN,EAAIiB,cACF9S,EAAO1C,EAAkBgnB,EACzBvkB,EAAMlD,EACNmD,EAAO1C,EACPyC,EAAMlD,EAAiB0nB,EACvBvkB,EAAO1C,EACPknB,GAEF3S,EAAIW,OAAOxS,EAAMwkB,GAGjB3S,EAAIW,OAAOxS,EAAMD,EAAMuf,SAGjBmF,EAAKnF,GAAO,EAAMR,OAGxBjN,EAAIiB,cAAc9S,EAAMD,EAAM0kB,EAAIzkB,EAAOykB,EAAI1kB,EAAKC,EAAOsf,EAAKvf,GAC9D8R,EAAI2N,YACJ3N,EAAIsB,OAGAnW,EAAkB,OACd0nB,GAAW7nB,EAAiBG,EAClC6U,EAAII,OAAOjS,EAAO/J,EAAQ,EAAGyuB,IAAYzuB,EAAQ,GAAK8J,GACtD8R,EAAIW,OAAOxS,EAAO/J,EAAO8J,GACzB8R,EAAIW,OAAOxS,EAAMD,GACjB8R,EAAIW,OAAOxS,EAAMD,EAAM7J,GACvB2b,EAAI2N,YACJ3N,EAAIsB,UAGF7V,EAAiB,OACbonB,GAAW7nB,EAAiBS,EAClCuU,EAAII,OAAOjS,EAAO/J,EAAQ,EAAGyuB,IAAYzuB,EAAQ,GAAK8J,GACtD8R,EAAIW,OAAOxS,EAAMD,GACjB8R,EAAIW,OAAOxS,EAAO/J,EAAO8J,GACzB8R,EAAIW,OAAOxS,EAAO/J,EAAO8J,EAAM7J,GAC/B2b,EAAI2N,YACJ3N,EAAIsB,SAijBJwR,CAAc9S,EAAKzY,EAAK0G,IAAKxP,EAAO0uB,EAAKM,GA7iBvB,EAACzN,EAAK3H,EAAQ5Z,EAAO0uB,EAAKM,WACxCvf,IAAEA,EAAFC,KAAOA,EAAP/J,MAAaA,GAAUiU,GACvBvN,eACJA,EADIE,eAEJA,EAFID,eAGJA,EAHII,iBAIJA,EAJIM,gBAKJA,GACEhN,EAEEwzB,EAAKxE,GAAO,EAAMR,IAClBoF,EAAKlF,GAAO,EAAMF,IAExBjN,EAAII,OAAOjS,EAAMD,EAAMO,KAAKsQ,IAAI0O,EAAKziB,IACrCgV,EAAIiB,cAAc9S,EAAMD,EAAM+jB,EAAI9jB,EAAO8jB,EAAI/jB,EAAKC,EAAOsf,EAAKvf,GAC9D8R,EAAIW,OAAOxS,EAAO/J,EAAQ+oB,EAAKjf,GAC/B8R,EAAIiB,cACF9S,EAAO/J,EAAQiuB,EACfnkB,EACAC,EAAO/J,EACP8J,EAAMmkB,EACNlkB,EAAO/J,EACP8J,EAAMif,GAGRnN,EAAI+B,YAAYjX,GAChBkV,EAAIgB,UAC4D,EAA9DvS,KAAKsQ,IAAI5T,EAAkBH,EAAgBS,IAGtB,WAAnBV,EACFiV,EAAIqB,KAAsB,EAAjBrW,EAAoB,CAAE+nB,MAAwB,IAAjB/nB,IACV,WAAnBD,GACTiV,EAAIqB,KAAKrW,EAAgB,CAAE+nB,MAAwB,IAAjB/nB,IAGpCgV,EAAIyB,SACJzB,EAAIgT,UAygBFC,CAAcjT,EAAKzY,EAAK0G,IAAKxP,EAAO0uB,EAAKM,GACzCzN,EAAI2B,WAGFxW,IACF6U,EAAIuB,OA3gBgB,EAACvB,EAAK3H,EAAQ5Z,EAAO0uB,EAAKE,WAC1Cnf,IAAEA,EAAFC,KAAOA,EAAP/J,MAAaA,EAAbC,OAAoBA,GAAWgU,GAC/BrN,eAAEA,EAAFG,iBAAkBA,EAAlBG,kBAAoCA,GAAsB7M,EAGhEuhB,EAAII,OAAOjS,EAAO/J,EAAO8J,EAAMif,GAC/BnN,EAAIW,OAAOxS,EAAO/J,EAAO8J,EAAM7J,EAASgpB,SAGlC4E,EAAK5E,GAAO,EAAMJ,IAGxBjN,EAAIiB,cACF9S,EAAO/J,EACP8J,EAAM7J,EAAS4tB,EACf9jB,EAAO/J,EAAQ6tB,EACf/jB,EAAM7J,EACN8J,EAAO/J,EAAQipB,EACfnf,EAAM7J,SAIF6uB,EAAkB/kB,EAAO/J,EAAQqK,KAAKsQ,IAAI5T,EAAkBkiB,GAClErN,EAAIW,OAAOuS,EAAiBhlB,EAAM7J,GAGlC2b,EAAIW,OAAOuS,EAAiBhlB,EAAM7J,EAASiH,SAGrC6nB,EAA0B1kB,KAAKsQ,IAAIsO,EAAMliB,EAAkB,GAC3DioB,EAA0B3kB,KAAKsQ,IAAIsO,EAAM/hB,EAAmB,GAC5D+mB,EAAKc,GAA2B,EAAMlG,IACtCqF,EAAKc,GAA2B,EAAMnG,IAG5CjN,EAAIiB,cACF9S,EAAO/J,EAAQ+G,EAAmBknB,EAClCnkB,EAAM7J,EAASiH,EACf6C,EAAO/J,EAAQ+G,EACf+C,EAAM7J,EAASiH,EAAoBgnB,EACnCnkB,EAAO/J,EAAQ+G,EACf+C,EAAM7J,EAASoK,KAAKsQ,IAAIsO,EAAK/hB,IAI/B0U,EAAIW,OACFxS,EAAO/J,EAAQ+G,EACf+C,EAAMO,KAAKsQ,IAAIoO,EAAKniB,UAIhBmnB,EAAuB1jB,KAAKsQ,IAAIoO,EAAMhiB,EAAkB,GACxDinB,EAAuB3jB,KAAKsQ,IAAIoO,EAAMniB,EAAgB,GACtDynB,EAAKN,GAAwB,EAAMlF,IACnCyF,EAAKN,GAAwB,EAAMnF,IACnCoG,EAAiBllB,EAAO/J,EAAQqK,KAAKsQ,IAAIoO,EAAKhiB,GAGpD6U,EAAIiB,cACF9S,EAAO/J,EAAQ+G,EACf+C,EAAMlD,EAAiB0nB,EACvBvkB,EAAO/J,EAAQ+G,EAAmBsnB,EAClCvkB,EAAMlD,EACNqoB,EACAnlB,EAAMlD,GAERgV,EAAIW,OAAO0S,EAAgBnlB,GAG3B8R,EAAIW,OAAOxS,EAAO/J,EAAQ+oB,EAAKjf,SAGzB0kB,EAAKzF,GAAO,EAAMF,OAGxBjN,EAAIiB,cACF9S,EAAO/J,EAAQwuB,EACf1kB,EACAC,EAAO/J,EACP8J,EAAM0kB,EACNzkB,EAAO/J,EACP8J,EAAMif,GAGRnN,EAAI2N,YACJ3N,EAAIsB,OAGAtW,EAAgB,OACZ6nB,GAAW7nB,EAAiBG,EAClC6U,EAAII,OAAOjS,EAAO/J,EAAQ,EAAGyuB,IAAYzuB,EAAQ,GAAK8J,GACtD8R,EAAIW,OAAOxS,EAAO/J,EAAO8J,GACzB8R,EAAIW,OAAOxS,EAAO/J,EAAO8J,EAAM7J,GAC/B2b,EAAIW,OAAOxS,EAAMD,EAAM7J,GACvB2b,EAAI2N,YACJ3N,EAAIsB,UAGFhW,EAAmB,OACfgoB,EAAUhoB,EAAoBH,EACpC6U,EAAII,OAAOjS,EAAO/J,EAAQ,EAAGkvB,IAAYlvB,EAAQ,GAAK8J,EAAM7J,GAC5D2b,EAAIW,OAAOxS,EAAO/J,EAAO8J,EAAM7J,GAC/B2b,EAAIW,OAAOxS,EAAO/J,EAAO8J,GACzB8R,EAAIW,OAAOxS,EAAMD,GACjB8R,EAAI2N,YACJ3N,EAAIsB,SAmaJiS,CAAgBvT,EAAKzY,EAAK0G,IAAKxP,EAAO0uB,EAAKE,GA/ZvB,EAACrN,EAAK3H,EAAQ5Z,EAAO0uB,EAAKE,WAC1Cnf,IAAEA,EAAFC,KAAOA,EAAP/J,MAAaA,EAAbC,OAAoBA,GAAWgU,GAC/BpN,iBACJA,EADIC,iBAEJA,EAFIC,iBAGJA,EAHIH,eAIJA,EAJIM,kBAKJA,GACE7M,EAEEwzB,EAAK5E,GAAO,EAAMJ,IAClBoF,EAAKlF,GAAO,EAAMF,IAExBjN,EAAII,OAAOjS,EAAO/J,EAAQ+oB,EAAKjf,GAC/B8R,EAAIiB,cACF9S,EAAO/J,EAAQiuB,EACfnkB,EACAC,EAAO/J,EACP8J,EAAMmkB,EACNlkB,EAAO/J,EACP8J,EAAMif,GAERnN,EAAIW,OAAOxS,EAAO/J,EAAO8J,EAAM7J,EAASgpB,GACxCrN,EAAIiB,cACF9S,EAAO/J,EACP8J,EAAM7J,EAAS4tB,EACf9jB,EAAO/J,EAAQ6tB,EACf/jB,EAAM7J,EACN8J,EAAO/J,EAAQipB,EACfnf,EAAM7J,GAGR2b,EAAI+B,YAAY9W,GAChB+U,EAAIgB,UAC8D,EAAhEvS,KAAKsQ,IAAI5T,EAAkBH,EAAgBM,IAGpB,WAArBJ,EACF8U,EAAIqB,KAAwB,EAAnBlW,EAAsB,CAAE4nB,MAA0B,IAAnB5nB,IACV,WAArBD,GACT8U,EAAIqB,KAAKlW,EAAkB,CAAE4nB,MAA0B,IAAnB5nB,IAGtC6U,EAAIyB,SACJzB,EAAIgT,UAoXFQ,CAAgBxT,EAAKzY,EAAK0G,IAAKxP,EAAO0uB,EAAKE,GAC3CrN,EAAI2B,WAGFrW,IACF0U,EAAIuB,OAtXiB,EAACvB,EAAK3H,EAAQ5Z,EAAO8uB,EAAKF,WAC3Cnf,IAAEA,EAAFC,KAAOA,EAAP/J,MAAaA,EAAbC,OAAoBA,GAAWgU,GAC/B/M,kBAAEA,EAAFH,iBAAqBA,EAArBM,gBAAuCA,GAAoBhN,EAGjEuhB,EAAII,OAAOjS,EAAO/J,EAAQipB,EAAKnf,EAAM7J,GACrC2b,EAAIW,OAAOxS,EAAOof,EAAKrf,EAAM7J,SAGvB4tB,EAAK1E,GAAO,EAAMN,IAGxBjN,EAAIiB,cACF9S,EAAO8jB,EACP/jB,EAAM7J,EACN8J,EACAD,EAAM7J,EAAS4tB,EACf9jB,EACAD,EAAM7J,EAASkpB,SAIXkG,EAAmBvlB,EAAM7J,EAASoK,KAAKsQ,IAAIzT,EAAmBiiB,GACpEvN,EAAIW,OAAOxS,EAAMslB,GAGjBzT,EAAIW,OAAOxS,EAAO1C,EAAiBgoB,SAG7BC,EAAyBjlB,KAAKsQ,IAAIwO,EAAM9hB,EAAiB,GACzDkoB,EAAyBllB,KAAKsQ,IAAIwO,EAAMjiB,EAAmB,GAC3D+mB,EAAKqB,GAA0B,EAAMzG,IACrCqF,EAAKqB,GAA0B,EAAM1G,IAG3CjN,EAAIiB,cACF9S,EAAO1C,EACPyC,EAAM7J,EAASiH,EAAoBgnB,EACnCnkB,EAAO1C,EAAkB4mB,EACzBnkB,EAAM7J,EAASiH,EACf6C,EAAO1C,EAAkBioB,EACzBxlB,EAAM7J,EAASiH,GAIjB0U,EAAIW,OACFxS,EAAO/J,EAAQqK,KAAKsQ,IAAIsO,EAAKliB,GAC7B+C,EAAM7J,EAASiH,SAIX6nB,EAA0B1kB,KAAKsQ,IAAIsO,EAAMliB,EAAkB,GAC3DioB,EAA0B3kB,KAAKsQ,IAAIsO,EAAM/hB,EAAmB,GAC5DmnB,EAAKU,GAA2B,EAAMlG,IACtCyF,EAAKU,GAA2B,EAAMnG,IACtC2G,EAAoB1lB,EAAM7J,EAASoK,KAAKsQ,IAAIzT,EAAmB+hB,GAGrErN,EAAIiB,cACF9S,EAAO/J,EAAQ+G,EAAmBsnB,EAClCvkB,EAAM7J,EAASiH,EACf6C,EAAO/J,EAAQ+G,EACf+C,EAAM7J,EAASiH,EAAoBonB,EACnCvkB,EAAO/J,EAAQ+G,EACfyoB,GAEF5T,EAAIW,OAAOxS,EAAO/J,EAAOwvB,GAGzB5T,EAAIW,OAAOxS,EAAO/J,EAAO8J,EAAM7J,EAASgpB,SAGlCuF,EAAKvF,GAAO,EAAMJ,OAGxBjN,EAAIiB,cACF9S,EAAO/J,EACP8J,EAAM7J,EAASuuB,EACfzkB,EAAO/J,EAAQwuB,EACf1kB,EAAM7J,EACN8J,EAAO/J,EAAQipB,EACfnf,EAAM7J,GAER2b,EAAI2N,YACJ3N,EAAIsB,OAGAnW,EAAkB,OACdmoB,EAAUhoB,EAAoBH,EACpC6U,EAAII,OAAOjS,EAAO/J,EAAQ,EAAGkvB,IAAYlvB,EAAQ,GAAK8J,EAAM7J,GAC5D2b,EAAIW,OAAOxS,EAAO/J,EAAO8J,EAAM7J,GAC/B2b,EAAIW,OAAOxS,EAAMD,EAAM7J,GACvB2b,EAAIW,OAAOxS,EAAMD,GACjB8R,EAAI2N,YACJ3N,EAAIsB,UAGF7V,EAAiB,OACbonB,GAAWvnB,EAAoBG,EACrCuU,EAAII,OAAOjS,EAAO/J,EAAQ,EAAGyuB,GAAWzuB,EAAQ,GAAK8J,EAAM7J,GAC3D2b,EAAIW,OAAOxS,EAAMD,EAAM7J,GACvB2b,EAAIW,OAAOxS,EAAO/J,EAAO8J,EAAM7J,GAC/B2b,EAAIW,OAAOxS,EAAO/J,EAAO8J,GACzB8R,EAAI2N,YACJ3N,EAAIsB,SA+QJuS,CAAiB7T,EAAKzY,EAAK0G,IAAKxP,EAAO8uB,EAAKF,GA3QvB,EAACrN,EAAK3H,EAAQ5Z,EAAO8uB,EAAKF,WAC3Cnf,IAAEA,EAAFC,KAAOA,EAAP/J,MAAaA,EAAbC,OAAoBA,GAAWgU,GAC/BjN,kBACJA,EADIC,kBAEJA,EAFIC,kBAGJA,EAHIH,iBAIJA,EAJIM,gBAKJA,GACEhN,EAEEwzB,EAAK1E,GAAO,EAAMN,IAClBoF,EAAKhF,GAAO,EAAMJ,IAExBjN,EAAII,OAAOjS,EAAO/J,EAAO8J,EAAM7J,EAASgpB,GACxCrN,EAAIiB,cACF9S,EAAO/J,EACP8J,EAAM7J,EAASguB,EACflkB,EAAO/J,EAAQiuB,EACfnkB,EAAM7J,EACN8J,EAAO/J,EAAQipB,EACfnf,EAAM7J,GAER2b,EAAIW,OAAOxS,EAAOof,EAAKrf,EAAM7J,GAC7B2b,EAAIiB,cACF9S,EAAO8jB,EACP/jB,EAAM7J,EACN8J,EACAD,EAAM7J,EAAS4tB,EACf9jB,EACAD,EAAM7J,EAASkpB,GAGjBvN,EAAI+B,YAAY3W,GAChB4U,EAAIgB,UAC+D,EAAjEvS,KAAKsQ,IAAIzT,EAAmBH,EAAkBM,IAGtB,WAAtBJ,EACF2U,EAAIqB,KAAyB,EAApB/V,EAAuB,CAAEynB,MAA2B,IAApBznB,IACV,WAAtBD,GACT2U,EAAIqB,KAAK/V,EAAmB,CAAEynB,MAA2B,IAApBznB,IAGvC0U,EAAIyB,SACJzB,EAAIgT,UAgOFc,CAAiB9T,EAAKzY,EAAK0G,IAAKxP,EAAO8uB,EAAKF,GAC5CrN,EAAI2B,WAGFlW,IACFuU,EAAIuB,OAlOe,EAACvB,EAAK3H,EAAQ5Z,EAAO8uB,EAAKE,WACzCvf,IAAEA,EAAFC,KAAOA,EAAP/J,MAAaA,EAAbC,OAAoBA,GAAWgU,GAC/BrN,eAAEA,EAAFS,gBAAkBA,EAAlBH,kBAAmCA,GAAsB7M,EAG/DuhB,EAAII,OAAOjS,EAAMD,EAAM7J,EAASkpB,GAChCvN,EAAIW,OAAOxS,EAAMD,EAAMuf,SAGjBwE,EAAKxE,GAAO,EAAMR,IAGxBjN,EAAIiB,cAAc9S,EAAMD,EAAM+jB,EAAI9jB,EAAO8jB,EAAI/jB,EAAKC,EAAOsf,EAAKvf,SAGxD6lB,EAAgB5lB,EAAOM,KAAKsQ,IAAItT,EAAiBgiB,GACvDzN,EAAIW,OAAOoT,EAAe7lB,GAG1B8R,EAAIW,OAAOoT,EAAe7lB,EAAMlD,SAG1BunB,EAAsB9jB,KAAKsQ,IAAI0O,EAAMhiB,EAAiB,GACtD+mB,EAAsB/jB,KAAKsQ,IAAI0O,EAAMziB,EAAgB,GACrDqnB,EAAKE,GAAuB,EAAMtF,IAClCqF,EAAKE,GAAuB,EAAMvF,IAGxCjN,EAAIiB,cACF9S,EAAO1C,EAAkB4mB,EACzBnkB,EAAMlD,EACNmD,EAAO1C,EACPyC,EAAMlD,EAAiBsnB,EACvBnkB,EAAO1C,EACPyC,EAAMO,KAAKsQ,IAAI0O,EAAKziB,IAItBgV,EAAIW,OACFxS,EAAO1C,EACPyC,EAAM7J,EAASoK,KAAKsQ,IAAIwO,EAAKjiB,UAIzBooB,EAAyBjlB,KAAKsQ,IAAIwO,EAAM9hB,EAAiB,GACzDkoB,EAAyBllB,KAAKsQ,IAAIwO,EAAMjiB,EAAmB,GAC3DmnB,EAAKiB,GAA0B,EAAMzG,IACrCyF,EAAKiB,GAA0B,EAAM1G,IACrC+G,EAAmB7lB,EAAOM,KAAKsQ,IAAIwO,EAAK9hB,GAG9CuU,EAAIiB,cACF9S,EAAO1C,EACPyC,EAAM7J,EAASiH,EAAoBonB,EACnCvkB,EAAO1C,EAAkBgnB,EACzBvkB,EAAM7J,EAASiH,EACf0oB,EACA9lB,EAAM7J,EAASiH,GAEjB0U,EAAIW,OAAOqT,EAAkB9lB,EAAM7J,GAGnC2b,EAAIW,OAAOxS,EAAOof,EAAKrf,EAAM7J,SAGvBuuB,EAAKrF,GAAO,EAAMN,OAGxBjN,EAAIiB,cACF9S,EAAOykB,EACP1kB,EAAM7J,EACN8J,EACAD,EAAM7J,EAASuuB,EACfzkB,EACAD,EAAM7J,EAASkpB,GAGjBvN,EAAI2N,YACJ3N,EAAIsB,OAGAhW,EAAmB,OACfunB,GAAWvnB,EAAoBG,EACrCuU,EAAII,OAAOjS,EAAO/J,EAAQ,EAAGyuB,GAAWzuB,EAAQ,GAAK8J,EAAM7J,GAC3D2b,EAAIW,OAAOxS,EAAMD,EAAM7J,GACvB2b,EAAIW,OAAOxS,EAAMD,GACjB8R,EAAIW,OAAOxS,EAAO/J,EAAO8J,GACzB8R,EAAI2N,YACJ3N,EAAIsB,UAGFhW,EAAmB,OACfunB,GAAW7nB,EAAiBS,EAClCuU,EAAII,OAAOjS,EAAO/J,EAAQ,EAAGyuB,IAAYzuB,EAAQ,GAAK8J,GACtD8R,EAAIW,OAAOxS,EAAMD,GACjB8R,EAAIW,OAAOxS,EAAMD,EAAM7J,GACvB2b,EAAIW,OAAOxS,EAAO/J,EAAO8J,EAAM7J,GAC/B2b,EAAI2N,YACJ3N,EAAIsB,SAiIJ2S,CAAejU,EAAKzY,EAAK0G,IAAKxP,EAAO8uB,EAAKE,GA7HvB,EAACzN,EAAK3H,EAAQ5Z,EAAO8uB,EAAKE,WACzCvf,IAAEA,EAAFC,KAAOA,EAAP9J,OAAaA,GAAWgU,GACxB9M,gBACJA,EADIC,gBAEJA,EAFIC,gBAGJA,EAHIT,eAIJA,EAJIM,kBAKJA,GACE7M,EAEEwzB,EAAK1E,GAAO,EAAMN,IAClBoF,EAAK5E,GAAO,EAAMR,IAExBjN,EAAII,OAAOjS,EAAOof,EAAKrf,EAAM7J,GAC7B2b,EAAIiB,cACF9S,EAAO8jB,EACP/jB,EAAM7J,EACN8J,EACAD,EAAM7J,EAAS4tB,EACf9jB,EACAD,EAAM7J,EAASkpB,GAEjBvN,EAAIW,OAAOxS,EAAMD,EAAMuf,GACvBzN,EAAIiB,cAAc9S,EAAMD,EAAMmkB,EAAIlkB,EAAOkkB,EAAInkB,EAAKC,EAAOsf,EAAKvf,GAE9D8R,EAAI+B,YAAYxW,GAChByU,EAAIgB,UAC6D,EAA/DvS,KAAKsQ,IAAItT,EAAiBT,EAAgBM,IAGpB,WAApBE,EACFwU,EAAIqB,KAAuB,EAAlB5V,EAAqB,CAAEsnB,MAAyB,IAAlBtnB,IACV,WAApBD,GACTwU,EAAIqB,KAAK5V,EAAiB,CAAEsnB,MAAyB,IAAlBtnB,IAGrCuU,EAAIyB,SACJzB,EAAIgT,UAyFFkB,CAAelU,EAAKzY,EAAK0G,IAAKxP,EAAO8uB,EAAKE,GAC1CzN,EAAI2B,WAGN3B,EAAI2B,UAEGpa,IC5qBT,MAcM4sB,GAAyBr3B,EAAU,CAAC,QAAS,oBAgBnD,OAAeA,EAAS,EAdC,CAACkjB,EAAKzY,KAC7BzK,EACEq3B,GACAr3B,EACE6kB,GAAQ3B,GApBSA,CAAAA,GAAOzY,OACxBA,EAAK0G,KAAO1G,EAAK9I,MAAMmd,gBAAiB,OACpC1N,IAAEA,EAAFC,KAAOA,EAAP/J,MAAaA,EAAbC,OAAoBA,GAAWkD,EAAK0G,IAE1C+R,EACGgC,YAAYza,EAAK9I,MAAM4d,SAAW,GAClCwF,UAAUta,EAAK9I,MAAMmd,iBACrByE,KAAKlS,EAAMD,EAAK9J,EAAOC,GACvBmd,cAGEja,GAUH6sB,CAAepU,GACfsP,GAAStP,GACTuB,GAAKvB,IANTljB,CAQEyK,GAEKA,IC7BT,MAWM8sB,GAAgBC,UACdC,EAAS,8BAA8BztB,KAAKwtB,GAC5CE,EAAe,iDAAiD1tB,KACpEwtB,UAGEC,GAAUA,EAAO,GAAWA,EAAO,GACnCC,GAAgBA,EAAa,GAAWA,EAAa,GAElD,GAGHC,GAAgBH,UACdI,EAAS,+BAA+B5tB,KAAKwtB,GAC7CE,EAAe,mDAAmD1tB,KACtEwtB,UAGEI,GAAUA,EAAO,GAAWA,EAAO,GACnCF,GAAgBA,EAAa,GAAWA,EAAa,GAElD,GAGHG,GAAYL,UACVC,EAAS,2BAA2BztB,KAAKwtB,GACzCE,EAAe,+CAA+C1tB,KAClEwtB,UAGEC,GAAUA,EAAO,GAAWA,EAAO,GACnCC,GAAgBA,EAAa,GAAWA,EAAa,GAElD,GAGHI,GAAYN,UACVI,EAAS,2BAA2B5tB,KAAKwtB,GACzCE,EAAe,+CAA+C1tB,KAClEwtB,UAGEI,GAAUA,EAAO,GAAWA,EAAO,GACnCF,GAAgBA,EAAa,GAAWA,EAAa,GAElD,GAWHK,GAA4B,CAAC7U,EAAKsU,EAAWxI,KAC7C,UAAUllB,KAAK0tB,GACjBtU,EAAImB,OArEYmT,CAAAA,UACZl3B,EAAQ,8BAA8B0J,KAAKwtB,MAE7Cl3B,GAASA,EAAM,IAAMA,EAAM,GAAI,OAC3BE,EAAQF,EAAM,SACA,QAAbA,EAAM,GAAwB,IAARE,EAAemR,KAAKqmB,GAAKx3B,SAGjD,GA6DMy3B,CAAYT,GAAY,CAAExI,OAAAA,IAC5B,UAAUllB,KAAK0tB,GACxBtU,EAAIhC,MAAM2W,GAAUL,GAAY,EAAG,CAAExI,OAAAA,IAC5B,UAAUllB,KAAK0tB,GACxBtU,EAAIhC,MAAM,EAAG4W,GAAUN,GAAY,CAAExI,OAAAA,IAC5B,SAASllB,KAAK0tB,GACvBtU,EAAIhC,MAAM2W,GAAUL,GAAYM,GAAUN,GAAY,CACpDxI,OAAAA,IAEO,cAAcllB,KAAK0tB,GAC5BtU,EAAIoB,UAAUiT,GAAcC,GAAY,EAAG,CAAExI,OAAAA,IACpC,cAAcllB,KAAK0tB,GAC5BtU,EAAIoB,UAAU,EAAGqT,GAAcH,GAAY,CAAExI,OAAAA,IACpC,aAAallB,KAAK0tB,GAC3BtU,EAAIoB,UAAUiT,GAAcC,GAAYG,GAAcH,GAAY,CAChExI,OAAAA,IAEO,UAAUllB,KAAK0tB,IACxBtU,EAAIsU,aA5BUA,CAAAA,UACVl3B,EAAQ,6DAA6D0J,KACzEwtB,UAEEl3B,EAAcA,EAAM6L,MAAM,EAAG,GAC1B,MAuBY+rB,CAAUV,KAmB/B,OAAex3B,EAAS,EAfK,CAACkjB,EAAKzY,SAC5BA,EAAKukB,OAAQ,OAAOvkB,MAErBnK,QACE63B,EAAK,sBACLnJ,EAAS,CAACvkB,EAAKukB,OAAO3d,KAAM5G,EAAKukB,OAAO5d,KACxComB,EAAa/sB,EAAK9I,OAAS8I,EAAK9I,MAAM61B,WAAc,QAEnB,OAA/Bl3B,EAAQ63B,EAAGnuB,KAAKwtB,KACtBO,GAA0B7U,EAAK5iB,EAAM,GAAI0uB,UAGpCvkB,ICnFT,MAAMse,GAAY/oB,EAAaib,IAEzBmd,GAAalV,GAAOzY,UAClB4tB,EAAiBr4B,EACrBA,EACEA,GAAUo4B,GAAWlV,IACrBljB,EAAS,GAAI,CAAC,sBAIXA,EACL6kB,GAAQ3B,GACRoV,GAAYpV,GACZljB,EAAO+oB,GAAWsP,GAClBr4B,EAAO,CACL,CAACib,GAAQsd,GAAWrV,IACpB,CAACyL,GAAQ6J,GAAWtV,IACpB,CAAChI,GAAQud,GAAWvV,IACpB,CAAClc,GAAS0xB,GAAYxV,IACtB,CAAC9H,GAAUud,GAAazV,IACxB,CAACljB,EAAKA,KAER44B,GAAc1V,GACd2V,GAAiB3V,GACjB4V,GAAqB5V,GACrBuB,GAAKvB,GACLljB,EAAOmb,GAAQ4d,GAAW7V,IAhBrBljB,CAiBLyK,IAcEuuB,GAAa9V,GACjBljB,EACEA,GAbmBkjB,CAAAA,GACrBljB,EACEA,GACEA,EACEi5B,GAAa/V,GACbkV,GAAWlV,KAGfljB,EAAS,GAAI,CAAC,cAKJk5B,CAAehW,IACzBljB,EAAS,GAAI,CAAC,cAGZ+vB,GAAS,CAAC7M,EAAK2Q,KACnBsF,GAAYjW,EAAZiW,CAAiBtF,GACjBmF,GAAW9V,EAAX8V,CAAgBnF,GAEhB3Q,EAAIjC,MACJrd,GAAKgD,QAEEsc,GClET,OAAe,CACbkW,cAAe,EACf91B,OAZasJ,GAAUA,EAavBD,QAAAA,GACA0sB,mBAZyB,CACzB/S,SAAU,WACVlV,IAAK,EACLC,KAAM,EACNqG,OAAQ,EACRD,MAAO,qBCWH6hB,GzHpBc,OyHqBdC,GzHpBc,OyHqBdC,GzHpBc,OyHqBdC,GzHpBc,OyHqBdC,GzHpBc,OyHqBdC,GzHpBe,QyHqBfC,GzHpBkB,WyHuBlBC,GAAMC,QACNC,GAAW,QAET5pB,EAAY,CAAE6d,KAAM,OAAQ9hB,SAAU,IACtC4jB,E1HxBekK,CAAAA,GACdC,EAAqB,CAC1BC,kBAAkB,EAElBC,mBAAmBC,EAAgBja,GACjCia,EAAeluB,SAASlI,KAAKmc,GAC7B6Z,KAGFK,eAAc,CAACrM,GAAMrsB,MAAEA,EAAFuK,SAASA,KAAaxB,MAClC,CACLsjB,KAAAA,EACA7c,IAAK,GACLxP,MAAOA,GAAS,GAChB+I,MAAOA,GAAS,GAChBwB,SAAU,KAIdouB,mBAAkB,CAAChc,EAAMic,KAChB,CAAEvM,KAAM,gBAAiBxtB,MAAO8d,IAGzCkc,wBAAuB,CAAC1P,EAASkD,EAAMtjB,KAC9B,EAGT+vB,kBAAkB7b,GACTA,EAGT8b,qBAIAC,cAAa,CAAC7P,EAASkD,EAAM4M,EAAUC,KAC7Bx8B,GAAWu8B,EAAUC,GAG/BC,iBAAiBx8B,EAAGC,EAAGw8B,KAIvBC,iBAAiBlQ,KAIjBmQ,mBAAkB,IACTl8B,GAGTm8B,oBAAmB,IACVn8B,GAGTo8B,qBAAoB,CAACnN,EAAMtjB,KAClB,EAGT0wB,IAAKC,KAAKD,IAEVE,mBAAmB,EAEnBC,YAAYnB,EAAgBja,GAC1Bia,EAAeluB,SAASlI,KAAKmc,GAC7B6Z,KAGFwB,uBAAuBpB,EAAgBja,GACrCia,EAAeluB,SAASlI,KAAKmc,GAC7B6Z,KAGFyB,aAAarB,EAAgBja,EAAOub,SAC5B5d,EAAQsc,EAAeluB,SAASyvB,QAAQD,IAC/B,IAAX5d,GAAgBqC,GAClBia,EAAeluB,SAAS0vB,OAAO9d,EAAO,EAAGqC,GAC3C6Z,KAGF6B,YAAYzB,EAAgBja,SACpBrC,EAAQsc,EAAeluB,SAASyvB,QAAQxb,IAC/B,IAAXrC,GAAcsc,EAAeluB,SAAS0vB,OAAO9d,EAAO,GACxDkc,KAGF8B,yBAAyB1B,EAAgBja,SACjCrC,EAAQsc,EAAeluB,SAASyvB,QAAQxb,IAC/B,IAAXrC,GAAcsc,EAAeluB,SAAS0vB,OAAO9d,EAAO,GACxDkc,KAGF+B,iBAAiBC,EAAcC,EAASC,GACtCF,EAAax7B,MAAQ07B,EACrBlC,KAGFmC,aAAavd,EAAUwd,EAAepO,EAAM4M,EAAUC,SAC9Cl5B,MAAEA,KAAU+I,GAAUmwB,EAC5Bjc,EAASlU,MAAQA,EACjBkU,EAASjd,MAAQA,EACjBq4B,O0H7EgBqC,YAUlBtC,GAAW,IATPuC,EAAYxM,EAAYyM,gBAAgBpsB,GAE1C2pB,GAAO0C,EAAgB1C,SAiBrB/J,EAAShuB,gBACPmhB,EAAM,IAAIuZ,EAAY,CAAEC,eAAe,IAK7C32B,QAAQypB,KAAK,gBACPjU,QAAeohB,GAAexsB,GACpCpK,QAAQupB,QAAQ,gBAGV1Q,EAAWge,GAAU1Z,EAAK3H,UAEhCwe,GAAW,EAIJnb,YAeA4d,EAAgBK,GACvB/M,EAAY0M,gBAAgBK,EAAKP,EAAW,YAkDvC,QAvDQv6B,SACN46B,GAAexsB,GAwDtB2sB,0BAnGO/C,GAoGP5pB,UAAAA,EACAqsB,gBAAAA,EACAO,kBApEwBh7B,MAAAA,UAClBwZ,QAAeohB,GAAexsB,GAC9ByO,EAAWge,GAAU1Z,EAAK3H,UAChCwe,GAAW,EAEJnb,GAiEPoe,8BApDMC,SADiBlN,KACCmN,KAAKC,YAEtB,IAAI55B,QAAQ,CAACC,EAASC,KAC3Bw5B,EAAOG,GAAG,SAAU,eAEVC,EAAOJ,EAAOD,OAAO,mBAE3Bx5B,EAAQ65B,GACR,MAAOr3B,GACPvC,EAAOuC,MAIXi3B,EAAOG,GAAG,QAAS35B,MAwCrBmG,SAAAA,WCjIS0zB,GAAiBv7B,eAAe+oB,SACrClM,EAAWib,GAAI/O,GACf1oB,QAAewc,EAAS2e,kBAC9B3e,EAASzO,UAAUqtB,SACZp7B,GAGIq7B,GAAe17B,eAAe+oB,EAAS4S,EAAUv4B,SACtDw4B,QAAeL,GAAexS,GAC9BmS,EAAS9zB,EAAGy0B,kBAAkBF,UAEpCC,EAAOT,KAAKD,GAEL,IAAI15B,QAAQ,CAACC,EAASC,KAC3Bw5B,EAAOG,GAAG,SAAU,KACdj4B,GAAUA,EAASw4B,EAAQD,GAC/Bl6B,EAAQm6B,KAEVV,EAAOG,GAAG,QAAS35B,MAIjBo6B,GAAwBt7B,UACtB,IAAI1B,SACL0B,oJAIMu7B,GAAY,KACvBD,GAAsB,cAGXE,GAAkB,KAC7BF,GAAsB,oBAGXG,GAAe,KAC1BH,GAAsB,iBAGX9N,GAAS0N,iBAgBP,CACb5D,IAAAA,GACAP,K1HzEkB,O0H0ElBC,K1HzEkB,O0H0ElBC,K1HzEkB,O0H0ElBC,K1HzEkB,Y0H0ElB71B,GACA81B,K1H1EkB,O0H2ElBC,M1H1EmB,Q0H2EnBsE,gBACArE,S1H3EsB,W0H4EtBsE,WAAAA,GACAJ,UAAAA,GACAE,aAAAA,GACAD,gBAAAA,GACAT,eAAAA,GACAG,aAAAA,UAhCoBA"}